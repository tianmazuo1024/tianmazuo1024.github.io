import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as d,d as o}from"./app-CiwSPZKD.js";const c={},n=o('<p>在经过<code>业务分析</code>后，整个系统的轮廓就被大致勾勒出来了，但这明显是一个极为粗略的轮廓，或者称为<code>骨架</code>。</p><p>接下来，就可以按照这个轮廓或者<code>骨架</code>所展示的样子，来对它做更进一步的分析和设计，赋予灵魂，填充<code>血肉</code>，让它符合各方的期望。</p><p>和<code>业务分析</code>一样，<code>战略设计</code>的路线图大致是这样子的。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-25.png" alt="DDD的战略设计路线图" tabindex="0" loading="lazy"><figcaption>DDD的战略设计路线图</figcaption></figure><ul><li><p>根据<code>业务分析输出</code>的内容，从<code>限界上下文识别</code>开始，依次推进到<code>上下文关系映射</code>、<code>统一语言</code>和<code>战略层面的技术决策</code>。</p></li><li><p>其中，<code>限界上下文识别</code>和<code>上下文关系映射</code>可以说是整个<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>中最为重要的部分，这两个地方做出的设计，将直接决定今后系统的整体可用性、可维护性及运行效率，它是关键中的关键。</p></li><li><p>而<code>战略层面的技术决策</code>主要包含五个部分的内容，这也是决定系统运行效率的重要因素。但其实像<code>技术栈</code>、<code>数据架构</code>、<code>治理架构</code>和<code>微服务</code>的取舍很多公司都有着约定俗成的方案，或者直接采用已有的成熟经验。唯有<code>应用架构</code>这部分，对于不熟悉<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的团队来说，可能就要好好斟酌一番了。</p></li></ul><blockquote><p>说明：<code>PUF/D</code>指的是<code>Python + UWSGI + Flask/Django</code>。</p></blockquote><br><h2 id="业务分析输出" tabindex="-1"><a class="header-anchor" href="#业务分析输出"><span>业务分析输出</span></a></h2><p><code>业务分析</code>中得到各种业务流程、业务用例和业务子域，都可以用到<code>战略设计</code>中。</p><p>因为这次准备上线运营的特色农产品认养平台属于团队首次开发，而且该农场之前也没有任何建设电商平台的经历和经验，所以根本没有什么过往的<code>遗留系统</code>可供拆解和借鉴。</p><p>至于<code>第三方系统</code>，指的不是开发中所集成的那些功能接口，例如，<code>第三方支付</code>、<code>物流接口</code>、<code>人脸识别</code>、<code>短信验证</code>、<code>地图导航</code>等组件，而是指平台建设方作为甲方所额外采购的软件或者服务。例如，用于仓储管理的<a href="https://en.wikipedia.org/wiki/Warehouse_management_system" target="_blank" rel="noopener noreferrer">WMS</a>系统，或者用于企业资源管理的<a href="https://en.wikipedia.org/wiki/Enterprise_resource_planning" target="_blank" rel="noopener noreferrer">ERP</a>系统。</p><p>这些东西，甲方目前也没有。所以可以说，本次开发的电商平台完全是从零开始。</p><p>因此，基于<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的<code>认养管理核心子域</code>目前也没有任何除电商平台之外的外部系统与它打交道。</p><br><h2 id="限界上下文识别" tabindex="-1"><a class="header-anchor" href="#限界上下文识别"><span>限界上下文识别</span></a></h2><p>虽然通过<code>业务分析</code>初步划分出了不同的<code>子域</code>（或<code>业务模块</code>），但如何准确地界定这些<code>子域</code>的边界，尤其是能够进一步细化出每个<code>子域</code>内部所包含的更下一层的<code>子域</code>，就需要通过<code>限界上下文识别</code>来实现了。</p><p>这时候一般都会通过<a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A2%A8%E6%9A%B4" target="_blank" rel="noopener noreferrer">事件风暴</a>的方式来寻找<code>限界上下文</code>。</p><p>另外，在识别<code>限界上下文</code>的过程中，也会回过头来对之前分析和设计出来的内容（<code>业务蓝图</code>、<code>业务流程</code>、<code>业务用例</code>和<code>子域划分</code>等）不断地进行迭代、细化、调整与完善，补全可能被遗漏的业务功能，澄清可能出现的需求误区。</p><p>例如，在经过<a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A2%A8%E6%9A%B4" target="_blank" rel="noopener noreferrer">事件风暴</a>后，就新增加了之前在<code>业务用例</code>中没有考虑到的<code>分单</code>与<code>合单</code>业务用例。</p><p>将梳理出的与认养相关的所有的事件（动词行为）按照时间线进行排列后，其内容如下。</p><div class="hint-container important"><p class="hint-container-title">事件风暴</p><ul><li><p>认养事件 -&gt; 事件拦截 -&gt; 人工审核 -&gt; 用户署名 -&gt; 署名挂牌 -&gt; 邮寄证书 -&gt; 发布生长日志（含用户评价） -&gt; 领物订单 -&gt; 分单或合单 -&gt; 分拣 -&gt; 出库 -&gt; 打包 -&gt; 打印单据 -&gt; 生成电子面单 -&gt; 物流揽件 -&gt; 物流运输 -&gt; 物流派件 -&gt; 物流签收</p></li><li><p>普通认养事件 -&gt; 风控拦截 -&gt; 人工审核 -&gt; 确认库存数量 -&gt; 分拣 -&gt; 出库 -&gt; 打包 -&gt; 打印单据 -&gt; 生成电子面单 -&gt; 物流揽件 -&gt; 物流运输 -&gt; 物流派件 -&gt; 物流签收</p></li><li><p>因为<code>普通认养事件</code>和<code>普通订单</code>没差别，所以就不考虑它了。</p></li></ul></div><p>通过<a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A2%A8%E6%9A%B4" target="_blank" rel="noopener noreferrer">事件风暴</a>，可以归纳出这么几个关联性较强的<code>限界上下文</code>。</p><ul><li><p><code>风控</code>：作为整个应用的入口，主要是为抵御了<code>黄牛党</code>、<code>羊毛党</code>和<code>黑灰产</code>等不法分子的侵袭，可以实现<code>规则定义</code>、<code>事件拦截</code>、<code>人工审核</code>和<code>取消预订单</code>功能。当然除了在拦截<code>预订单</code>这一块，还有其他的地方也需要用到<code>风控</code>，但为了简化，就不再体现了。</p></li><li><p><code>认养</code>：主要是<code>用户署名</code>、<code>署名挂牌</code>、<code>邮寄证书</code>、<code>发布生长日志</code>、<code>用户评价</code>、<code>用户分享</code>几块业务，这也是显著区别于其他产品的业务特色。其中，<code>署名挂牌</code>、<code>邮寄证书</code>、<code>发布生长日志</code>是由农场（也就是商家）来完成的。</p></li><li><p><code>认养交付</code>：提供<code>领物订单</code>、<code>分单</code>、<code>合单</code>等业务功能。</p></li><li><p><code>仓储</code>：因为属于初次开发运营，所以前期没有考虑自建或租用仓库，而是就地利用农场土地，搭建自己的<code>处理车间</code>，对认养的农牧产品进行<code>分拣</code>（包括<code>净化</code>、<code>有证屠宰</code>、<code>冷藏</code>等）、<code>出库</code>、<code>打包</code>、<code>打印单据</code>等操作。</p></li><li><p><code>物流</code>：这里如果再深入业务，就能发现其实它是由两个<code>限界上下文</code>组成的：能够调用不同物流接口的<code>物流插件</code>和不同物流公司的<code>物流接口</code>。<code>物流插件</code>属于是需要自行开发的<code>支撑子域</code>，而<code>物流接口</code>则应该归属于<code>通用子域</code>。</p></li></ul><p>与各个<code>限界上下文</code>相关的所有的用户界面和命令，驱动了各种事件的执行，下面是部分<code>认养</code>的<code>限界上下文</code>。</p><p>因此，最终得到基于<code>认养管理（核心子域）</code>的全部<code>限界上下文</code>如下。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-26.png" alt="认养管理相关的限界上下文" tabindex="0" loading="lazy"><figcaption>认养管理相关的限界上下文</figcaption></figure><br><h2 id="上下文映射关系" tabindex="-1"><a class="header-anchor" href="#上下文映射关系"><span>上下文映射关系</span></a></h2><p>只要有了清晰的<code>限界上下文</code>，就可以据此得出各个部分之间的<code>上下文映射关系</code>了。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-27.png" alt="认养管理相关的上下文映射关系" tabindex="0" loading="lazy"><figcaption>认养管理相关的上下文映射关系</figcaption></figure><ul><li><p><code>认养</code>和<code>认养交付</code>之间是典型的<code>发布-订阅（Publish-Subscribe）上下文</code>关系，而且事实上，几乎所有的电商平台在<code>订单生产</code>这一块，都是这种模式。这种模式既不会遗漏任何一笔订单，又能起到<code>流量整形和削峰</code>的作用，还能实现不同子系统之间的解耦。</p></li><li><p>因为<code>仓储</code>所提供的服务都是固定的，通常也不会因为某笔订单而发生更改，所以它们之间可以采取<code>遵奉者（Conformist）上下文</code>模式。</p></li><li><p>因为<code>风控</code>不仅要应对<code>认养交付</code>业务的各种场景，还有<code>交易</code>中的各种<code>退换货</code>、<code>运营</code>中的各种活动场景，所以它不可能因为<code>认养交付</code>而改变接口功能，所以它们之间也采取的是<code>遵奉者</code>模式。</p></li><li><p>同理，<code>认养交付</code>和<code>物流插件</code>之间也采取<code>遵奉者</code>模式。</p></li><li><p>至于<code>物流插件</code>和<code>第三方物流接口</code>，纯粹就是<code>API</code>调用的关系，所以是典型的<code>OHS（Open Host Service） + PL（Published Language）</code>模式，而且可能还需要在<code>物流插件</code>侧增加<code>ACL</code>防腐层，来防止<code>第三方物流接口</code>变化时所引起的接口不可用问题。</p></li></ul><p>难道<code>认养交付</code>和<code>仓储</code>、<code>风控</code>、<code>物流插件</code>这三者之间就只能采取<code>遵奉者</code>模式吗？当然不是，例如，<code>认养交付</code>和它们之间也完全可以采取<code>发布-订阅</code>模式，或者别的什么模式，这取决于各个开发者或者团队对于业务的理解。</p><p>至于哪种模式的执行效果更好，可以在测试或实际上线运行后通过不断调整来观察。</p><br><h2 id="统一语言-部分" tabindex="-1"><a class="header-anchor" href="#统一语言-部分"><span>统一语言（部分）</span></a></h2><p>理论是死的，人是活的，完全可以依据个人经验或业务推进的实际情况来决定什么时候<code>统一语言</code>。</p><p>因此，这一过程在整个<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>落地的过程中可以不断出现，毕竟召集业务专家们聚在一起不容易，指望一次会议就把所有的业务术语都给统一了，是不现实的。</p><p><code>统一语言</code>的最大和最优先的目标就是要把业务方面的名词术语给<code>统一</code>了。</p><table><thead><tr><th style="text-align:center;"><div style="width:120px;">术语</div></th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">认养（或认领）</td><td style="text-align:left;">本质上就是一种预售，通过图文、视频或直播的方式，让用户参与农牧产品的养殖过程，从而增加用户对产品健康、安全、美味的信心和兴趣，激发用户购买欲望</td></tr><tr><td style="text-align:center;">生长日志</td><td style="text-align:left;">由农场或商家自己发布的以图文或视频的形式记录农牧产品的生长状况，让用户可以以接近实时的方式观察其认养农牧产品。在具有一定规模的用户量后，再考虑增加直播形式（注意：这里的生长日志并非针对单个农牧产品而发布）</td></tr><tr><td style="text-align:center;">用户探查</td><td style="text-align:left;">用户查看生长日志的内容</td></tr><tr><td style="text-align:center;">专属铭牌</td><td style="text-align:left;">用户通过图文或视频介绍的方式认养具体的农牧产品后，农场工作人员会定期将带有用户信息的铭牌「贴」到农牧产品身上作为认养标记，且终身有效</td></tr><tr><td style="text-align:center;">荣誉证书</td><td style="text-align:left;">以增值服务的形式为用户邮寄认养荣誉证书，如认养时一并购买仅需支付证书工本费，证书会随同农牧产品一同寄送；如认养活动结束且在发货后再购买，则需要额外支付证书邮资</td></tr><tr><td style="text-align:center;">认养分享</td><td style="text-align:left;">可以选择分享活动和分享认养后的农牧产品。例如，对于认养果树来说，假设果实成熟后可发货给用户的有10件（例如按1斤/件来算），那么在发货之前，用户可选择分享给微信好友0～9件（系统给用户至少保留一件不予分享），可以是同一位好友或不同好友。好友注册并领取分享之后，填写正确的收货地址，那么在发货时会按该用户填写的地址发送分享时指定的份数</td></tr><tr><td style="text-align:center;">普通认养订单</td><td style="text-align:left;">认养活动结束后，仍然通过平台购买可认养农牧产品，此时的订单就是普通认养订单。这种订单没有署名、挂牌和证书，和普通的订单没有差别</td></tr><tr><td style="text-align:center;">领物订单</td><td style="text-align:left;">认养活动结束后，事前参与认养活动的用户得到的农牧产品订单，此时无需支付额外费用</td></tr><tr><td style="text-align:center;">分单</td><td style="text-align:left;">所谓<code>分单</code>，是指在生成领物订单之后，当用户需要将部分农牧产品分享给好友时，会以订单的形式创建需要寄送的部分产品，这相当于是为领物订单创建了子订单（但子订单的价格为零）</td></tr><tr><td style="text-align:center;">合单</td><td style="text-align:left;">如果某位用户认养了多个农牧产品，例如，既有果蔬，又有畜牧产品，那么在认养活动结束时，用户可以选择是否将这两份认养订单合并成一个，便于统一寄送</td></tr><tr><td style="text-align:center;">农场预处理</td><td style="text-align:left;">认养活动结束后，农场将用户认养的农牧产品进行处理后再通过物流发到用户手中。这里的处理指的是对蔬果类产品的采摘、净化、打包、装箱等活动，也包括对畜牧产品的有证屠宰、切割、分包等活动</td></tr><tr><td style="text-align:center;">......</td><td style="text-align:left;">......</td></tr></tbody></table><p>上面是业务层面的名词术语，接着技术层面的命名规则。</p><p>当然，这种统一命名规则的行为也不可能是一次就搞定的，在后续开发过程中，尤其是在识别<code>实体</code>和<code>值对象</code>、<code>聚合</code>与<code>聚合根</code>的时候，还会再回过头来修改它。</p><table><thead><tr><th style="text-align:center;">术语</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">Renyang</td><td style="text-align:left;">认养实体</td></tr><tr><td style="text-align:center;">SignName</td><td style="text-align:left;">认养署名</td></tr><tr><td style="text-align:center;">Nameplate</td><td style="text-align:left;">认养铭牌</td></tr><tr><td style="text-align:center;">Certificate</td><td style="text-align:left;">认养证书</td></tr><tr><td style="text-align:center;">RenyangMessage</td><td style="text-align:left;">发布认养事件时传递的消息</td></tr><tr><td style="text-align:center;">Order</td><td style="text-align:left;">订单</td></tr><tr><td style="text-align:center;">OrderItem</td><td style="text-align:left;">订单项，订单中的某一个商品或服务</td></tr><tr><td style="text-align:center;">RiskIntercept</td><td style="text-align:left;">风控拦截</td></tr><tr><td style="text-align:center;">RiskEvent</td><td style="text-align:left;">风险事件</td></tr><tr><td style="text-align:center;">RiskAudit</td><td style="text-align:left;">风控审核</td></tr><tr><td style="text-align:center;">Warehouse</td><td style="text-align:left;">仓库</td></tr><tr><td style="text-align:center;">LogisticsPlugin</td><td style="text-align:left;">物流插件</td></tr><tr><td style="text-align:center;">LogisticsCompany</td><td style="text-align:left;">物流公司</td></tr><tr><td style="text-align:center;">......</td><td style="text-align:left;">......</td></tr></tbody></table><br><h2 id="战略层面的技术决策" tabindex="-1"><a class="header-anchor" href="#战略层面的技术决策"><span>战略层面的技术决策</span></a></h2><p>其实到这里，整个<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的<code>战略分析</code>就全部完成了。</p><p>剩下的<code>技术栈</code>、<code>应用架构</code>、<code>数据架构</code>、<code>治理架构</code>和<code>微服务</code>的取舍只要团队意见一致就没问题了。</p><p>虽然说架构没有好坏，只有适用与否，但业界较为知名以及应用的比较多的，还是<a href="https://en.wikipedia.org/wiki/Command_Query_Responsibility_Segregation" target="_blank" rel="noopener noreferrer">CQRS架构</a>和阿里开源的<a href="https://github.com/alibaba/COLA" target="_blank" rel="noopener noreferrer">COLA架构</a>。</p><p>只不过对于初次使用<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>进行开发的个人或团队，在<code>应用架构</code>的取舍上可能还需要经历一个反复甑选的过程。</p>',48),i=[n];function r(a,l){return d(),t("div",null,i)}const s=e(c,[["render",r],["__file","strategy.html.vue"]]),h=JSON.parse('{"path":"/technology/engineering/domain/strategy.html","title":"战略设计","lang":"zh-CN","frontmatter":{"title":"战略设计","icon":"vihara","category":["开发过程","领域模型"],"tag":["开发过程","领域模型","战略设计"],"date":"2022-11-15T00:00:00.000Z","isOriginal":true,"star":true,"description":"在经过业务分析后，整个系统的轮廓就被大致勾勒出来了，但这明显是一个极为粗略的轮廓，或者称为骨架。 接下来，就可以按照这个轮廓或者骨架所展示的样子，来对它做更进一步的分析和设计，赋予灵魂，填充血肉，让它符合各方的期望。 和业务分析一样，战略设计的路线图大致是这样子的。 DDD的战略设计路线图DDD的战略设计路线图 根据业务分析输出的内容，从限界上下文识别...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/engineering/domain/strategy.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"战略设计"}],["meta",{"property":"og:description","content":"在经过业务分析后，整个系统的轮廓就被大致勾勒出来了，但这明显是一个极为粗略的轮廓，或者称为骨架。 接下来，就可以按照这个轮廓或者骨架所展示的样子，来对它做更进一步的分析和设计，赋予灵魂，填充血肉，让它符合各方的期望。 和业务分析一样，战略设计的路线图大致是这样子的。 DDD的战略设计路线图DDD的战略设计路线图 根据业务分析输出的内容，从限界上下文识别..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/engineering/domain/ddd-25.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"开发过程"}],["meta",{"property":"article:tag","content":"领域模型"}],["meta",{"property":"article:tag","content":"战略设计"}],["meta",{"property":"article:published_time","content":"2022-11-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"战略设计\\",\\"image\\":[\\"https://tianmazuo.com/technology/engineering/domain/ddd-25.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-26.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-27.png\\"],\\"datePublished\\":\\"2022-11-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"业务分析输出","slug":"业务分析输出","link":"#业务分析输出","children":[]},{"level":2,"title":"限界上下文识别","slug":"限界上下文识别","link":"#限界上下文识别","children":[]},{"level":2,"title":"上下文映射关系","slug":"上下文映射关系","link":"#上下文映射关系","children":[]},{"level":2,"title":"统一语言（部分）","slug":"统一语言-部分","link":"#统一语言-部分","children":[]},{"level":2,"title":"战略层面的技术决策","slug":"战略层面的技术决策","link":"#战略层面的技术决策","children":[]}],"git":{},"readingTime":{"minutes":11.53,"words":3459},"filePathRelative":"technology/engineering/domain/strategy.md","localizedDate":"2022年11月15日","excerpt":"<p>在经过<code>业务分析</code>后，整个系统的轮廓就被大致勾勒出来了，但这明显是一个极为粗略的轮廓，或者称为<code>骨架</code>。</p>\\n<p>接下来，就可以按照这个轮廓或者<code>骨架</code>所展示的样子，来对它做更进一步的分析和设计，赋予灵魂，填充<code>血肉</code>，让它符合各方的期望。</p>\\n<p>和<code>业务分析</code>一样，<code>战略设计</code>的路线图大致是这样子的。</p>\\n<figure><img src=\\"https://tianmazuo.com/technology/engineering/domain/ddd-25.png\\" alt=\\"DDD的战略设计路线图\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>DDD的战略设计路线图</figcaption></figure>","autoDesc":true}');export{s as comp,h as data};
