import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as r,d as a}from"./app-CiwSPZKD.js";const t={},p=a('<h2 id="项目背景" tabindex="-1"><a class="header-anchor" href="#项目背景"><span>项目背景</span></a></h2><p>这是很早之前开发过的一个数仓项目，现在将它还原出来，以作记录和分享。</p><p>当用户使用PC、APP或者小程序访问电商系统时，会通过<code>埋点</code>接口记录用户行为，这被称之为<code>客户端记录数据</code>。</p><p>同理，除了<code>埋点</code>记录的数据，业务系统也会有对应的操作行为，例如，用户下单或者取消支付，这被称之为<code>服务端记录数据</code>。</p><p>因此，针对同一个同户行为，可能会有两条数据来记录它，这两种类型的数据虽然都记录的是同一个用户行为，但应用场合是不同的。</p><ul><li><p><code>客户端记录数据</code>：可满足按分钟级甚至秒级来实时统计用户行为的需求，但统计数据本身可能会有遗失或不够准确，因为它不像业务系统会有各种一致性、完整性和安全性的保证，它适用于查看用户行为趋势，而不是准确的行为结果的汇总与聚合，例如，用户每日的消费总金额。</p></li><li><p><code>服务端记录数据</code>：和<code>客户端记录数据</code>应用场景刚好相反，它适用于查看用户行为结果的汇总与聚合，而非行为趋势。例如，用户每日消费的真实的总金额就只能通过业务系统的数据来汇总，而非<code>埋点</code>数据。</p></li></ul><p>为了消除这种<code>不一致</code>，统一<code>客户端记录数据</code>和<code>服务端记录数据</code>，就必须有一个地方能够对平台中所有的数据进行整合，为所有部门和人员提供一个统一的、规范的数据访问入口，让所有基于数据的计算都是基于相同的数据源进行的。</p><p>经过这种整合以后，计算出来的各种指标就不会再有不同的结果了。</p><p>而且，一个完善且合理的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93" target="_blank" rel="noopener noreferrer">数据仓库</a>也是整个大数据系统中重要的一环，更高层次的数据分析、数据挖掘等工作都会基于<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93" target="_blank" rel="noopener noreferrer">数据仓库</a>进行。</p><br><h2 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型"><span>技术选型</span></a></h2><p>基本上，任何<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93" target="_blank" rel="noopener noreferrer">数据仓库</a>都需要具备下面这些功能组件。</p><ul><li><p><code>数据采集组件</code>：采集各种数据源中的数据，例如，<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>数据、文档数据、日志数据等。通常会用到 <a href="https://flume.apache.org/" target="_blank" rel="noopener noreferrer">Flume</a>、<a href="https://sqoop.apache.org/" target="_blank" rel="noopener noreferrer">Sqoop</a>、<a href="https://www.elastic.co/logstash" target="_blank" rel="noopener noreferrer">Logstash</a>或<a href="https://www.elastic.co/beats/filebeat" target="_blank" rel="noopener noreferrer">Filebeat</a>等中间件，而数据采集方式也有两种。</p><ul><li><p><code>数据本地采集</code>：直接在产生数据的业务服务中采集。例如，直接在订单服务器中部署<a href="https://flume.apache.org/" target="_blank" rel="noopener noreferrer">Flume</a>，采集它产生的日志数据，然后传输到远程数据采集组件里。相对于数据采集组件来说，这是一种<code>推</code>的方式。</p></li><li><p><code>独立服务采集</code>：部署一台独立的数据采集服务器，专门从多个不同的业务服务中采集数据。相对于数据采集组件来说，这是一种<code>拉</code>的方式。</p></li></ul><figure><img src="https://tianmazuo.com/application/case/warehouse/warehouse-01.png" alt="数据采集方式的技术选型" tabindex="0" loading="lazy"><figcaption>数据采集方式的技术选型</figcaption></figure></li><li><p><code>数据仓库组件</code>：存储和管理采集到的数据。常规组合就是<a href="https://hadoop.apache.org" target="_blank" rel="noopener noreferrer">Hadoop</a> + <a href="https://hive.apache.org/" target="_blank" rel="noopener noreferrer">Hive</a> + <a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>。</p></li><li><p><code>数据计算组件</code>：对原始数据进行清洗和计算。常规组合就是<a href="https://hive.apache.org/" target="_blank" rel="noopener noreferrer">Hive</a> + <a href="https://spark.apache.org/" target="_blank" rel="noopener noreferrer">Spark</a>（或者<a href="https://flink.apache.org/" target="_blank" rel="noopener noreferrer">Flink</a>、<a href="https://www.clickhouse.com/" target="_blank" rel="noopener noreferrer">Clickhouse</a>）。</p></li><li><p><code>数据可视化组件</code>：以直观的图表方式展现数据。可以选择<a href="https://gethue.com/" target="_blank" rel="noopener noreferrer">HUE</a>、<a href="https://zeppelin.apache.org/" target="_blank" rel="noopener noreferrer">Zeppelin</a>或者<a href="https://echarts.apache.org/" target="_blank" rel="noopener noreferrer">ECharts</a>等。</p></li></ul><br><h2 id="整体架构" tabindex="-1"><a class="header-anchor" href="#整体架构"><span>整体架构</span></a></h2><p>典型的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93" target="_blank" rel="noopener noreferrer">数据仓库</a>会划分为如下的几个层级。</p><figure><img src="https://tianmazuo.com/application/case/warehouse/warehouse-02.png" alt="典型的数据仓库分层结构" tabindex="0" loading="lazy"><figcaption>典型的数据仓库分层结构</figcaption></figure><p>这样划分的好处在于。</p><ul><li><p>显然，这样划分出来的整体数据结构非常清晰。</p></li><li><p>当出现问题时可以快速定位，例如，有利于数据血缘关系的追踪。</p></li><li><p>不同层次之间职责清晰，可以减少重复开发。</p></li><li><p>因为每一层关注的问题比较聚焦，就可以把复杂的问题简单化。</p></li><li><p>屏蔽不同层级业务之间的影响。</p></li></ul><p>而在<code>用户行为数仓</code>这个案例中，<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93" target="_blank" rel="noopener noreferrer">数据仓库</a>的整体架构设计如下。</p><figure><img src="https://tianmazuo.com/application/case/warehouse/warehouse-03.png" alt="用户行为数仓整体架构设计" tabindex="0" loading="lazy"><figcaption>用户行为数仓整体架构设计</figcaption></figure><ul><li><p>因为要统一<code>客户端</code>和<code>服务端</code>的记录数据，所以需要同时对它们进行采集，统一采集到<a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html" target="_blank" rel="noopener noreferrer">HDFS</a>中。</p></li><li><p><code>服务端数据</code>就是商品详情、订单信息之类的数据，这些数据一般都存储在<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>之类的关系型数据库中，这类数据主要通过<a href="https://sqoop.apache.org/" target="_blank" rel="noopener noreferrer">Sqoop</a>进行采集。</p></li><li><p><code>客户端数据</code>就是用户在网站、APP或小程序等客户端上的滑动、点击、浏览、停留时间之类的用户行为数据，这些数据通常会以埋点的形式直接上报。这种类型的数据没有事务性要求，并且对数据的完整性要求也不高，就算丢失一些数据，对整体结果影响也不大。这类数据主要通过<code>HTTP</code>接口进行传输。</p></li><li><p>采集到<a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html" target="_blank" rel="noopener noreferrer">HDFS</a>中的数据在经过<code>ETL</code>清洗后，会将它们输送到<a href="https://hive.apache.org/" target="_blank" rel="noopener noreferrer">Hive</a>里面去。</p></li><li><p>如果需要报表展示，那么可以再将它们从<a href="https://hive.apache.org/" target="_blank" rel="noopener noreferrer">Hive</a>导出到<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>，然后利用<code>数据可视化组件</code>来呈现。</p></li></ul><br><h2 id="资源规划" tabindex="-1"><a class="header-anchor" href="#资源规划"><span>资源规划</span></a></h2><figure><img src="https://tianmazuo.com/application/case/warehouse/warehouse-04.png" alt="服务器资源规划（测试环境）" tabindex="0" loading="lazy"><figcaption>服务器资源规划（测试环境）</figcaption></figure><figure><img src="https://tianmazuo.com/application/case/warehouse/warehouse-05.png" alt="服务器资源规划（生产环境）" tabindex="0" loading="lazy"><figcaption>服务器资源规划（生产环境）</figcaption></figure><p>对生产环境资源规划的一点说明。</p><ul><li><p>如果<code>NameNode</code>开启了HA，就可以不需要<code>SecondaryNameNode</code>进程了。</p></li><li><p><code>NameNode</code>需要使用单独的机器，并且内存配置最好大一点，建议<code>128G</code>。</p></li><li><p><code>DataNode</code>和<code>NodeManager</code>需要部署在相同的集群上，这样可以实现数据本地化计算。</p></li><li><p>日志接口服务器需要使用至少两台，便于实现负载均衡及故障转移，保证数据接收服务的稳定性。</p></li><li><p><a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>需要单独部署，至少两台，一主一从。</p></li><li><p><a href="https://hive.apache.org/" target="_blank" rel="noopener noreferrer">Hive</a>和<a href="https://sqoop.apache.org/" target="_blank" rel="noopener noreferrer">Sqoop</a>需要部署在所有和业务相关的机器上。</p></li><li><p><a href="https://zeppelin.apache.org/" target="_blank" rel="noopener noreferrer">Zeppelin</a>可以单独部署在一台普通配置的机器上。</p></li><li><p><a href="https://azkaban.github.io/" target="_blank" rel="noopener noreferrer">Azkaban</a>至少部署三台，一主两从。</p></li></ul><p>另外补充几点。</p><ul><li><p>生产环境的<a href="https://hadoop.apache.org" target="_blank" rel="noopener noreferrer">Hadoop</a>集群必须使用<a href="https://www.cloudera.com/" target="_blank" rel="noopener noreferrer">CDH</a>或者<a href="https://hortonworks.com/" target="_blank" rel="noopener noreferrer">HDP</a>。</p></li><li><p><a href="https://hadoop.apache.org" target="_blank" rel="noopener noreferrer">Hadoop</a>集群规模需要根据数据量来预估。</p><ul><li><p>假如集群机器通用配置为<code>64C-128G-8T</code>。</p></li><li><p>假如1天产生<code>1TB</code>数据，那么宽泛一点估算1年就是<code>370TB</code>。</p></li><li><p>集群默认3副本，那么数据量为<code>370TB</code> × <code>3</code> = <code>1110TB</code>。</p></li><li><p>预留<code>30%</code>的空间，那么最终需要<code>1110TB</code> / <code>70%</code> ≈ <code>1586TB</code>。</p></li><li><p>最终需要<code>1586TB</code> / <code>8TB</code> ≈ <code>199</code>台服务器。</p></li></ul></li><li><p>如果不用<a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a>来部署和编排，这么多服务器的管理工作会搞死人的。</p></li><li><p>但服务器的数量并不是一开始就要这么多，而是随着业务的开展动态扩容的。</p></li></ul>',30),n=[p];function l(c,i){return r(),o("div",null,n)}const s=e(t,[["render",l],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/application/case/warehouse/","title":"数仓项目背景","lang":"zh-CN","frontmatter":{"title":"数仓项目背景","icon":"thumbtack","category":["案例","数据仓库"],"tag":["案例","数据仓库"],"date":"2024-05-14T00:00:00.000Z","isOriginal":true,"star":true,"description":"项目背景 这是很早之前开发过的一个数仓项目，现在将它还原出来，以作记录和分享。 当用户使用PC、APP或者小程序访问电商系统时，会通过埋点接口记录用户行为，这被称之为客户端记录数据。 同理，除了埋点记录的数据，业务系统也会有对应的操作行为，例如，用户下单或者取消支付，这被称之为服务端记录数据。 因此，针对同一个同户行为，可能会有两条数据来记录它，这两种...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/application/case/warehouse/"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"数仓项目背景"}],["meta",{"property":"og:description","content":"项目背景 这是很早之前开发过的一个数仓项目，现在将它还原出来，以作记录和分享。 当用户使用PC、APP或者小程序访问电商系统时，会通过埋点接口记录用户行为，这被称之为客户端记录数据。 同理，除了埋点记录的数据，业务系统也会有对应的操作行为，例如，用户下单或者取消支付，这被称之为服务端记录数据。 因此，针对同一个同户行为，可能会有两条数据来记录它，这两种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/application/case/warehouse/warehouse-01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"案例"}],["meta",{"property":"article:tag","content":"数据仓库"}],["meta",{"property":"article:published_time","content":"2024-05-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数仓项目背景\\",\\"image\\":[\\"https://tianmazuo.com/application/case/warehouse/warehouse-01.png\\",\\"https://tianmazuo.com/application/case/warehouse/warehouse-02.png\\",\\"https://tianmazuo.com/application/case/warehouse/warehouse-03.png\\",\\"https://tianmazuo.com/application/case/warehouse/warehouse-04.png\\",\\"https://tianmazuo.com/application/case/warehouse/warehouse-05.png\\"],\\"datePublished\\":\\"2024-05-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"项目背景","slug":"项目背景","link":"#项目背景","children":[]},{"level":2,"title":"技术选型","slug":"技术选型","link":"#技术选型","children":[]},{"level":2,"title":"整体架构","slug":"整体架构","link":"#整体架构","children":[]},{"level":2,"title":"资源规划","slug":"资源规划","link":"#资源规划","children":[]}],"git":{},"readingTime":{"minutes":6.21,"words":1864},"filePathRelative":"application/case/warehouse/README.md","localizedDate":"2024年5月14日","excerpt":"<h2>项目背景</h2>\\n<p>这是很早之前开发过的一个数仓项目，现在将它还原出来，以作记录和分享。</p>\\n<p>当用户使用PC、APP或者小程序访问电商系统时，会通过<code>埋点</code>接口记录用户行为，这被称之为<code>客户端记录数据</code>。</p>\\n<p>同理，除了<code>埋点</code>记录的数据，业务系统也会有对应的操作行为，例如，用户下单或者取消支付，这被称之为<code>服务端记录数据</code>。</p>\\n<p>因此，针对同一个同户行为，可能会有两条数据来记录它，这两种类型的数据虽然都记录的是同一个用户行为，但应用场合是不同的。</p>\\n<ul>\\n<li>\\n<p><code>客户端记录数据</code>：可满足按分钟级甚至秒级来实时统计用户行为的需求，但统计数据本身可能会有遗失或不够准确，因为它不像业务系统会有各种一致性、完整性和安全性的保证，它适用于查看用户行为趋势，而不是准确的行为结果的汇总与聚合，例如，用户每日的消费总金额。</p>\\n</li>\\n<li>\\n<p><code>服务端记录数据</code>：和<code>客户端记录数据</code>应用场景刚好相反，它适用于查看用户行为结果的汇总与聚合，而非行为趋势。例如，用户每日消费的真实的总金额就只能通过业务系统的数据来汇总，而非<code>埋点</code>数据。</p>\\n</li>\\n</ul>","autoDesc":true}');export{s as comp,g as data};
