import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as e,a as s,b as l,w as t,d as p,o as r,e as h}from"./app-CiwSPZKD.js";const k={},d=p(`<h2 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>Nginx</span></a></h2><h3 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理"><span>反向代理</span></a></h3><p><a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>作为一个高性能且高可用的HTTP服务器，反向代理、负载均衡和流量管控是它最拿手的三样本领。</p><p>作为反向代理的搜素引擎，可以让用户不必记住并在浏览器的地址栏上输入每种提供服务的网站网址，而只需要在搜索出来的结果上轻点鼠标，即可访问网站服务，这正是典型的反向代理服务。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-01.png" alt="正向代理与反向代理" tabindex="0" loading="lazy"><figcaption>正向代理与反向代理</figcaption></figure><p>以<a href="https://www.oracle.com/java/technologies/downloads/archive/" target="_blank" rel="noopener noreferrer">Java</a>应用为例，一般都是以<code>8080</code>端口为入口，但如果想改为<code>80</code>端口，就可以用<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>来<code>代理</code>。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:9529</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Host</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$server_port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再编写一个简单的<code>Web</code>应用，用于验证配置<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>之后的反向代理服务。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NginxReverseProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello Nginx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不管是访问<a href="http://localhost:9529/" target="_blank" rel="noopener noreferrer">http://localhost:9529/</a>，还是访问<a href="http://localhost/" target="_blank" rel="noopener noreferrer">http://localhost/</a>，都能成功。</p><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><p>除了最基本的反向代理，<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>还可以提供负载均衡服务，它可以将海量请求分摊到多个服务器上分别执行，从而减轻单台服务器的访问压力，这一能力也使得<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>成为互联网应用的标准配置。</p><p>而负载均衡一般都需要同时配置反向代理，通过反向代理来跳转到指定的服务器上。</p><p><a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>目前支持自带三种负载均衡策略。</p><ul><li><p><code>轮询访问策略</code>：这是<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>默认的负载均衡策略。在这种策略下，每个请求按顺序轮流地分配到不同的后端服务器，如果某些后端服务器宕机或离线，<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>也能自动剔除它。</p></li><li><p><code>权重分配策略</code>：在这种负载均衡策略下，每个请求按指定轮询几率访问后端服务，权重<code>Weight</code>和访问比率成正比，这种策略常用于后端服务器性能不均的情况，如有些服务器配置高，那么访问权重就可以相应高一些。而配置较低的服务器则访问权重也就相应低一点。它同样也能自动剔除宕机或离线的后端服务器。</p></li><li><p><code>iphash约束策略</code>：轮询和权重的方式只能满足无状态的或者幂等的业务应用，但有时业务需要满足某些客户从头到尾只能访问某个指定服务器的条件约束。因此，这种情况就需要采用iphash方式来分配后端服务器了。</p></li></ul><p>可以准备2 ~ 3台虚拟机，在每台虚拟机中安装好<code>JDK</code>环境，再编写一个最简单的<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">SpringBoot</a>应用，该应用只需让访问者知道<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>将路由分配到了哪一台服务上即可。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * 一个Springboot应用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NginxLoadBalance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello, &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> username </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; from server01&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * 另一个Springboot应用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NginxLoadBalance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello, &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> username </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; from server02&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两段代码分别在两个<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">SpringBoot</a>项目中，它们唯一的区别就是server编号不同。</p><p>将它们打包成jar文件后，分别部署到其中的两台虚拟机上。再利用其中一台服务器安装<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>，作为负载均衡服务。</p><p>实现<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>默认的轮询策略，只需要稍稍修改<code>nginx.conf</code>配置文件即可。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">upstream</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ip]:8080</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ip]:9090</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_set_header</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Host</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$server_port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>，然后重复访问服务地址<code>/test?username=test</code>。</p><ul><li><p>第n次访问会返回server01。</p></li><li><p>第n+1次访问会返回server02。</p></li></ul><p>这说明轮询访问策略已经生效。</p><p>权重分配策略只需要在配置中加入权重关键字<code>weight</code>即可。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">upstream</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ip]:8080 </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">weight</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">7</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ip]:9090 </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">weight</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>后，在10次访问中，第一个服务会被访问7次，而第二个服务则会被访问3次。</p><p>配置<code>iphash</code>策略则更为简单，只需在<code>upstream</code>中增加一个<code>ip_hash</code>关键字即可。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">upstream</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ip_hash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ip]:8080</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ip]:9090</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了Nginx自带的三种负载均衡策略外，还有另外两种常用的第三方策略，分别是<code>fair</code>策略和<code>一致性hash</code>策略，它们可以在<a href="https://github.com/" target="_blank" rel="noopener noreferrer">Github</a>上下载并安装。</p><ul><li><p><code>fair</code>策略是按后端服务器的响应时间来分配请求的，响应时间短的优先分配，有利于服务端的资源利用。</p></li><li><p><code>一致性hash</code>策略可以根据参数的不同将请求均匀映射到后端服务器。</p></li></ul><p>它们的配置也和<code>iphash</code>策略类似，此处就不再赘述。</p><h3 id="流量管控" tabindex="-1"><a class="header-anchor" href="#流量管控"><span>流量管控</span></a></h3><p>在互联网应用中，很多场景中都会涉及到海量的高并发请求，例如秒杀。如果不对这些请求做限制，那么服务器将很快会被冲垮。就像在<a href="https://www.12306.cn/" target="_blank" rel="noopener noreferrer">12306</a>买票一样，如果全国人民都一窝蜂去抢票，那服务器是无论如何也扛不住这种瞬时压力的。</p><p>用于限制流量的算法通常有两类：<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">令牌桶</a>和<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">漏桶</a>。</p><p>所谓<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">令牌桶</a>，其算法思想如下。</p><ul><li><p>令牌以固定速率产生，并缓存到令牌桶。</p></li><li><p>令牌桶放满时，多余的令牌将被直接丢弃。</p></li><li><p>请求进来时，先进入待处理的请求队列。</p></li><li><p>处理请求时需要从桶里拿到相应数量的令牌作为处理“凭证”。</p></li><li><p>当桶里没有令牌时，请求处理被拒绝。</p></li></ul><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-02.png" alt="令牌桶的算法思想" tabindex="0" loading="lazy"><figcaption>令牌桶的算法思想</figcaption></figure><p><a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">令牌桶</a>是一种常用于网络流量整形和速率限制的算法，只有持有令牌的请求才会被处理，这也是<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">令牌桶</a>名称的由来。由于它允许突发流量的存在，所以更适合流量突发的应用场景，例如，秒杀。</p><p>相比于<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">令牌桶</a>，<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">漏桶</a>限流的核心算法思想是<code>缓存请求、匀速处理、多余丢弃</code>。正如其名，<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">漏桶</a>不管外部水量是否突然增加或减少，其底部始终保持着匀速的出水量，这正是<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">漏桶</a>算法名称的由来。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-03.png" alt="漏桶的算法思想" tabindex="0" loading="lazy"><figcaption>漏桶的算法思想</figcaption></figure><p>可以看到，水（也就是请求）从上方进入<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">漏桶</a>，从下方流出（被处理）。来不及流出的流量会被缓存在桶中，以固定速率流出，桶满后多余的水（流量）则会溢出（被丢弃）。因此，<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">漏桶</a>算法可以屏蔽流量的陡然变化，所以它更适合需要平滑流量的场景。</p><p><a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>限流模块使用的正是<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">漏桶</a>算法，它有两种实现限流的方式。</p><ul><li><p>限制访问频率，就是限制指定时间内每个用户的访问次数。</p></li><li><p>限制并发连接数，就是限制某段时间内访问资源的用户数。</p></li></ul><p>为了测试<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>的限流效果，可以安装<a href="https://httpd.apache.org/" target="_blank" rel="noopener noreferrer">apache</a>的<code>ab</code>压测工具，执行以下命令即可。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; yum -y install httpd-tools</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cd /usr/bin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ab -V</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ab</code>的使用也非常简单。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ./ab -n1000 -c100 -t1 -s5 http://localhost/test?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">username</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令表示：执行1000次，每次有100个并发请求到指定服务，并在1秒之内完成请求，超时时间5秒。</p><p>测试后的结果如下图所示。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-04.png" alt="ab命令测试结果" tabindex="0" loading="lazy"><figcaption>ab命令测试结果</figcaption></figure><p>压测工具准备好之后，再来修改<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>配置。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">limit_req_zone</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $binary_remote_addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zone=case1:10m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rate=10r/s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        limit_req_zone</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">case1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行下面的两条命令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ./ab -n1000 -c10 -t1 -s5 http://localhost/test?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">username</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ./ab -n1000 -c10 -t2 -s5 http://localhost/test?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">username</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>压测输出的结果显示<code>Complete requests：30397；Failed requests：30387</code>。</p><p>从结果来看，请求了30397次，但失败了30387次，仅10次并发请求成功，这完全符合<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>设置的限流要求。</p><p>既然<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>可以限制流量，那是不是也可以拓展流量呢？</p><p>答案是完全可以，这就是其流量拷贝功能。其实对于流量拷贝的需求场景还是比较多的，例如，为了确保开发出来的应用能够立即应用到生产环境，就需要将生产环境的数据和流量拷贝到开发环境，这样做的好处显而易见。</p><ul><li><p>可以验证功能是否正常，以及服务的性能。</p></li><li><p>用真实有效的流量请求去验证，又不用造数据，不影响线上正常访问。</p></li><li><p>可以用来排查线上问题，同时，这也是一种测试方式。</p></li></ul><p>这可以理解为给流量<code>拉分支</code>。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-05.png" alt="流量拷贝" tabindex="0" loading="lazy"><figcaption>流量拷贝</figcaption></figure><p>修改<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>配置。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    access_log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/work/logs/nginx/8080.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9090</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    access_log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/work/logs/nginx/9090.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  localhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        mirror</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mirror1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        mirror</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mirror2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mirror1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://127.0.0.1:8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mirror2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        proxy_pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://127.0.0.1:9090</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>服务后，可以在远程终端中执行<code>tail</code>命令，查看端口的日志输出。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; tail -f /home/work/logs/nginx/8080.log</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; tail -f /home/work/logs/nginx/9090.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中访问<a href="http://xn--nginx-p86hj6yxdq69m/test?username=test" target="_blank" rel="noopener noreferrer">http://nginx服务地址/test?username=test</a>，并观察服务器端口日志输出的变化。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-06.png" alt="观察服务的日志输出" tabindex="0" loading="lazy"><figcaption>观察服务的日志输出</figcaption></figure><p>可以看到，<code>mirror1</code>和<code>mirror2</code>拷贝了<code>/test</code>的访问流量。</p><br><h2 id="openresty的协程" tabindex="-1"><a class="header-anchor" href="#openresty的协程"><span>OpenResty的协程</span></a></h2><p>进程一般是应用程序的启动实例，进程拥有代码、打开的文件、需处理的数据、独立的内存空间等资源，例如，独立部署的<code>jar</code>包、运行的<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>、<a href="https://www.mongodb.com/" target="_blank" rel="noopener noreferrer">MongoDB</a>程序等，它们都是独立运行的进程，它相当于一个大管家。</p><p>而线程从属于进程，是应用程序的实际执行者，它相当于是做具体工作的家丁或者仆役。一个进程至少包含一个主线程，或者包含多个子线程，线程拥有自己的栈空间。</p><p>协程是一种比线程更加轻量级的存在，是<code>线程中的线程</code>，协程也拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协程共享全局变量和其它内容。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-07.png" alt="协程" tabindex="0" loading="lazy"><figcaption>协程</figcaption></figure><p>和线程由CPU调度不同，协程不被操作系统管理，而是完全由线程内部控制，由程序显式的进行，需要多个程序彼此协作才能实现功能，这就是协程名字的由来。协程是通过特殊的函数来实现的——这个特殊的函数可以在某个地方<code>挂起</code>，之后可以重新在其他地方继续运行。</p><p>一个线程之内可有多个这样特殊的函数，也就是可以有多个协程同时运行，但多个协程的运行只能是<code>串行</code>的——一个协程运行时，其他协程必须要挂起。</p><p>协程是<a href="https://www.lua.org/" target="_blank" rel="noopener noreferrer">Lua</a>中引入的概念，由于<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>是对<a href="https://www.lua.org/" target="_blank" rel="noopener noreferrer">Lua</a>的封装，因此也自然就具备了协程特性。</p><h3 id="coroutine库" tabindex="-1"><a class="header-anchor" href="#coroutine库"><span>Coroutine库</span></a></h3><p><code>resume()</code>和<code>yeild()</code>这两个方法是<a href="https://www.lua.org/" target="_blank" rel="noopener noreferrer">Lua</a>协程的核心，它们都是由<code>coroutine</code>提供的方法。</p><ul><li><p><code>coroutine.create(function)</code>：表示传入一个函数作为参数来创建协程，返回<code>coroutine</code>，当遇到<code>resume()</code>时就唤醒函数调用。</p></li><li><p><code>coroutine.resume(coroutine [v1, v2, ...])</code>：它是协程的核心函数，用来启动或再次启动一个协程，使其由挂起状态变成运行状态，该函数相当于在执行协程中的方法，<code>v1, v2, ...</code>是执行协程时传递给它的参数。</p><ul><li><p>首次执行协程<code>coroutine</code>时，参数<code>v1...</code>会传递给协程的函数。</p></li><li><p>再次执行协程<code>coroutine</code>时，参数<code>v1...</code>会作为协程<code>yeild()</code>的返回值。</p></li><li><p><code>resume()</code>返回值有三种情况。</p><ul><li><p>如果协程的函数执行完毕，协程正常终止，就返回<code>true</code>和函数的返回值。</p></li><li><p>如果协程的函数在执行时，协程调用了<code>yeild()</code>方法，那么<code>resume()</code>返回<code>true</code>和传入函数的第一个参数。</p></li><li><p>如果协程在执行过程中发生错误，那么<code>resume()</code>返回<code>false</code>与错误消息。</p></li></ul></li></ul></li><li><p><code>coroutine.yield()</code>：使正在执行的函数挂起，传递给<code>yeild()</code>的参数会作为<code>resume()</code>的额外返回值。</p></li></ul><p>也就是说，首次调用时，<code>resume()</code>的参数会直接传递给协程函数；非首次调用时，<code>resume()</code>的另一个参数会成为<code>yield()</code>的返回值，而<code>yield()</code>的参数也会成为<code>resume()</code>额外的返回值。</p><p>这么说有点绕，画张图就明白了。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-08.png" alt="首次调用和非首次调用时resume()和yield()的参数关系" tabindex="0" loading="lazy"><figcaption>首次调用和非首次调用时resume()和yield()的参数关系</figcaption></figure><p>为了验证<code>coroutine.create()</code>和<code>coroutine.resume()</code>方法，在<code>/usr/local/openresty/nginx/conf</code>文件夹中创建一个名为<code>xiecheng.conf</code>的文件，并在其中加入如下代码。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi xiecheng.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /xiecheng</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        content_by_lua</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            co = coroutine.create(function (a, b)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            ngx.print(&quot;resume args : &quot;..a..&quot;, &quot;..b..&quot; - &quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            yreturn = coroutine.yield()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            ngx.print (&quot;yreturn : &quot;..yreturn..&quot; - &quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        end)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ngx.print(coroutine.resume(co, 1, 2), &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ngx.print(coroutine.resume(co, 3, 4), &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ngx.print(coroutine.resume(co, 5, 6))</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>，找到<code>include lua.conf</code>这一行，并将其内容改为<code>include xiecheng.conf</code>。</p><p>重启<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>，在浏览器中访问<a href="http://xn--IP-im8ckcv93fffgt74d/xiecheng" target="_blank" rel="noopener noreferrer">http://虚拟机IP地址/xiecheng</a>，可以看到三次调用<code>coroutine.resume()</code>方法的结果都不同，而这正是<code>resume()</code>返回值的三种情况。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-09.png" alt="coroutine.resume()方法返回值的三种情况" tabindex="0" loading="lazy"><figcaption>coroutine.resume()方法返回值的三种情况</figcaption></figure><p>另一个比较重要的方法是<code>coroutine.wrap(function)</code>，它返回的是一个函数，每次调用这个函数就相当于在调用<code>coroutine.resume()</code>。</p><p>调用这个函数时传入的参数，就相当于在调用<code>resume()</code>时传入除协程句柄外的其他参数。但跟<code>resume()</code>不同的是，它并不是在保护模式下执行的，若执行崩溃会直接向外抛出异常。</p><p>修改<code>xiecheng.conf</code>文件，在其中加入如下代码。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi xiecheng.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /xiecheng2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    content_by_lua</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        co = coroutine.wrap(function (a, b)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            ngx.print(&quot;resume args : &quot;..a..&quot;, &quot;..b..&quot; - &quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            yreturn = coroutine.yield()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            ngx.print (&quot;yreturn : &quot;..yreturn..&quot; - &quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        end)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ngx.print(&quot;co type is : &quot;..ngx.print(type(co)), &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ngx.print(ngx.print(co(1, 2)), &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        ngx.print(ngx.print(co(3, 4)))</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>，在浏览器中访问<a href="http://xn--IP-im8ckcv93fffgt74d/xiecheng2" target="_blank" rel="noopener noreferrer">http://虚拟机IP地址/xiecheng2</a>，可以看到结果如下，这说明<code>warp()</code>方法和调用<code>coroutine.resume(co, a, b)</code>的结果是等效的。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-10.png" alt="warp()方法执行后的结果" tabindex="0" loading="lazy"><figcaption>warp()方法执行后的结果</figcaption></figure><p><code>coroutine</code>库中其他与协程相关的方法还包括下面这些。</p><ul><li><p><code>isyieldable()</code>：表示如果正在运行的协程可以挂起，则返回<code>true</code>（只有主协程（线程）和C函数是无法让出的）。</p></li><li><p><code>running()</code>：用来判断当前执行的协程是不是主线程，如果是就返回<code>true</code>。</p></li><li><p><code>status(function)</code>：返回表示协程状态的字符串。</p><ul><li><p><code>running</code>：正在执行中的协程。</p></li><li><p><code>suspended</code>：还未结束却被挂起（调用了<code>yeild</code>或还没开始运行）的协程。</p></li><li><p><code>normal</code>：协程A<code>resume()</code>协程B时，协程A所处的状态就是<code>normal</code>。</p></li><li><p><code>dead</code>：发生错误或正常终止的协程，如果这时候对它调用<code>resume</code>，将返回<code>false</code>和错误消息，就像刚才展示的那样。</p></li></ul></li></ul><p>验证这些方法的代码笔者已经写在了<code>xiecheng.conf</code>文件的<code>xiecheng3</code>方法中。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi xiecheng.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /xiecheng3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	content_by_lua</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		function status(a)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(a..&quot; - r1 status : &quot;..coroutine.status(r1)..&quot;, r2 status : &quot;..coroutine.status(r2), &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		r1 = coroutine.create(function(a)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;r1 arg is : &quot;..a, &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			status(2)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			local rey = coroutine.yield(&quot;r1&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;yeild r1 return is &quot; .. rey, &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			status(4)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;point 1&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			coroutine.yield(&quot;b&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;point 2&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		end)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		r2 = coroutine.create(function(a, b)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;r2 arg is : &quot;..a..&quot;, &quot;..b, &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			status(1)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			local stat, res1 = coroutine.resume(r1, 1)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;resume r1 return is : &quot;..res1, &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			status(3)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			local stat2, res2 = coroutine.resume(r1, 2)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;resume r1 again return is : &quot;..res2, &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			status(31)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			local stat3, res3 = coroutine.resume(r1, 3)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			ngx.print(&quot;resume r1 again2 return is : &quot;..res3, &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			local arg = coroutine.yield(&quot;r2&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		end)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		stat, mainre = coroutine.resume(r2, 1, 2)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		status(5)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">		ngx.print(&quot;last return is &quot;..mainre, &quot;&lt;br/&gt;&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-11.png" alt="协程调用时序图" tabindex="0" loading="lazy"><figcaption>协程调用时序图</figcaption></figure><p>从上图及代码，可以稍微总结一下关于<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>协程的知识点了。</p><ul><li><p>所有的协程都是通过<code>resume()</code>和<code>yield()</code>这两个方法来完成协作的，这是协程的核心所在，可以说没有它们，就没有协程。</p></li><li><p><code>resume()</code>和<code>yield()</code>都是由开发者控制的，除此之外，不会有任何其他外部干预，但线程就不一样。</p></li><li><p>函数从哪里挂起，恢复时就从哪里开始执行。关于这一点，可以尝试在<code>r1</code>中的<code>coroutine.yield(&quot;b&quot;)</code>前后各加上一行<code>ngx.print()</code>语句来验证。</p></li></ul><h3 id="并行调度" tabindex="-1"><a class="header-anchor" href="#并行调度"><span>并行调度</span></a></h3><p>无论有多少个方法，如果不加干预，在<a href="https://www.lua.org/" target="_blank" rel="noopener noreferrer">Lua</a>中都会始终以<code>串行</code>的方式来执行。</p><p>为了验证这一特性，修改<code>/usr/local/openresty/nginx/conf/lua.conf</code>文件，在其中增加如下代码。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi lua.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /test1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	 default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	 echo_sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">	 echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $arg_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /test2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	 default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	 echo_sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">	 echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $arg_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将之前修改过的<code>/usr/local/openresty/nginx/conf/nginx.conf</code>再改回<code>include lua.conf</code>。</p><p>在浏览器中访问<a href="http://xn--IP-im8ckcv93fffgt74d/test1?test=1" target="_blank" rel="noopener noreferrer">http://虚拟机IP地址/test1?test=1</a>或者<a href="http://xn--IP-im8ckcv93fffgt74d/test2?test=1" target="_blank" rel="noopener noreferrer">http://虚拟机IP地址/test2?test=1</a>，可以看到，test1或test2都是在经过2秒之后浏览器才给出响应。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-12.png" alt="协程调用结果" tabindex="0" loading="lazy"><figcaption>协程调用结果</figcaption></figure><p>在<code>lua.conf</code>中再增加一个接口，让它顺序地访问<code>/test1</code>和<code>/test2</code>这两个接口。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi lua.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /allexecute</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   content_by_lua</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     local t1 = ngx.now()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     local r1 = ngx.location.capture(&quot;/test1&quot;, {args = ngx.req.get_uri_args()})</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     local r2 = ngx.location.capture(&quot;/test2&quot;, {args = ngx.req.get_uri_args()})</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     local t2 = ngx.now()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     ngx.print(r1.body, &quot;&lt;br/&gt;&quot;, r2.body, &quot;&lt;br/&gt;&quot;, tostring(t2 - t1))</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>，在浏览器中访问<a href="http://xn--IP-im8ckcv93fffgt74d/allexecute?test=1%E2%80%9D" target="_blank" rel="noopener noreferrer">http://虚拟机IP地址/allexecute?test=1”</a>，可以看到如下结果，这说明<code>/test1</code>和<code>/test2</code>确实是串行执行的。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-13.png" alt="allexecute接口执行后的结果" tabindex="0" loading="lazy"><figcaption>allexecute接口执行后的结果</figcaption></figure><p>但这种串行方式，可以通过<code>capture_multi</code>改变，实现并行执行。</p><p>在<code>lua.conf</code>中再增加一个接口，让它通过<code>capture_multi</code>并行地执行<code>/test1</code>和<code>/test2</code>接口。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi lua.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /concurrency</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  content_by_lua</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     local t1 = ngx.now()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     local r1, r2 = ngx.location.capture_multi({</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          {&quot;/test1&quot;, {args = ngx.req.get_uri_args()}},</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          {&quot;/test2&quot;, {args = ngx.req.get_uri_args()}}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        })</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     local t2 = ngx.now()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     ngx.print(r1.body, &quot;&lt;br/&gt;&quot;, r2.body, &quot;&lt;br/&gt;&quot;, tostring(t2 - t1))&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>，在浏览器中访问<a href="http://xn--IP-im8ckcv93fffgt74d/concurrency?test=1%E2%80%9D" target="_blank" rel="noopener noreferrer">http://虚拟机IP地址/concurrency?test=1”</a>，可以看到如下结果，这次<code>/test1</code>和<code>/test2</code>已经并行执行了。</p><figure><img src="https://tianmazuo.com/book/prune/mybook-c13-14.png" alt="concurrency接口执行后的结果" tabindex="0" loading="lazy"><figcaption>concurrency接口执行后的结果</figcaption></figure><br><hr><br>`,121),o={class:"hint-container warning"},c=s("p",{class:"hint-container-title"},"OpenResty与LUA",-1);function g(u,v){const i=a("RouteLink");return r(),e("div",null,[d,s("div",o,[c,s("p",null,[l(i,{to:"/technology/programming/lua/"},{default:t(()=>[h("Lua脚本语言")]),_:1})])])])}const b=n(k,[["render",g],["__file","chapter13.html.vue"]]),m=JSON.parse('{"path":"/book/prune/chapter13.html","title":"原《第13章 Nginx与Openresty》","lang":"zh-CN","frontmatter":{"title":"原《第13章 Nginx与Openresty》","icon":"receipt","category":["电子书","节略章节合辑"],"tag":["电子书","节略章节合辑"],"date":"2024-07-19T00:00:00.000Z","isOriginal":true,"star":true,"description":"Nginx 反向代理 Nginx作为一个高性能且高可用的HTTP服务器，反向代理、负载均衡和流量管控是它最拿手的三样本领。 作为反向代理的搜素引擎，可以让用户不必记住并在浏览器的地址栏上输入每种提供服务的网站网址，而只需要在搜索出来的结果上轻点鼠标，即可访问网站服务，这正是典型的反向代理服务。 正向代理与反向代理正向代理与反向代理 以Java应用为例，...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/book/prune/chapter13.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"原《第13章 Nginx与Openresty》"}],["meta",{"property":"og:description","content":"Nginx 反向代理 Nginx作为一个高性能且高可用的HTTP服务器，反向代理、负载均衡和流量管控是它最拿手的三样本领。 作为反向代理的搜素引擎，可以让用户不必记住并在浏览器的地址栏上输入每种提供服务的网站网址，而只需要在搜索出来的结果上轻点鼠标，即可访问网站服务，这正是典型的反向代理服务。 正向代理与反向代理正向代理与反向代理 以Java应用为例，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/book/prune/mybook-c13-01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"电子书"}],["meta",{"property":"article:tag","content":"节略章节合辑"}],["meta",{"property":"article:published_time","content":"2024-07-19T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原《第13章 Nginx与Openresty》\\",\\"image\\":[\\"https://tianmazuo.com/book/prune/mybook-c13-01.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-02.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-03.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-04.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-05.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-06.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-07.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-08.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-09.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-10.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-11.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-12.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-13.png\\",\\"https://tianmazuo.com/book/prune/mybook-c13-14.png\\"],\\"datePublished\\":\\"2024-07-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"Nginx","slug":"nginx","link":"#nginx","children":[{"level":3,"title":"反向代理","slug":"反向代理","link":"#反向代理","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"流量管控","slug":"流量管控","link":"#流量管控","children":[]}]},{"level":2,"title":"OpenResty的协程","slug":"openresty的协程","link":"#openresty的协程","children":[{"level":3,"title":"Coroutine库","slug":"coroutine库","link":"#coroutine库","children":[]},{"level":3,"title":"并行调度","slug":"并行调度","link":"#并行调度","children":[]}]}],"git":{},"readingTime":{"minutes":15.59,"words":4677},"filePathRelative":"book/prune/chapter13.md","localizedDate":"2024年7月19日","excerpt":"<h2>Nginx</h2>\\n<h3>反向代理</h3>\\n<p><a href=\\"https://www.nginx.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Nginx</a>作为一个高性能且高可用的HTTP服务器，反向代理、负载均衡和流量管控是它最拿手的三样本领。</p>\\n<p>作为反向代理的搜素引擎，可以让用户不必记住并在浏览器的地址栏上输入每种提供服务的网站网址，而只需要在搜索出来的结果上轻点鼠标，即可访问网站服务，这正是典型的反向代理服务。</p>\\n<figure><img src=\\"https://tianmazuo.com/book/prune/mybook-c13-01.png\\" alt=\\"正向代理与反向代理\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>正向代理与反向代理</figcaption></figure>","autoDesc":true}');export{b as comp,m as data};
