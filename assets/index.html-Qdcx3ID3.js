import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-B5m7CcSj.js";const n={},l=e(`<h2 id="问题的产生" tabindex="-1"><a class="header-anchor" href="#问题的产生"><span>问题的产生</span></a></h2><p>在过去的单机应用系统环境里，功能调用的结果只有两种状态，要么成功，要么失败。因为所有计算可用的资源，例如<code>CPU</code>、<code>内存</code>和<code>磁盘</code>，要么在同一台计算机中，要么在同一个物理上狭小且集中的局域网内。</p><p>但将应用部署到互联网上，或开发一个互联网应用时，应用系统就出现了第三种状态：<code>超时</code>（又叫<a href="https://baike.baidu.com/item/%E8%B6%85%E6%97%B6" target="_blank" rel="noopener noreferrer">Timeout</a>），这是由网络节点运行的不可预测性和故障的突发性所造成的，并且这种状况无法避免。</p><p>在前后端<code>代码分离</code>和<code>职责分离（接口与实现分离）</code>已成为主流开发模式的前提下，这种<code>超时</code>现象又引起了另一个让工程师们头疼的问题：<code>重复提交</code>。</p><p>最典型的<code>重复提交</code>问题是这样产生的。</p><div style="text-align:center;"><p><img src="https://tianmazuo.com/technology/distributed/distributed-01.png" alt="成功" width="500" height="250" loading="lazy"> <img src="https://tianmazuo.com/technology/distributed/distributed-02.png" alt="失败" width="500" height="250" loading="lazy"></p></div><p>当网络情况良好的时候，每一步都能正常工作：网络没有断掉、后台没有崩溃、功能没有异常，就像上面图片中显示的那样。</p><p>但是很不凑巧，就在提交数据到服务器，或者是服务器输出响应的时候，网断了。</p><p>因为客户端既发送不了数据，也收不到服务器的返回的响应，所以整个页面就在这里<code>卡住了</code>。而此情此景下，几乎每个人都会下意识地反复点击<code>秒杀</code>按钮，不断尝试重复发送。</p><p>可能网络只是<code>卡住</code>了那么一小会儿，但在此期间用户却已经连续点击很多次了。也就是说，用户在这一小段时间内又连续<code>加塞</code>了几个一模一样的请求：提交地址一样，提交数据一样，提交方式也一样——<code>重复提交</code>就此产生。</p><p>如果只是单纯参与<code>秒杀</code>活动，问题还不大，无非就是暂时多占几个排队名额罢了，用户和商家都不损失什么。</p><p>而一旦需要用户付出真金白银，需要商家交付货真价实的商品时，这种<code>重复提交</code>就麻烦了。</p><ul><li><p>可能用户<code>重复提交</code>了几笔订单，就要为每笔订单都付一次钱，但却只能买到单笔订单所对应的商品。</p></li><li><p>可能用户<code>重复提交</code>了几笔订单，只付了一笔订单的钱，但商家却不得不寄运每笔订单所对应的商品。</p></li></ul><figure><img src="https://tianmazuo.com/technology/distributed/distributed-03.png" alt="需要付出真金白银的时候网断了" tabindex="0" loading="lazy"><figcaption>需要付出真金白银的时候网断了</figcaption></figure><br><h2 id="什么是幂等" tabindex="-1"><a class="header-anchor" href="#什么是幂等"><span>什么是幂等</span></a></h2><p>在数学上，把那些无论执行多少次结果都不会变的函数叫做<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等函数（Idempotence）</a>，它具有下面这样的形式。</p><p><span style="color:red;font-weight:bold;font-size:22px;">f(f(x)) = f(x)</span></p><p>而计算机本质上就是进行二进制的数学运算工具，所以在编程中，<code>幂等函数</code>（或<code>幂等方法</code>）用通俗的话来说就是 <strong><mark>某个操作不管执行多少次，对资源造成的影响都是一样的，但是允许有不同的返回值。</mark></strong></p><figure><img src="https://tianmazuo.com/technology/distributed/distributed-04.png" alt="重复提交" tabindex="0" loading="lazy"><figcaption>重复提交</figcaption></figure><p>这里面的<code>客户端</code>可以是浏览器、移动端或小程序，不管哪种，表现出来的结果都是一样的。</p><p>但其实<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>和<code>重复提交</code>是两个不同的概念，而且在应用软件开发中的<code>重复提交</code>问题出现之前，<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>这个数学概念就已经存在很多年了。</p><p>也就是说，<code>重复提交</code>有可能是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的，也有可能不是。而<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>也不意味着没有<code>重复提交</code>，它们之间没有必然关联。</p><p>例如，虽然页面上有<code>重复提交</code>，但是不管提交多少次，结果都是一样的（用户只付一次钱，商家只发一次货），那么这个功能就是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的。</p><br><h2 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法"><span>解决办法</span></a></h2><p>网上有很多种解决<code>重复提交</code>问题的办法，也就是实现<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的方法，但其核心思想只有一个，那就是在操作前先预设一个<code>标志位</code>，然后再通过这个<code>标志位</code>的状态来判断操作是否发生了重复，从利用<a href="https://zookeeper.apache.org" target="_blank" rel="noopener noreferrer">Zookeeper</a>或<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>的分布式锁，到<code>数据库锁</code>，再到业务服务的<code>Token</code>校验机制，都是这种思想的体现。</p><p>下面是这些方案的伪代码实现。</p><h3 id="zookeeper分布式锁" tabindex="-1"><a class="header-anchor" href="#zookeeper分布式锁"><span>Zookeeper分布式锁</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 生成唯一订单号，例如：orderId = Hash(商品ID + 金额 + 数量 + 用户ID)</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> orderId </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">generateId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> path </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> orderId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 只需要判断节点是否存在即可，无需做任何操作，因为它只是一个标志位</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">zk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 节点已经存在，说明本次为重复提交，直接返回</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">KeeperException.NoNodeException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 节点不存在</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 其他异常，判定节点可能存在</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 如果节点不存在则创建临时节点，并同时提交订单</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;锁&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    zk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path, ...);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // TODO：提交订单信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 在另外的定时任务中读取订单ID，然后统一删除所有临时节点</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 一般订单的有效期是30分钟，所以定时任务最好设置在提交订单的31~35分钟后执行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;锁&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">   zk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面唯一的问题在于最后一个<code>catch</code>块中的异常处理：有可能节点不存在，可以继续处理，但此时程序已经返回了。</p><p>虽然这会导致订单创建不成功，但至少要比<code>重复提交</code>带来的影响小得多。</p><p>当对于<a href="https://zookeeper.apache.org" target="_blank" rel="noopener noreferrer">Zookeeper</a>这种需要自行手动释放的锁，<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>用起来会更方便，而且也更简单一些。</p><h3 id="redis分布式锁" tabindex="-1"><a class="header-anchor" href="#redis分布式锁"><span>Redis分布式锁</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 生成唯一订单号的方式同zookeeper</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">orderId </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">generateId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(orderId);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 锁已经存在，说明本次为重复提交，直接返回</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 出现异常，判定锁可能存在</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 如果锁不存在则创建锁，并同时提交订单</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;锁&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 设置key的过期时间为32分钟</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    jedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(orderId, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1920</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // TODO：提交订单信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于使用<code>Token</code>的 方式和<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>锁的方式一模一样，只不过存储的是<code>Token</code>而非订单号罢了。</p><h3 id="数据库锁" tabindex="-1"><a class="header-anchor" href="#数据库锁"><span>数据库锁</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 读取并锁住一行订单记录</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_orders </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21885896215478332125486</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOR</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 中间是执行业务逻辑的业务代码同前面类似，存在则返回，不存在则创建</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 更新订单记录</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_orders </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> amount </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> amount - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21885896215478332125486</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于<code>乐观锁</code>，侵入性更大，需要添加一个单独的<code>version</code>字段，实际开发中极少应用。</p><p><a href="https://zookeeper.apache.org" target="_blank" rel="noopener noreferrer">Zookeeper</a>锁、<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>锁、<code>Token</code>本质上同属于一类<code>分布式锁</code>的解决方案。</p><p><code>数据库锁</code>又属于另外一类解决方案，这种方案的弊端在于以下三点。</p><ul><li><p>一是侵入性太高，需要改造<code>SQL</code>查询，尤其是乐观锁，需要添加与业务无关的字段。</p></li><li><p>二是只适用于<code>UPDATE</code>更新操作，因为它的名字就是<code>FOR UPDATE</code>而不是<code>FOR INSERT</code>或<code>FOR DELETE</code>。</p></li><li><p>三是它需要事务的加持，如果事务处理的很慢，会严重影响性能。</p></li></ul><p>除此以外，都是它们的衍生方法。</p><p>但实际生产环境中，用的最多的还是<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>锁，因为它的侵入性最小、灵活性最高（<code>CRUD</code>都适用），而且实现起来也简单方便。</p><br><h2 id="一些常识" tabindex="-1"><a class="header-anchor" href="#一些常识"><span>一些常识</span></a></h2><p>实际上，并不是所有的操作都会有<code>重复提交</code>的问题。例如，<code>普通查询（Normal SELECT）</code>操作，不管<code>SELECT</code>1次，还是100次，还是1亿次，它绝不会对资源造成任何影响。</p><p>所以可以说，<code>普通查询（Normal SELECT）</code>操作天然就是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的。</p><p>类似于<code>普通查询（Normal SELECT）</code>这样天然<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的操作还包括这些。</p><ul><li><p><code>删除（DELETE）</code>：不管是物理操作还是逻辑操作，无论执行多少次，除了返回值不同，对数据造成的效果是一样的，也是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>操作。</p></li><li><p><code>创建（CREATE）</code>。</p><ul><li><p>带<code>唯一索引（Unique Index）</code>的<code>创建（CREATE）</code>操作是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的，因为重复插入会提交失败。</p></li><li><p>除此以外都不是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的。</p></li></ul></li><li><p><code>更新（UPDATE）</code>。</p><ul><li><p><code>计算式更新（Calculate UPDATE）</code>操作都不是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的，例如<code>UPDATE table SET number = number - 1 WHERE id = 1</code>这类<code>SQL</code>，每次更新所造成的影响都不一样。</p></li><li><p><code>条件式更新（Condition UPDATE）</code>操作都是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的，例如<code>UPDATE table SET number = 1 WHERE id = 1</code>这类<code>SQL</code>，每次更新所造成的影响都一样。</p></li></ul></li></ul><p>前面之所以要强调<code>普通查询（Normal SELECT）</code>，是因为还有一类具有<code>半幂等性</code>的<code>计算查询（Calculate SELECT）</code>操作。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> createtime </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>类似于这种日期范围的查询可以说非常普遍。但如果从计量单位是<code>天</code>的话，那么在1天之内，被认为是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的，否则就不是<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>的。</p><p>另外，<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>也提供了三组防止<code>重复提交</code>的语句，可以用来保证<a href="https://zh.wikipedia.org/wiki/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreferrer">幂等</a>。</p><ul><li><p><code>INSERT IGNORE INTO</code>：若有导致<code>unique key</code>冲突的记录，则该条记录不会被插入到数据库中。</p></li><li><p><code>REPLACE INTO</code>：若插入时如发现<code>unique key</code>已存在，则替换原记录，即先删除原记录，后<code>INSERT</code>新记录。</p></li><li><p><code>ON DUPLICATE KEY UPDATE</code>：若插入时如果发现<code>unique key</code>已存在，则执行<code>UPDATE</code>更新操作。</p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 如果已有id = 1的记录则不执行插入且不会报错</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INSERT IGNORE INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user(id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, age) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;lixingyun&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">19</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 删除id = 1的用户后再插入相同的记录值且更新时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> REPLACE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user(id, updatetime) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user(id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, age) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;lixingyun&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">19</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DUPLICATE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">KEY</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 等同于</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),t=[l];function h(p,k){return a(),s("div",null,t)}const o=i(n,[["render",h],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/technology/distributed/","title":"幂等性","lang":"zh-CN","frontmatter":{"title":"幂等性","icon":"equals","category":["分布式","幂等性"],"tag":["分布式","幂等性"],"date":"2023-06-20T00:00:00.000Z","isOriginal":true,"star":true,"description":"问题的产生 在过去的单机应用系统环境里，功能调用的结果只有两种状态，要么成功，要么失败。因为所有计算可用的资源，例如CPU、内存和磁盘，要么在同一台计算机中，要么在同一个物理上狭小且集中的局域网内。 但将应用部署到互联网上，或开发一个互联网应用时，应用系统就出现了第三种状态：超时（又叫Timeout），这是由网络节点运行的不可预测性和故障的突发性所造成...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/distributed/"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"幂等性"}],["meta",{"property":"og:description","content":"问题的产生 在过去的单机应用系统环境里，功能调用的结果只有两种状态，要么成功，要么失败。因为所有计算可用的资源，例如CPU、内存和磁盘，要么在同一台计算机中，要么在同一个物理上狭小且集中的局域网内。 但将应用部署到互联网上，或开发一个互联网应用时，应用系统就出现了第三种状态：超时（又叫Timeout），这是由网络节点运行的不可预测性和故障的突发性所造成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/distributed/distributed-01.png =500x250"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"幂等性"}],["meta",{"property":"article:published_time","content":"2023-06-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"幂等性\\",\\"image\\":[\\"https://tianmazuo.com/technology/distributed/distributed-01.png =500x250\\",\\"https://tianmazuo.com/technology/distributed/distributed-02.png =500x250\\",\\"https://tianmazuo.com/technology/distributed/distributed-03.png\\",\\"https://tianmazuo.com/technology/distributed/distributed-04.png\\"],\\"datePublished\\":\\"2023-06-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"问题的产生","slug":"问题的产生","link":"#问题的产生","children":[]},{"level":2,"title":"什么是幂等","slug":"什么是幂等","link":"#什么是幂等","children":[]},{"level":2,"title":"解决办法","slug":"解决办法","link":"#解决办法","children":[{"level":3,"title":"Zookeeper分布式锁","slug":"zookeeper分布式锁","link":"#zookeeper分布式锁","children":[]},{"level":3,"title":"Redis分布式锁","slug":"redis分布式锁","link":"#redis分布式锁","children":[]},{"level":3,"title":"数据库锁","slug":"数据库锁","link":"#数据库锁","children":[]}]},{"level":2,"title":"一些常识","slug":"一些常识","link":"#一些常识","children":[]}],"git":{},"readingTime":{"minutes":8.74,"words":2623},"filePathRelative":"technology/distributed/README.md","localizedDate":"2023年6月20日","excerpt":"<h2>问题的产生</h2>\\n<p>在过去的单机应用系统环境里，功能调用的结果只有两种状态，要么成功，要么失败。因为所有计算可用的资源，例如<code>CPU</code>、<code>内存</code>和<code>磁盘</code>，要么在同一台计算机中，要么在同一个物理上狭小且集中的局域网内。</p>\\n<p>但将应用部署到互联网上，或开发一个互联网应用时，应用系统就出现了第三种状态：<code>超时</code>（又叫<a href=\\"https://baike.baidu.com/item/%E8%B6%85%E6%97%B6\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Timeout</a>），这是由网络节点运行的不可预测性和故障的突发性所造成的，并且这种状况无法避免。</p>","autoDesc":true}');export{o as comp,c as data};
