import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-B5m7CcSj.js";const e={},n=t(`<h2 id="查询成本的计算" tabindex="-1"><a class="header-anchor" href="#查询成本的计算"><span>查询成本的计算</span></a></h2><h3 id="全表扫描的成本计算" tabindex="-1"><a class="header-anchor" href="#全表扫描的成本计算"><span>全表扫描的成本计算</span></a></h3><p>不管是单表关联还是多表关联，对于<code>SQL</code>查询优化器来说，其实都是有多种执行计划可供选择的，那么如何能够保证<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>选择一个<code>成本</code>最低，效率最佳的执行计划呢？</p><p>但问题是，怎么确定<code>成本</code>呢？</p><p><a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>首先会对查询计算一个全表扫描的成本，计算方法如下。</p><ul><li><p>通过<code>SHOW TABLE STATUS LIKE &quot;表名&quot;</code>得到表的统计信息，其中<code>data_length</code>为表的聚簇索引字节数，而表的<code>数据页数量 = data_length / 1024 / 16（每页默认16KB大小）</code>。</p></li><li><p><code>I/O成本</code>：数据页数量 + 微调值。</p></li><li><p><code>CPU成本</code>：行记录数 * 0.2。</p></li><li><p><code>扫描总成本</code> = <code>I/O成本</code> + <code>CPU成本</code>。</p></li></ul><h3 id="索引的成本计算" tabindex="-1"><a class="header-anchor" href="#索引的成本计算"><span>索引的成本计算</span></a></h3><p>计算完全表扫描成本后，当有多个索引可以使用时，需要通过比较<code>成本</code>来确定应该使用哪个索引。</p><p>二级索引的成本计算，都是本身的<code>查询成本 + 回表操作成本</code>，<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>会估算从二级索引里能查出多少行数据。</p><ul><li><p><code>查询成本</code> = 估算查询出的数据条数 * 0.2。</p></li><li><p><code>回表成本</code>（回表到聚簇索引查询） = 数据条数（一条按一页算） + 微调值。</p></li><li><p><code>比较成本</code>（对查询到的完整数据进行判断） = 数据条数 * 0.2。</p></li><li><p><code>索引总成本</code> = 查询成本 + 回表成本 + 比较成本。</p></li></ul><p>每个索引都会计算一遍查询成本，然后从中选择成本最低的执行。</p><h3 id="基于多表的成本计算" tabindex="-1"><a class="header-anchor" href="#基于多表的成本计算"><span>基于多表的成本计算</span></a></h3><p>单表查询时，<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>会对这张表的多种访问方式（全表扫描或索引查询）进行计算，算出每种访问方式的成本，然后再选择一个成本最低的方式，多表查询和这类似。</p><p>多表查询时在每张表上都执行成本计算方法，确定每张表上成本最低的访问方法，然后汇总在一起，就完成了多表关联查询。</p><br><h2 id="优化执行计划" tabindex="-1"><a class="header-anchor" href="#优化执行计划"><span>优化执行计划</span></a></h2><h3 id="常量替换" tabindex="-1"><a class="header-anchor" href="#常量替换"><span>常量替换</span></a></h3><p>仅仅对查询做成本计算，然后选择其中一种来执行还是不够的，<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>在执行一些较为复杂的<code>SQL</code>语句时可能会对查询进行重写，以便优化具体的执行计划。</p><p>其中一个优化方法就是<code>常量替换</code>。</p><ul><li><p>将<code>f1 &gt; 1 AND f2 &gt; f1</code>替换为<code>f1 &gt; 1 AND f2 &gt; 1</code>。</p></li><li><p>删除一些无意义的<code>SQL</code>子句，比如<code>f1 = f1</code>。</p></li><li><p><code>SELECT * FROM t1, t2 WHERE t1.id = x AND t1.f1 = t2.f1</code>执行时可能会先查出<code>t1</code>中<code>id=x</code>的那行数据，然后将<code>*</code>号中<code>t1</code>表的部分全部替换为这行数据字段中的值，再来和<code>t2</code>关联。</p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t1中id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x数据行中个字段值, t2.* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t1, t2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x的t1表f1字段值 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">f1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="子查询优化" tabindex="-1"><a class="header-anchor" href="#子查询优化"><span>子查询优化</span></a></h3><p>对于简单子查询<code>SELECT * FROM t1 WHERE f1 = (子查询)</code>，无非就是先执行子查询里面的单表查询，然后再执行子查询之外的单表查询，也就是分成了两个单表查询，索引规则、成本计算、优化规则等方式和单表没什么不同。</p><p>但如果用<code>IN</code>来执行<code>SELECT * FROM t1 WHERE f1 IN (子查询)</code>，就会和之前的方式不太一样。</p><ul><li><p><a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>依然会先执行子查询（和单表查询优化方式一样），但会把子查询的结果都写到一个临时中间表中，并且会对这个临时表创建索引（<strong><mark>重点：临时表有索引</mark></strong>）。</p></li><li><p>然后会比较外层表<code>t1</code>和这个临时表的数据量，如果外层表和临时表数据量差不多，就可以到外层表中查询每行数据中的<code>f1</code>字段值是否在临时表中。</p></li><li><p>反过来，如果外层<code>t1</code>表的数据量远远大于临时表，那么<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>会<code>逆向思考</code>，在临时表查询每行数据是否都在外层<code>t1</code>表的索引树里。也就是说，一个是对<code>t1</code>表做全表扫描，然后去和临时表做比较，一个是对临时表做全表扫描，然后去和<code>t1</code>表做比较，当两张表数据量相差巨大的时候，性能提升是很明显的。</p></li></ul><p>这一点可以通过实验来说明。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--- 删除表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EXISTS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 复制表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 指定主键</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">MODIFY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 增加字段</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ADD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> COLUMN sort </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TINYINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 创建索引</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 删除表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EXISTS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 复制表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 指定主键</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">MODIFY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 增加字段</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ADD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> COLUMN sort </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TINYINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 创建索引</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6 (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再执行下面的SQL语句。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后观察执行结果。</p><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-85.png" alt="子查询优化" tabindex="0" loading="lazy"><figcaption>子查询优化</figcaption></figure><p>结果非常清楚地显示了子查询是如何优化的。</p><ul><li><p>子查询结果被<code>物化</code>成了临时表（<code>type = MATERIALIZED</code>），物化表名为<code>&lt;subquery2&gt;</code>。</p></li><li><p>对物化表<code>&lt;subquery2&gt;</code>做全表扫描，来匹配外层<code>t_test_5</code>数据。</p></li></ul><h3 id="半连接" tabindex="-1"><a class="header-anchor" href="#半连接"><span>半连接</span></a></h3><p><code>SQL</code>查询中有左连接、右连接、内连接和外连接，但还有一种连接方式，称为<code>半连接（Semi Join）</code>，它可能会将一个子查询转化为另一种形式。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;x&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 转化为</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t1.* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t1 SEMI </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">f1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">f2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">f3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;x&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><code>SEMI JOIN</code>并不是提供给开发者的，而是<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>内核中的优化方式，就是把<code>IN</code>子查询转变成两表关联语义。</p><p>半连接并不是所有场景都适用，甚至还会造成性能的下降，可以通过指令关闭半连接。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> optimizer_switch</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;semijoin=off&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>关闭之后再次执行之前的实验<code>SQL</code>，观察执行结果。</p><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-86.png" alt="半连接" tabindex="0" loading="lazy"><figcaption>半连接</figcaption></figure><p>结果显示：外层表做了全表扫描，子查询变化不大。</p><h3 id="更多的type类型" tabindex="-1"><a class="header-anchor" href="#更多的type类型"><span>更多的type类型</span></a></h3><p>之前已经通过实验展示了<code>const</code>、<code>ref</code>、<code>range</code>、<code>index</code>、<code>index_merge</code>等查询方式，下面的SQL语句展示了更多的查询方式。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- NULL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- const</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;1242740190540349440&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- PRIMARY/DEPENDENT SUBQUERY、index_subquery、func</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- index_subquery也是用来替换非唯一索引的IN子查询</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">OR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SHOW WARNINGS;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- UNION/UNION RESULT、&lt;union1, 2&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UNION</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- DEPENDENT SUBQUERY/DEPENDENT UNION/UNION RESULT、&lt;union2,3&gt;、func</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UNION</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test_6);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SHOW WARNINGS;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- DERIVED、&lt;derived2&gt;、Using temporary; Using filesort</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPLAIN </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GROUP BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在之前的实验中可以看出，日常开发工作中尽量写简单的<code>SQL</code>，复杂的逻辑最好通过应用层代码，比如<a href="https://www.oracle.com/java/technologies/downloads/archive/" target="_blank" rel="noopener noreferrer">Java</a>来实现，能用单表查询的就不要用多表关联查询，能多表关联就尽量不用子查询。</p><p>一般的系统，只要<code>SQL</code>语句能够尽量简单、建好必要的索引，性能往往不是问题。</p><p>在了解了一些简单、常用的优化规则之后，就可以来稍稍总结一下<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>的执行计划了。</p><br><h2 id="执行计划总结" tabindex="-1"><a class="header-anchor" href="#执行计划总结"><span>执行计划总结</span></a></h2><h3 id="explain命令" tabindex="-1"><a class="header-anchor" href="#explain命令"><span>explain命令</span></a></h3><p>学习了解<code>EXPLAIN</code>并对执行计划做了简单分析，是<code>SQL</code>调优的必经之路。</p><p>之前一直使用<code>EXPLAIN</code>命令来查看执行计划的内容，其实就是一张表，记录执行过程中的各种状态、数据及额外信息，但并没有作出比较详细的说明，现在来看看<code>EXPLAIN</code>命令以及它展示出来的结果的各个字段的详细含义。</p><ul><li><p><code>EXPLAIN</code>对<code>SELECT</code>完全有效，对<code>UPDATE</code>弱有效（能用到索引），分析不了<code>INSERT</code>、<code>DELETE</code>（如果想让<code>EXPLAIN</code>对<code>INSERT</code>起作用，可以将它转化为<code>SELECT ...... INTO</code>）。</p></li><li><p><code>EXPLAIN</code>无法分析存储过程、触发器和函数的执行计划，也不显示各种<code>Cache</code>对查询的影响，虽然实际执行时会有不同。</p></li><li><p><code>EXPLAIN</code>不区分名字相同的事物，比如内存和磁盘中的文件排序都是<code>filesort</code>，而内存和磁盘中的临时表都是<code>Using temporary</code>，也区分不出单个字段的索引和联合索引。</p></li><li><p><code>EXPLAIN</code>不显示<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>对执行计划所做的每一个优化，比如临时表中的索引，也无法显示出查询的<code>成本</code>高低，总体上而言就是一个观察窗口有限的<code>白盒</code>。</p></li></ul><h3 id="执行计划各字段含义" tabindex="-1"><a class="header-anchor" href="#执行计划各字段含义"><span>执行计划各字段含义</span></a></h3><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">id</td><td style="text-align:left;">显示查询序号，id值越大优先级越高，越先被执行（值也可以是NULL）</td></tr><tr><td style="text-align:center;">select_type</td><td style="text-align:left;">用于区别普通查询、多表关联查询、子查询等不同类型的查询</td></tr><tr><td style="text-align:center;">table</td><td style="text-align:left;">当前正在执行查询的是哪张表，取值也可能是<code>&lt;union1,2&gt;</code>联合表、<code>&lt;derivedN&gt;</code>或<code>&lt;subqueryN&gt;</code>临时表等</td></tr><tr><td style="text-align:center;">partitions</td><td style="text-align:left;"><code>5.7</code>版之前是<code>explain partitions</code>显示的选项，<code>5.7</code>后成为了默认选项，如果<code>table</code>是分区表，那么显示的是分区表命中的分区，非分区表该字段为<code>null</code></td></tr><tr><td style="text-align:center;">type</td><td style="text-align:left;">表示查询在表中是怎么找到所需数据行的，跟性能强相关，从最好到最差依次是：<code>NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code>，但常见的就只有：<code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</code></td></tr><tr><td style="text-align:center;">possible_keys</td><td style="text-align:left;">可能应用在正在执行查询的表中的索引，为<code>null</code>表示没有可能用到的索引，这个字段需要与<code>type</code>结合起来看</td></tr><tr><td style="text-align:center;">key</td><td style="text-align:left;">实际使用的索引，为<code>null</code>表示没有使用任何索引</td></tr><tr><td style="text-align:center;">key_len</td><td style="text-align:left;">索引里最大值的字节长度，长度是可截取的，越短越好</td></tr><tr><td style="text-align:center;">ref</td><td style="text-align:left;">在使用到的索引中，所用到的查找方式，常见的有常量（<code>const</code>）、字段名（例如<code>&lt;subquery2&gt;</code>.name）、<code>func</code>或<code>NULL</code></td></tr><tr><td style="text-align:center;">rows</td><td style="text-align:left;">根据表统计信息及索引选用情况，大致估算出找到记录所需要读取并检测的行数（不是结果集里的行数）</td></tr><tr><td style="text-align:center;">filtered</td><td style="text-align:left;"><code>5.7</code>版之前是<code>explain extended</code>显示的选项，<code>5.7</code>后成为了默认选项，表示经过搜索条件过滤后返回的数据行数占需要读取的行数（<code>rows</code>列的值）的百分比</td></tr><tr><td style="text-align:center;">extra</td><td style="text-align:left;">查询的额外信息，比如<code>Using index</code>、<code>Using where</code></td></tr></tbody></table><h3 id="explain命令总结" tabindex="-1"><a class="header-anchor" href="#explain命令总结"><span>explain命令总结</span></a></h3><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-87.png" alt="explain命令" tabindex="0" loading="lazy"><figcaption>explain命令</figcaption></figure><br><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-88.png" alt="explain命令" tabindex="0" loading="lazy"><figcaption>explain命令</figcaption></figure><br><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-89.png" alt="explain命令" tabindex="0" loading="lazy"><figcaption>explain命令</figcaption></figure><br><p>千万不要死记硬背每个字段的各种可能取值的含义，因为毫无必要——常用的取值可能就那么几个，即使是特别复杂的<code>SQL</code>查询，也不会所有的取值都出现，见招拆招就行了。</p><p>而且<code>explain</code>表中的字段也不是每个都需要关注，比较重要的也就是<code>select_type</code>、<code>type</code>、<code>ref</code>这三列，<strong><mark>尤其是type，非常关键，它直接决定了查询是如何从表里面拿到数据的，和性能的好坏紧密相关</mark></strong>。</p><p><code>EXPLAIN</code>最权威的官方解释<a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#explain_ref" target="_blank" rel="noopener noreferrer">在这里</a>。</p>`,67),l=[n];function h(k,p){return a(),s("div",null,l)}const A=i(e,[["render",h],["__file","execplan02.html.vue"]]),g=JSON.parse('{"path":"/technology/database/mysql/execplan02.html","title":"执行计划（下）","lang":"zh-CN","frontmatter":{"title":"执行计划（下）","icon":"table","category":["数据库","MySQL"],"tag":["数据库","MySQL"],"date":"2023-05-14T00:00:00.000Z","isOriginal":true,"star":true,"description":"查询成本的计算 全表扫描的成本计算 不管是单表关联还是多表关联，对于SQL查询优化器来说，其实都是有多种执行计划可供选择的，那么如何能够保证MySQL选择一个成本最低，效率最佳的执行计划呢？ 但问题是，怎么确定成本呢？ MySQL首先会对查询计算一个全表扫描的成本，计算方法如下。 通过SHOW TABLE STATUS LIKE \\"表名\\"得到表的统计信...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/database/mysql/execplan02.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"执行计划（下）"}],["meta",{"property":"og:description","content":"查询成本的计算 全表扫描的成本计算 不管是单表关联还是多表关联，对于SQL查询优化器来说，其实都是有多种执行计划可供选择的，那么如何能够保证MySQL选择一个成本最低，效率最佳的执行计划呢？ 但问题是，怎么确定成本呢？ MySQL首先会对查询计算一个全表扫描的成本，计算方法如下。 通过SHOW TABLE STATUS LIKE \\"表名\\"得到表的统计信..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/database/mysql/mysql-85.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2023-05-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"执行计划（下）\\",\\"image\\":[\\"https://tianmazuo.com/technology/database/mysql/mysql-85.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-86.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-87.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-88.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-89.png\\"],\\"datePublished\\":\\"2023-05-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"查询成本的计算","slug":"查询成本的计算","link":"#查询成本的计算","children":[{"level":3,"title":"全表扫描的成本计算","slug":"全表扫描的成本计算","link":"#全表扫描的成本计算","children":[]},{"level":3,"title":"索引的成本计算","slug":"索引的成本计算","link":"#索引的成本计算","children":[]},{"level":3,"title":"基于多表的成本计算","slug":"基于多表的成本计算","link":"#基于多表的成本计算","children":[]}]},{"level":2,"title":"优化执行计划","slug":"优化执行计划","link":"#优化执行计划","children":[{"level":3,"title":"常量替换","slug":"常量替换","link":"#常量替换","children":[]},{"level":3,"title":"子查询优化","slug":"子查询优化","link":"#子查询优化","children":[]},{"level":3,"title":"半连接","slug":"半连接","link":"#半连接","children":[]},{"level":3,"title":"更多的type类型","slug":"更多的type类型","link":"#更多的type类型","children":[]}]},{"level":2,"title":"执行计划总结","slug":"执行计划总结","link":"#执行计划总结","children":[{"level":3,"title":"explain命令","slug":"explain命令","link":"#explain命令","children":[]},{"level":3,"title":"执行计划各字段含义","slug":"执行计划各字段含义","link":"#执行计划各字段含义","children":[]},{"level":3,"title":"explain命令总结","slug":"explain命令总结","link":"#explain命令总结","children":[]}]}],"git":{},"readingTime":{"minutes":9.48,"words":2844},"filePathRelative":"technology/database/mysql/execplan02.md","localizedDate":"2023年5月14日","excerpt":"<h2>查询成本的计算</h2>\\n<h3>全表扫描的成本计算</h3>\\n<p>不管是单表关联还是多表关联，对于<code>SQL</code>查询优化器来说，其实都是有多种执行计划可供选择的，那么如何能够保证<a href=\\"https://www.mysql.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MySQL</a>选择一个<code>成本</code>最低，效率最佳的执行计划呢？</p>\\n<p>但问题是，怎么确定<code>成本</code>呢？</p>\\n<p><a href=\\"https://www.mysql.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MySQL</a>首先会对查询计算一个全表扫描的成本，计算方法如下。</p>","autoDesc":true}');export{A as comp,g as data};
