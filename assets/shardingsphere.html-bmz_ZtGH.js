import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,d}from"./app-CiwSPZKD.js";const a={},r=d(`<h2 id="概念术语" tabindex="-1"><a class="header-anchor" href="#概念术语"><span>概念术语</span></a></h2><p><a href="https://shardingsphere.apache.org/" target="_blank" rel="noopener noreferrer">ShardingSphere</a>有一些自己独特的<code>分库分表</code>术语，必须搞清楚它们的意思才能玩得转。</p><ul><li><code>数据节点Node</code>：是数据分片的最小单元，由数据源名称和数据表组成，例如：<code>ds_0.t_order_0</code>。</li></ul><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-07.png" alt="数据节点Node" tabindex="0" loading="lazy"><figcaption>数据节点Node</figcaption></figure><ul><li><p><code>真实表</code>：在分片的数据库中真实存在的物理表，例如上面的<code>t_order_0</code>、<code>t_order_1</code>、<code>t_order_2</code>。</p></li><li><p><code>逻辑表</code>：拆分后具有相同结构的数据表的总称，例如<code>t_order_0</code>、<code>t_order_1</code>、<code>t_order_2</code>的逻辑表就是<code>t_order</code>。</p></li><li><p><code>绑定表</code>：指分片规则一致的主表和子表，例如，<code>t_order</code>和<code>t_order_item</code>，均按照<code>orderId</code>分片，那么这两张表就互为<code>绑定表</code>关系，且绑定表之间的多表关联查询不会出现笛卡尔积关联。例如，<code>t_order_0</code>只会和<code>t_order_item_0</code>关联，而<code>t_order_1</code>只会和<code>t_order_item_1</code>关联。</p></li></ul><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-08.png" alt="绑定表" tabindex="0" loading="lazy"><figcaption>绑定表</figcaption></figure><ul><li><code>广播表</code>：指在所有的分片数据源中都存在的表，其表结构和数据在每个数据源中都完全一致。例如，<code>系统配置表</code>和<code>系统字典表</code>，<code>广播表</code>非常适用于那种数据量不大，但又需要与有海量数据的表进行关联查询的场景。</li></ul><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-09.png" alt="广播表" tabindex="0" loading="lazy"><figcaption>广播表</figcaption></figure><br><h2 id="分片算法" tabindex="-1"><a class="header-anchor" href="#分片算法"><span>分片算法</span></a></h2><p><code>分片键（Partition Key）</code>是用于将表进行切分的关键字段。例如，如果依据<code>主键</code>对标进行划分，那么<code>主键</code>就是<code>分片键</code>，或者根据日期时间范围对表进行划分，那么日期时间字段就是<code>分片键</code>。</p><p><code>分片键</code>不一定是主键，它是根据业务情况和系统状态共同决定的。</p><p><code>分片键</code>也不一定是单个字段，它也可以由多个字段组成。例如，先对主键进行<code>Hash</code>计算取模，然后再结合日期时间字段来对数据表进行分片。</p><p><a href="https://shardingsphere.apache.org/" target="_blank" rel="noopener noreferrer">ShardingSphere</a>支持下面几种分片策略。</p><ul><li><code>行分片策略（InlineShardingStrategy）</code>：只支持单个字段的<code>分片键</code>，提供对<code>SQL</code>中<code>=</code>和<code>IN</code>的操作支持。这种方式无需自定义分片算法，简单配置后就能用。</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 订单表根据id对8取模，进而拆分成8张表，表名从t_order_0 ~ t_order_7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t_order_$-</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {id % </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>标准分片策略（StandardShardingStrategy）</code>：也只支持单个字段的<code>分片键</code>，提供<code>PreciseShardingAlgorithm</code>和<code>RangeShardingAlgorithm</code>两个分片算法。<code>PreciseShardingAlgorithm</code>是必选的，用于精准分片，用于处理<code>=</code>和<code>IN</code>操作。而<code>RangeShardingAlgorithm</code>是可选的，用于范围分配，用于处理<code>BETWEEN AND</code>操作。</p></li><li><p><code>复合分片策略（ComplexShardingStrategy）</code>：支持多字段组合的<code>分片键</code>，需要由开发者自己实现分片算法。</p></li><li><p><code>Hint分片策略（HintShardingStrategy）</code>：这种策略不在目标表上配置<code>分片键</code>，分片健值也不从<code>SQL</code>中获得，而是手动在外部指定<code>分片健</code>或<code>分片库</code>，让<code>SQL</code>在指定的<code>分片健</code>或<code>分片库</code>中执行<code>分库分表</code>。</p></li><li><p><code>不分片策略（NoneShardingStrategy）</code>：就是不用<a href="https://shardingsphere.apache.org/" target="_blank" rel="noopener noreferrer">ShardingSphere</a>。</p></li></ul>`,17),i=[r];function c(n,s){return t(),o("div",null,i)}const p=e(a,[["render",c],["__file","shardingsphere.html.vue"]]),g=JSON.parse('{"path":"/technology/database/sharding/shardingsphere.html","title":"常见概念与分片算法","lang":"zh-CN","frontmatter":{"title":"常见概念与分片算法","icon":"cubes-stacked","category":["数据库","分库分表"],"tag":["数据库","分库分表","ShardingSphere"],"date":"2023-06-07T00:00:00.000Z","isOriginal":true,"star":true,"description":"概念术语 ShardingSphere有一些自己独特的分库分表术语，必须搞清楚它们的意思才能玩得转。 数据节点Node：是数据分片的最小单元，由数据源名称和数据表组成，例如：ds_0.t_order_0。 数据节点Node数据节点Node 真实表：在分片的数据库中真实存在的物理表，例如上面的t_order_0、t_order_1、t_order_2。 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/database/sharding/shardingsphere.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"常见概念与分片算法"}],["meta",{"property":"og:description","content":"概念术语 ShardingSphere有一些自己独特的分库分表术语，必须搞清楚它们的意思才能玩得转。 数据节点Node：是数据分片的最小单元，由数据源名称和数据表组成，例如：ds_0.t_order_0。 数据节点Node数据节点Node 真实表：在分片的数据库中真实存在的物理表，例如上面的t_order_0、t_order_1、t_order_2。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/database/sharding/sharding-07.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"分库分表"}],["meta",{"property":"article:tag","content":"ShardingSphere"}],["meta",{"property":"article:published_time","content":"2023-06-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见概念与分片算法\\",\\"image\\":[\\"https://tianmazuo.com/technology/database/sharding/sharding-07.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-08.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-09.png\\"],\\"datePublished\\":\\"2023-06-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"概念术语","slug":"概念术语","link":"#概念术语","children":[]},{"level":2,"title":"分片算法","slug":"分片算法","link":"#分片算法","children":[]}],"git":{},"readingTime":{"minutes":2.6,"words":781},"filePathRelative":"technology/database/sharding/shardingsphere.md","localizedDate":"2023年6月7日","excerpt":"<h2>概念术语</h2>\\n<p><a href=\\"https://shardingsphere.apache.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ShardingSphere</a>有一些自己独特的<code>分库分表</code>术语，必须搞清楚它们的意思才能玩得转。</p>\\n<ul>\\n<li><code>数据节点Node</code>：是数据分片的最小单元，由数据源名称和数据表组成，例如：<code>ds_0.t_order_0</code>。</li>\\n</ul>\\n<figure><img src=\\"https://tianmazuo.com/technology/database/sharding/sharding-07.png\\" alt=\\"数据节点Node\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>数据节点Node</figcaption></figure>","autoDesc":true}');export{p as comp,g as data};
