import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,d as t}from"./app-B5m7CcSj.js";const n={},r=t('<h2 id="什么是敏捷过程" tabindex="-1"><a class="header-anchor" href="#什么是敏捷过程"><span>什么是敏捷过程</span></a></h2><p>现实世界唯一不变的就是一直在变，软件开发也是如此，新的语言，新的方法，新的思想不断出现。</p><p>除了 <strong><mark>按“步”就班</mark></strong> 的<code>瀑布模型</code>和 <strong><mark>唯“例”是图</mark></strong> 的<code>RUP</code>这两大重量级过程以外，一些小型化、轻量级的软件过程也迅速发展起来。</p><p>因为，除了那些大型的、关乎国计民生的重量级软件项目，更多的是一些面向中小型企业乃至个人的应用。例如，某个零售店的收费系统、某家公司的考勤系统、某个图书馆的借阅系统和某所大学的教务系统等。这些应用系统的需求和那些大系统相比完全不在一个数量级上，有的甚至连正式的需求文档都没有。</p><p>尤其是在互联网应用开始兴起，逐渐成为软件开发的主流应用之后，这种情况就更加普遍。相对于那些文档、报告和各种交付件来说，客户、老板和工程师们都更倾向于立马得到<code>看得见摸得着</code>的<code>可运行系统</code>——效率高于一切。</p><p>在这种背景下，2001年，17位国际软件开发专家聚集在美国犹他州，讨论了他们对于软件开发的各种想法和实践经验，并据此达成了价值观和原则的共识，之后共同发布了世界上第一份<a href="https://agilemanifesto.org/" target="_blank" rel="noopener noreferrer">敏捷软件开发宣言</a>和相应的<a href="https://agilemanifesto.org/principles.html" target="_blank" rel="noopener noreferrer">十二条敏捷开发原则</a>。</p><figure><img src="https://tianmazuo.com/technology/engineering/process/process-05.png" alt="敏捷软件开发宣言" tabindex="0" loading="lazy"><figcaption>敏捷软件开发宣言</figcaption></figure><figure><img src="https://tianmazuo.com/technology/engineering/process/process-06.png" alt="十二条敏捷开发原则" tabindex="0" loading="lazy"><figcaption>十二条敏捷开发原则</figcaption></figure><p>敏捷宣言和价值观都充分说明，它重视变化，重视迭代，重视团队协作和沟通反馈，强调快速变化和持续改进，它的核心理念包括下面几个方面。</p><ul><li><p><code>迭代开发</code>，<code>敏捷过程</code>将软件开发过程分为多个短周期，称之为<code>迭代周期</code>。每个迭代周期通常持续1到4周。在每个<code>迭代周期</code>结束时，开发团队将会交付一个可用的、经过测试的且可发布的软件版本，这有助于快速验证需求、减少风险，并使客户能够及时体验并提出反馈。</p></li><li><p><code>快速反馈</code>，鼓励与客户和用户保持紧密沟通，及时获取反馈。这样一来，团队就可以及时调整开发方向，避免无用功，确保软件符合客户需求。</p></li><li><p><code>持续改进</code>，通过定期的回顾会议和迭代总结，让工程师们可以发现问题、找到改进的方法和提高软件质量，并在下一个迭代中应用这些改进。</p></li><li><p><code>团队协作</code>，鼓励团队内部、团队与客户之间相互理解支持，以实现项目的成功。</p></li><li><p><code>自组织和管理</code>，团队成员应该具有一定的自主权和决策权，避免因外部管理问题而影响开发效率。</p></li></ul><br><h2 id="agile和scrum" tabindex="-1"><a class="header-anchor" href="#agile和scrum"><span>Agile和Scrum</span></a></h2><p>需要注意和说明的是，<code>敏捷（Agile）</code>是一种思维方式或开发理念，而<code>Scrum</code>则只是一种实现敏捷的具体方法（实现敏捷的方式并非只有Scrum一种）。</p><p><code>Agile</code>和<code>Scrum</code>之间的关系类似于<code>微服务</code>和<code>Spring Cloud</code>之间的关系。只是因为<code>Scrum</code>应用较为广泛，所以在大多数场合下，<code>Agile</code>和<code>Scrum</code>这两者之间互相替代也没什么问题。</p><figure><img src="https://tianmazuo.com/technology/engineering/process/process-07.png" alt="Agile和Scrum之间的关系" tabindex="0" loading="lazy"><figcaption>Agile和Scrum之间的关系</figcaption></figure><p>因此，<code>Scrum</code>无疑是敏捷过程里最成功的那一个。</p><p><code>Scrum</code>的概念最早来源于精益生产，它将产品开发比作橄榄球比赛中球队的集体争球，强调团队需要在短时间内合作才能完成任务。这种灵活的、迭代的方法后来被引入了软件开发领域，由此形成了现在人们所熟知的<code>Scrum</code>方法。</p><ul><li><p><code>Scrum</code>的基本原则是将整个开发过程划分为若干短小的迭代周期，这被称为<code>冲刺（Sprint）</code>，它通常为2到4周。</p></li><li><p>在每个冲刺开始之前，<code>Scrum教练（Scrum Master）</code>会制定一个<code>冲刺计划（Sprint Planning）</code>，明确冲刺目标和计划如何实现，而<code>产品负责人（Product Owner）</code>则会事先将已确认的需求分解成一份<code>产品待办清单（Product Backlog）</code>。</p></li><li><p><code>Scrum教练</code>和<code>产品负责人</code>是两个不同的角色，这两个角色可以是同一个人，也可以不是。</p></li><li><p>在冲刺期间，<code>开发人员（Developers）</code>会完成一批由产品负责人根据<code>价值排序原则</code>从产品待办清单中列出的<code>用户故事（User Story）清单</code>，这个清单也叫<code>冲刺清单（Sprint Backlog）</code>。</p></li><li><p>每个冲刺都以一个可交付的、经过测试的<code>软件产品增量（Product Increment）</code>版本作为结束。</p></li><li><p>开发人员每天进行短暂的<code>站立会议（Daily Stand-up）</code>，以便及时沟通、解决卡点问题和互相通报进度，会议时间一般不超过15分钟。</p></li><li><p><code>Scrum</code>强调团队的自组织管理和持续改进能力，同时也通过定期的<code>评审会议（Sprint Review）</code>和<code>回顾会议（Sprint Retrospective）</code>来总结经验教训，不断改进工作方式。</p></li></ul><figure><img src="https://tianmazuo.com/technology/engineering/process/process-08.png" alt="敏捷开发流程" tabindex="0" loading="lazy"><figcaption>敏捷开发流程</figcaption></figure><p>在我个人关于敏捷的实践过程中，见到过很多工程师、客户，包括老板都对敏捷存在不少误解，其中最大一个误解就是：<strong><mark>先进的新东西永远是好的，而且那么多大厂都成功实践了，我们也要用</mark></strong>。</p><br><h2 id="其他敏捷实践" tabindex="-1"><a class="header-anchor" href="#其他敏捷实践"><span>其他敏捷实践</span></a></h2><p>除了<code>Scrum</code>外，敏捷软件开发的方法论中还包括另外<code>极限编程</code>和<code>敏捷看板</code>。</p><p><code>极限编程（eXtreme Programming，XP）</code>在软件开发中较为知名，因为它最大的特色之一就是<code>结对编程</code>：两名工程师在同一台计算机上完成同一个功能，解决同一个问题。除了此之外，诸如<code>测试驱动开发（Testing Driven Development，TDD）</code>、短交付周期、持续集成等手段，都是<code>XP</code>的基本配置了。</p><figure><img src="https://tianmazuo.com/technology/engineering/process/process-09.png" alt="极限编程（eXtreme Programming，XP）的理念" tabindex="0" loading="lazy"><figcaption>极限编程（eXtreme Programming，XP）的理念</figcaption></figure><p>而所谓<code>敏捷看板</code>，则是一种可视化的进度标注法，它其实就是以一种非常直观的方式在白板或者计算机软件中展示<code>Sprint冲刺</code>的进度。</p><figure><img src="https://tianmazuo.com/technology/engineering/process/process-10.png" alt="敏捷看板" tabindex="0" loading="lazy"><figcaption>敏捷看板</figcaption></figure><p>其他良好的的<code>敏捷实践</code>包括但不限于<code>用户故事（User Story）</code>、<code>用户故事地图（User Story Roadmap）</code>、<code>最小可行产品（Minimum Viable Product，MVP）</code>、<code>产品原型（Prototype）</code>等。</p><p><code>用户故事（User Story）</code>其实就是<code>RUP</code>用例的另一种叫法，而<code>用户故事地图（User Story Roadmap）</code>则是将一个一个的用例以场景化的形式串联起来。</p><figure><img src="https://tianmazuo.com/technology/engineering/process/process-11.png" alt="用户故事地图（User Story Roadmap）" tabindex="0" loading="lazy"><figcaption>用户故事地图（User Story Roadmap）</figcaption></figure><p>所谓<code>最小可行产品</code>，就是只具备基本必要的业务功能的产品，以最少的时间和资源来满足用户需求，主要是用于早期阶段的市场验证和用户反馈。</p><p>例如，对于电商网站来说，其最小可行产品就是用户从注册、登录、浏览商品、加入购物车、下单开始直到确认收货这之间的一条完整的业务逻辑主线，除了这个主线之外的任何其他业务，例如退换货、评价、分享等都是“多余”的非核心业务。</p><p>将用户故事地图和最小可行产品结合起来，就会得到一份“地图”。</p><figure><img src="https://tianmazuo.com/technology/engineering/process/process-12.png" alt="用户故事地图和最小可行产品" tabindex="0" loading="lazy"><figcaption>用户故事地图和最小可行产品</figcaption></figure><p>从最小可行产品开始，直至创造出完整的产品，是一个以用户为中心，逐步完善，慢慢迭代的过程。</p><figure><img src="https://tianmazuo.com/technology/engineering/process/process-13.png" alt="逐步创造用户体验" tabindex="0" loading="lazy"><figcaption>逐步创造用户体验</figcaption></figure><p>而<code>产品原型法</code>则得益于互联网及各个互联网大厂的迅猛发展，已成为目前事实上的开发过程的标准实践之一。</p>',37),i=[r];function p(a,g){return c(),o("div",null,i)}const l=e(n,[["render",p],["__file","agile.html.vue"]]),m=JSON.parse('{"path":"/technology/engineering/process/agile.html","title":"敏捷过程","lang":"zh-CN","frontmatter":{"title":"敏捷过程","icon":"hashtag","category":["开发过程","敏捷过程"],"tag":["开发过程","敏捷过程","AGILE","SCRUM"],"date":"2022-08-27T00:00:00.000Z","isOriginal":true,"star":true,"description":"什么是敏捷过程 现实世界唯一不变的就是一直在变，软件开发也是如此，新的语言，新的方法，新的思想不断出现。 除了 按“步”就班 的瀑布模型和 唯“例”是图 的RUP这两大重量级过程以外，一些小型化、轻量级的软件过程也迅速发展起来。 因为，除了那些大型的、关乎国计民生的重量级软件项目，更多的是一些面向中小型企业乃至个人的应用。例如，某个零售店的收费系统、某...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/engineering/process/agile.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"敏捷过程"}],["meta",{"property":"og:description","content":"什么是敏捷过程 现实世界唯一不变的就是一直在变，软件开发也是如此，新的语言，新的方法，新的思想不断出现。 除了 按“步”就班 的瀑布模型和 唯“例”是图 的RUP这两大重量级过程以外，一些小型化、轻量级的软件过程也迅速发展起来。 因为，除了那些大型的、关乎国计民生的重量级软件项目，更多的是一些面向中小型企业乃至个人的应用。例如，某个零售店的收费系统、某..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/engineering/process/process-05.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"开发过程"}],["meta",{"property":"article:tag","content":"敏捷过程"}],["meta",{"property":"article:tag","content":"AGILE"}],["meta",{"property":"article:tag","content":"SCRUM"}],["meta",{"property":"article:published_time","content":"2022-08-27T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"敏捷过程\\",\\"image\\":[\\"https://tianmazuo.com/technology/engineering/process/process-05.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-06.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-07.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-08.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-09.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-10.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-11.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-12.png\\",\\"https://tianmazuo.com/technology/engineering/process/process-13.png\\"],\\"datePublished\\":\\"2022-08-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"什么是敏捷过程","slug":"什么是敏捷过程","link":"#什么是敏捷过程","children":[]},{"level":2,"title":"Agile和Scrum","slug":"agile和scrum","link":"#agile和scrum","children":[]},{"level":2,"title":"其他敏捷实践","slug":"其他敏捷实践","link":"#其他敏捷实践","children":[]}],"git":{},"readingTime":{"minutes":6.98,"words":2093},"filePathRelative":"technology/engineering/process/agile.md","localizedDate":"2022年8月27日","excerpt":"<h2>什么是敏捷过程</h2>\\n<p>现实世界唯一不变的就是一直在变，软件开发也是如此，新的语言，新的方法，新的思想不断出现。</p>\\n<p>除了 <strong><mark>按“步”就班</mark></strong> 的<code>瀑布模型</code>和 <strong><mark>唯“例”是图</mark></strong> 的<code>RUP</code>这两大重量级过程以外，一些小型化、轻量级的软件过程也迅速发展起来。</p>\\n<p>因为，除了那些大型的、关乎国计民生的重量级软件项目，更多的是一些面向中小型企业乃至个人的应用。例如，某个零售店的收费系统、某家公司的考勤系统、某个图书馆的借阅系统和某所大学的教务系统等。这些应用系统的需求和那些大系统相比完全不在一个数量级上，有的甚至连正式的需求文档都没有。</p>","autoDesc":true}');export{l as comp,m as data};
