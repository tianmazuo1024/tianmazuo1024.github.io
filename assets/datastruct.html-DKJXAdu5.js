import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,d as l}from"./app-B5m7CcSj.js";const t={},s=l(`<h2 id="数据页" tabindex="-1"><a class="header-anchor" href="#数据页"><span>数据页</span></a></h2><p>每个数据页大小固定16KB，当加载数据到内存时，都是以数据页为单位加载一页或者多页的。当数据从内存写回磁盘时，也是以数据页为单位进行的：</p><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-21.png" alt="数据页" tabindex="0" loading="lazy"><figcaption>数据页</figcaption></figure><p>可以给数据库中的表指定行存储格式。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name(column, ……) ROW_FORMAT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">COMPACT;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ALERT </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name ROW_FORMAT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">COMPACT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>每行数据在磁盘文件里存储时，其组成部分如下。</p><ul><li><p>变长字段 + NULL值列表 + 数据头 + 实际数据值。</p></li><li><p>定长字段直接存储值，不会有附加信息。</p></li></ul><br><h2 id="变长字段" tabindex="-1"><a class="header-anchor" href="#变长字段"><span>变长字段</span></a></h2><p>相邻两行数据，在磁盘里是挨着存储的，写入时保存变长字段的实际长度值，如<code>0x05</code>。</p><p>读取时，会附带读取一些字段额外信息，多个变长字段附加信息是逆序存储的，如<code>hello hell he</code>的附加信息为<code>0x02 0x04 0x05</code>。</p><br><h2 id="null值列表" tabindex="-1"><a class="header-anchor" href="#null值列表"><span>NULL值列表</span></a></h2><p>对于所有的<code>NULL</code>值，不使用字符串，而以二进制的<code>bit</code>位来存储：如果<code>bit</code>位值1说明是<code>NULL</code>，否则为0。</p><br><h2 id="数据头" tabindex="-1"><a class="header-anchor" href="#数据头"><span>数据头</span></a></h2><p>每行数据存储时，都有40个<code>bit</code>位的数据头，用来描述该行数据。</p><ul><li><p>第1、2位：预留位，无任何意义。</p></li><li><p>第3位：<code>delete_mask</code>，表示该行数据是否被删除。</p></li><li><p>第4位：<code>min_rec_mask</code>，标记B+树里每一层非叶子节点里的最小值。</p></li><li><p>第5~8位：共4位，<code>n_owned</code>，该行数据的所有者。</p></li><li><p>第9~21位：共13位，<code>heap_no</code>，标记当前行数据在记录堆里的位置。</p></li><li><p>第22~24位：共3位，<code>record_type</code>，数据类型，0为普通，1为B+树非叶子节点，2为最小值数据，3为最大值数据。</p></li><li><p>第25~40位：共16位，指向下一条数据的指针。</p></li></ul><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-22.png" alt="数据头" tabindex="0" loading="lazy"><figcaption>数据头</figcaption></figure><br><h2 id="实际数据值" tabindex="-1"><a class="header-anchor" href="#实际数据值"><span>实际数据值</span></a></h2><p>真实的数据值不是直接以字符串的方式存储在磁盘中的，而是按数据库指定的字符集编码来存储的，会在真实数据部分，加入一些隐藏字段。</p><ul><li><p><code>DB_ROW_ID</code>：唯一行标志。</p></li><li><p><code>DB_TRX_ID</code>：事务ID，指明这是哪条事务处理的数据。</p></li><li><p><code>DB_ROLL_PTR</code>：回滚指针，用来进行事务回滚。</p></li></ul><p>例如：0x08 0x05 00000101 0000000000000000000010000000000000011001 <code>00000000094C</code> <code>00000000032D</code> <code>EA000010078E</code> 616161 636320 62626262</p><p>标记部分为隐藏字段值。</p><br><h2 id="行溢出" tabindex="-1"><a class="header-anchor" href="#行溢出"><span>行溢出</span></a></h2><p>行溢出是指当一行数据大小超过数据页（16KB）大小的时，用多个数据页来存储余下的数据。</p><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-23.png" alt="行溢出" tabindex="0" loading="lazy"><figcaption>行溢出</figcaption></figure><br><h2 id="数据页的组成" tabindex="-1"><a class="header-anchor" href="#数据页的组成"><span>数据页的组成</span></a></h2><ul><li><p>文件头部：38字节。</p></li><li><p>数据页头：56字节。</p></li><li><p>最大记录&amp;最小记录：26字节。</p></li><li><p>多个数据行：不固定。</p></li><li><p>空闲区域：不固定。</p></li><li><p>数据页目录：不固定。</p></li><li><p>文件尾部：8字节。</p></li></ul><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-24.png" alt="数据页的组成" tabindex="0" loading="lazy"><figcaption>数据页的组成</figcaption></figure><p>当数据库中还没有数据时，空数据页会被加载到内存的缓存页，在缓存页中插入一条数据（缓存页与数据页是等同的），可以一直往里插入数据，直到空闲区域都耗尽，就意味着页满了。</p><p>缓存页被更新时，它在<code>LRU</code>链表、<code>flush</code>链表里的位置会不断变动，最终会被写回到磁盘。</p><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-25.png" alt="缓存页被更新" tabindex="0" loading="lazy"><figcaption>缓存页被更新</figcaption></figure><br><h2 id="表空间及数据区" tabindex="-1"><a class="header-anchor" href="#表空间及数据区"><span>表空间及数据区</span></a></h2><p><a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>创建表的时候，在磁盘上都会对应着<code>表名.ibd</code>这样的一个磁盘数据文件。表空间的磁盘里，会包含很多数据页，但由于数据页过多不便于管理，就引入了数据区（<code>extent</code>）的概念。</p><p>一个数据区管理连续的64个数据页，因此一个数据区 = 数据页（16KB） × 64 = 1MB，256个数据区被划分为一个组（256MB）。</p><p>表空间的第一组数据区的第一个数据区的前3个数据页，内容都是固定的。</p><ul><li><p><code>FSP_HDR</code>数据页：存放表空间及该组数据区的属性。</p></li><li><p><code>IBUF_BITMAP</code>数据页：存放该组数据页的所有insert buffer信息。</p></li><li><p><code>INODE</code>数据页：存放一些特殊信息。</p></li></ul><p>其他各组数据区的第一个数据区的头两个数据页，也都用来存放特殊信息。</p><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-26.png" alt="表空间及数据区" tabindex="0" loading="lazy"><figcaption>表空间及数据区</figcaption></figure><br><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ul><li><p>创建表的时候物理磁盘上就对应创建<code>表名.ibd</code>的表空间文件。</p></li><li><p>一个表空间包含若干数据页（16KB），为了便于管理，引进数据区的概念。</p></li><li><p>数据区 = 64 × 数据页，数据区组 = 256 × 数据区。</p></li><li><p>磁盘上的数据区与内存<code>Buffer Pool</code>的缓存页是完全对应的，<code>Buffer Pool</code>默认128MB，等同于128个数据区，或者半个数据区组的大小。</p></li><li><p><code>Buffer Pool</code>中有缓存页及其对应的描述文件，同时有<code>free</code>、<code>LRU</code>、<code>flush</code>这3种链表及一些元数据。</p></li><li><p>启动时，<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>会将空的数据页加载到缓存中，同时将这些缓存页组成<code>free</code>链表和<code>LRU</code>链表（通过预读机制或者全表扫描加载的缓存页都会进入到<code>LRU</code>链表的冷数据区域）。</p></li><li><p>当插入数据时，依据所在的表空间的数据区的数据页，往缓存页中写入数据。</p></li><li><p><code>free</code>链表删除相应缓存页。</p></li><li><p><code>LRU</code>链表（如果是加载该缓存页的1s后）则将处于冷数据区域的缓存页移动到热数据区域的头部。</p></li><li><p>同时<code>flush</code>链表也加入指向该缓存页描述数据块的指针节点。</p></li><li><p>后台<code>I/O</code>进程会定时扫描<code>LRU</code>链表冷数据区域的尾部及<code>flush</code>链表，将一批缓存页数据写入磁盘中。</p></li><li><p>此时这些缓存页的空间将被释放，以便存储新的数据，同时将它们加入到<code>free</code>链表中。</p></li></ul>`,47),n=[s];function o(p,d){return a(),i("div",null,n)}const r=e(t,[["render",o],["__file","datastruct.html.vue"]]),g=JSON.parse('{"path":"/technology/database/mysql/datastruct.html","title":"物理数据结构","lang":"zh-CN","frontmatter":{"title":"物理数据结构","icon":"table","category":["数据库","MySQL"],"tag":["数据库","MySQL"],"date":"2023-05-04T00:00:00.000Z","isOriginal":true,"star":true,"description":"数据页 每个数据页大小固定16KB，当加载数据到内存时，都是以数据页为单位加载一页或者多页的。当数据从内存写回磁盘时，也是以数据页为单位进行的： 数据页数据页 可以给数据库中的表指定行存储格式。 每行数据在磁盘文件里存储时，其组成部分如下。 变长字段 + NULL值列表 + 数据头 + 实际数据值。 定长字段直接存储值，不会有附加信息。 变长字段 相邻...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/database/mysql/datastruct.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"物理数据结构"}],["meta",{"property":"og:description","content":"数据页 每个数据页大小固定16KB，当加载数据到内存时，都是以数据页为单位加载一页或者多页的。当数据从内存写回磁盘时，也是以数据页为单位进行的： 数据页数据页 可以给数据库中的表指定行存储格式。 每行数据在磁盘文件里存储时，其组成部分如下。 变长字段 + NULL值列表 + 数据头 + 实际数据值。 定长字段直接存储值，不会有附加信息。 变长字段 相邻..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/database/mysql/mysql-21.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2023-05-04T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"物理数据结构\\",\\"image\\":[\\"https://tianmazuo.com/technology/database/mysql/mysql-21.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-22.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-23.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-24.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-25.png\\",\\"https://tianmazuo.com/technology/database/mysql/mysql-26.png\\"],\\"datePublished\\":\\"2023-05-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"数据页","slug":"数据页","link":"#数据页","children":[]},{"level":2,"title":"变长字段","slug":"变长字段","link":"#变长字段","children":[]},{"level":2,"title":"NULL值列表","slug":"null值列表","link":"#null值列表","children":[]},{"level":2,"title":"数据头","slug":"数据头","link":"#数据头","children":[]},{"level":2,"title":"实际数据值","slug":"实际数据值","link":"#实际数据值","children":[]},{"level":2,"title":"行溢出","slug":"行溢出","link":"#行溢出","children":[]},{"level":2,"title":"数据页的组成","slug":"数据页的组成","link":"#数据页的组成","children":[]},{"level":2,"title":"表空间及数据区","slug":"表空间及数据区","link":"#表空间及数据区","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{},"readingTime":{"minutes":4.91,"words":1472},"filePathRelative":"technology/database/mysql/datastruct.md","localizedDate":"2023年5月4日","excerpt":"<h2>数据页</h2>\\n<p>每个数据页大小固定16KB，当加载数据到内存时，都是以数据页为单位加载一页或者多页的。当数据从内存写回磁盘时，也是以数据页为单位进行的：</p>\\n<figure><img src=\\"https://tianmazuo.com/technology/database/mysql/mysql-21.png\\" alt=\\"数据页\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>数据页</figcaption></figure>\\n<p>可以给数据库中的表指定行存储格式。</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> CREATE</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> TABLE</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> table_name(column, ……) ROW_FORMAT</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">COMPACT;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ALERT </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">TABLE</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> table_name ROW_FORMAT</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">COMPACT;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,g as data};
