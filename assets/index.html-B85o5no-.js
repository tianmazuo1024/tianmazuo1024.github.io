import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o,d as a}from"./app-B5m7CcSj.js";const i={},r=a('<h2 id="真实的业务场景" tabindex="-1"><a class="header-anchor" href="#真实的业务场景"><span>真实的业务场景</span></a></h2><p>订单履约系统是所有电商公司业务核心中的核心，一般来说，它的整体业务流程、核心业务流程和非核心业务流程整体上都是这样子的的。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-01.png" alt="电商系统整体业务流程" tabindex="0" loading="lazy"><figcaption>电商系统整体业务流程</figcaption></figure><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-02.png" alt="电商订单履约系统业务流程" tabindex="0" loading="lazy"><figcaption>电商订单履约系统业务流程</figcaption></figure><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-03.png" alt="电商非核心业务流程" tabindex="0" loading="lazy"><figcaption>电商非核心业务流程</figcaption></figure><p>在应用规模和用户量都还不大的情况下，即使是非常简单的系统架构，也能轻松处理大量的查询请求。</p><p>虽然单节点架构不如分布式那么能扛压，也不像分布式那样可以伸缩自如，但也不要低估了它。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-04.png" alt="单机也可以轻松处理大量请求" tabindex="0" loading="lazy"><figcaption>单机也可以轻松处理大量请求</figcaption></figure><p>在现在计算机硬件配置越来越豪华的情况下，即使单节点的计算机，也能轻松应对上万并发的请求。优化应该是自然而言发生的，不需要强行揠苗助长，给自己找麻烦。</p><p>当订单支付成功后，需要执行一系列的后续业务操作，一般它们包括但不限于下面这些。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-05.png" alt="订单支付成功需要执行的后续业务操作" tabindex="0" loading="lazy"><figcaption>订单支付成功需要执行的后续业务操作</figcaption></figure><ul><li><p>回调通知：和用户系统挂钩，通知用户支付成功，以及商家开始拣货、打包、发货等后续信息。</p></li><li><p>扣减库存：向仓储管理系统（WMS）发消息，锁定并扣除有效库存，否则通过回调通知用户付款失败，返还资金。</p></li><li><p>累计积分：和运营系统挂钩，改变用户积分及其相应等级、风险评估等级等相关数据。</p></li><li><p>发放红包：和促销系统挂钩，改变用户红包账户余额并发送通知。</p></li><li><p>推送通知：承接所有系统的所有接收和发送的消息。</p></li><li><p>更新状态：更新所有交易相关的业务数据，并持久化到数据库中。</p></li></ul><p>以上这些需要都在1~2秒内完成。而如果用户不满意，那么刚才那些动作都要重新再来一遍，只不过过程是相反的。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-06.png" alt="用户退货退款需要执行的后续业务操作" tabindex="0" loading="lazy"><figcaption>用户退货退款需要执行的后续业务操作</figcaption></figure><p>过去很多初创公司的系统都是以同步的方式执行各种业务功能和用户请求的，这种方式即使网络很慢，效率很低，也都还在可控范围。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-07.png" alt="系统同步调用" tabindex="0" loading="lazy"><figcaption>系统同步调用</figcaption></figure><p>但如果是调用外部系统就麻烦了。</p><ul><li><p>如果第三方系统支付或退款异常，或者<code>卡住</code>了，该怎么办？</p></li><li><p>如果用户下单后迟迟不付款怎么办？</p></li><li><p>如果第三方仓储系统崩溃了，订单系统要等它恢复了才能继续往下执行吗？</p></li></ul><p>诸如此类的问题有很多，每一个都有可能造成系统无限期地等下去。</p><br><h2 id="异步与消息队列" tabindex="-1"><a class="header-anchor" href="#异步与消息队列"><span>异步与消息队列</span></a></h2><p>系统除了以同步的方式执行，还可以以另一种称为<code>异步</code>的方式执行。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-08.png" alt="系统异步调用" tabindex="0" loading="lazy"><figcaption>系统异步调用</figcaption></figure><p>例如，在上面的图中，<code>系统A</code>不必等<code>系统B</code>有了响应再继续往下执行，而是向<code>系统B</code>发了个消息，相当于说：“交给你了，我先走了”，然后就直接向用户报告结果去了。</p><p>当到用户真的想看那个结果的时候，<code>系统A</code>再以回调或者接口调用的方式从<code>系统B</code>那里拿到用户想要的结果。</p><p>这相当于打了一个时间差。</p><p>所以，<code>系统A</code>向<code>系统B</code>发送消息的那个组件，就叫做<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列（Message Queue）</a>，或者简称<code>MQ</code>。</p><p>有<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列</a>以后，<code>系统A</code>和<code>系统B</code>之间的交互方式有些不同了。</p><ul><li><p><code>系统A</code>不必等到<code>系统B</code>有了结果再执行下一步，而是可以先接着往下执行，等<code>系统B</code>有了执行完了再回过头来拿结果。</p></li><li><p>通过引入新的<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列</a>组件，不但不会拖累各个自身的执行效率，反而还实现了两个系统之间的<a href="https://baike.baidu.com/item/%E8%A7%A3%E8%80%A6" target="_blank" rel="noopener noreferrer">解耦</a>，让它们之间不再相互影响，或将彼此的影响程度降到最低。</p></li><li><p>因为<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列</a>自己有固定的消息消费速率（也就是一段时间内消费消息的速度），即使以再快的速度向它发送消息，但它的消费速率是不会变的。所以，实际上，它还起到了一个<a href="https://baike.baidu.com/item/%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B0" target="_blank" rel="noopener noreferrer">流量削峰</a>的作用。</p></li></ul><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-09.png" alt="流量削峰" tabindex="0" loading="lazy"><figcaption>流量削峰</figcaption></figure><p>通过<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列</a>，那些超过系统处理能力的请求，将会像水池中的水那样被<code>蓄起来</code>，待到系统压力不那么有能力处理它们时再来执行，这也相当于打了一个时间差。这种方式虽然延长了请求响应的时间，但总比直接丢弃它们要好。</p><p>目前主流的<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列</a>中间件有下面几种。</p><table><thead><tr><th style="text-align:center;">对比项</th><th style="text-align:center;">性能</th><th style="text-align:center;">数据</th><th style="text-align:center;">功能</th><th style="text-align:left;">优势</th><th style="text-align:left;">劣势</th><th style="text-align:center;">适用场景</th></tr></thead><tbody><tr><td style="text-align:center;">Kafka</td><td style="text-align:center;">高</td><td style="text-align:center;">可能丢失</td><td style="text-align:center;">单一</td><td style="text-align:left;">超高吞吐量</td><td style="text-align:left;">允许数据丢失<br>功能过于简单<br>强制数据完整时性能下降</td><td style="text-align:center;">日志采集</td></tr><tr><td style="text-align:center;">RocketMQ</td><td style="text-align:center;">高</td><td style="text-align:center;">保证不丢失</td><td style="text-align:center;">多</td><td style="text-align:left;">功能强大<br>可视化管理<br>一线大厂都在用<br>高并发能力极强<br>支持数据0丢失的配置<br>Java语言开发，便于改造</td><td style="text-align:left;">官方文档简单</td><td style="text-align:center;">大中小型公司都适用</td></tr><tr><td style="text-align:center;">RabbitMQ</td><td style="text-align:center;">低</td><td style="text-align:center;">保证不丢失</td><td style="text-align:center;">较多</td><td style="text-align:left;">功能强大<br>可视化管理<br>落地案例多</td><td style="text-align:left;">高并发能力较弱<br>erlang语言开发，不便于改造</td><td style="text-align:center;">中小型公司，无超高并发场景</td></tr></tbody></table>',33),n=[r];function c(l,d){return o(),e("div",null,n)}const g=t(i,[["render",c],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/technology/middleware/rocketmq/","title":"什么是MQ（消息队列）？","lang":"zh-CN","frontmatter":{"title":"什么是MQ（消息队列）？","icon":"envelope-circle-check","category":["中间件","RocketMQ"],"tag":["中间件","RocketMQ"],"date":"2023-02-18T00:00:00.000Z","isOriginal":true,"star":true,"description":"真实的业务场景 订单履约系统是所有电商公司业务核心中的核心，一般来说，它的整体业务流程、核心业务流程和非核心业务流程整体上都是这样子的的。 电商系统整体业务流程电商系统整体业务流程 电商订单履约系统业务流程电商订单履约系统业务流程 电商非核心业务流程电商非核心业务流程 在应用规模和用户量都还不大的情况下，即使是非常简单的系统架构，也能轻松处理大量的查询...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/middleware/rocketmq/"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"什么是MQ（消息队列）？"}],["meta",{"property":"og:description","content":"真实的业务场景 订单履约系统是所有电商公司业务核心中的核心，一般来说，它的整体业务流程、核心业务流程和非核心业务流程整体上都是这样子的的。 电商系统整体业务流程电商系统整体业务流程 电商订单履约系统业务流程电商订单履约系统业务流程 电商非核心业务流程电商非核心业务流程 在应用规模和用户量都还不大的情况下，即使是非常简单的系统架构，也能轻松处理大量的查询..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"RocketMQ"}],["meta",{"property":"article:published_time","content":"2023-02-18T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是MQ（消息队列）？\\",\\"image\\":[\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-01.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-02.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-03.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-04.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-05.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-06.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-07.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-08.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-09.png\\"],\\"datePublished\\":\\"2023-02-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"真实的业务场景","slug":"真实的业务场景","link":"#真实的业务场景","children":[]},{"level":2,"title":"异步与消息队列","slug":"异步与消息队列","link":"#异步与消息队列","children":[]}],"git":{},"readingTime":{"minutes":5.16,"words":1548},"filePathRelative":"technology/middleware/rocketmq/README.md","localizedDate":"2023年2月18日","excerpt":"<h2>真实的业务场景</h2>\\n<p>订单履约系统是所有电商公司业务核心中的核心，一般来说，它的整体业务流程、核心业务流程和非核心业务流程整体上都是这样子的的。</p>\\n<figure><img src=\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-01.png\\" alt=\\"电商系统整体业务流程\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>电商系统整体业务流程</figcaption></figure>\\n<figure><img src=\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-02.png\\" alt=\\"电商订单履约系统业务流程\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>电商订单履约系统业务流程</figcaption></figure>","autoDesc":true}');export{g as comp,s as data};
