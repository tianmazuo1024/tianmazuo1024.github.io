import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as a,d as t}from"./app-B5m7CcSj.js";const c={},d=t('<h2 id="扩容的问题" tabindex="-1"><a class="header-anchor" href="#扩容的问题"><span>扩容的问题</span></a></h2><p>在<a href="https://shardingsphere.apache.org/" target="_blank" rel="noopener noreferrer">ShardingSphere</a>中间件的<code>分库分表</code>方案中，<code>Hash</code>取模和<code>Range</code>占了绝大多数。</p><p>如果业务发展非常快，可能在初次<code>分库分表</code>后过不了多久就要考虑开始扩容了。例如，原来只分了4个库，但是现在要在原来的基础上再分4个，变成8个库。</p><ul><li><p>当采用<code>Datetime Range（日期时间范围）</code>进行<code>分库分表</code>时，一般不会有扩容问题，因为时间天然就是有序且易分割的。例如按月划分的话，就很容易划分为12个库，保存每年相同月份的数据。</p></li><li><p>当采用<code>Region Range（地区范围）</code>进行<code>分库分表</code>时，需要对原有数据进行迁移。例如，如果之前按照<code>华中</code>地区来划分的话，现在需要进一步细分为省份，那么就需要将所有的<code>华中</code>数据再次拆分到各个对应的省份数据库中。</p></li></ul><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-10.png" alt="按照地区分库分表" tabindex="0" loading="lazy"><figcaption>按照地区分库分表</figcaption></figure><ul><li>当采用<code>Hash</code>取模进行分库分表时，一般情况下，扩容后都会有一半的数据迁移到新数据库中。</li></ul><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-11.png" alt="Has取模分库分表" tabindex="0" loading="lazy"><figcaption>Has取模分库分表</figcaption></figure><br><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>扩容的解决方案无非就是两种：<code>停机维护</code>和<code>在线升级</code>。</p><ul><li><p><code>停机维护</code>指的是对外发布停机公告，然后在停机时间内完成系统的升级扩容。这种方式方便且安全，几乎没有什么后遗症，但最大的问题是要停止业务服务，这可能会给组织带来很大的损失。虽然<code>停机维护</code>会稍显从容一点，但风险和压力一点也不小，它需要精确规划好每一步需要采取的行动。下面是典型的理想化的<code>停机维护</code>过程。</p><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-12.png" alt="理想化的停机维护过程" tabindex="0" loading="lazy"><figcaption>理想化的停机维护过程</figcaption></figure><p>通过自研的业务中间件配合<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>，将准备扩容的数据库中的数据全部都读取出来，然后再通过<a href="https://shardingsphere.apache.org/" target="_blank" rel="noopener noreferrer">ShardingSphere</a>对全部数据进行再次进行<code>Hash</code>取模运算。</p><p>这幅图中忽略了很多内容，例如，准备扩容的数据如何读取到<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>？业务中间件是否需要采取集群模式运行？有没有<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener noreferrer">分布式事务</a>问题？重新分库分表后对原业务有无影响？如何保证每一条数据都被同步？万一扩容中出现意外导致失败，如何保障数据完整性？是全部重来还是有容错手段？......等等诸如此类的问题。</p></li><li><p><code>在线升级</code>指的是业务依旧照常进行，扩容升级同步进行。这种方式非常考验研发团队的整体能力和配合协调，可能一步搞错都会导致升级失败，最终也会给组织带来很大的损失，而且还可能会留有一些潜在的后遗症。例如，某条数据未做同步彻底，导致客户无法查询到对应订单等问题。</p><p>至于<code>在线升级</code>则更复杂，其总体过程是这样的。</p><ul><li><p>新增6个库作为从库，这6个库中有3个是同步时备份用的。用它来保证业务的不中断。同时为每个数据表都添加一个<code>synctime</code>字段，这个字段需要由数据库自动更新。例如，它可以这样定义：<code>synctime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;</code>。</p><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-13.png" alt="设置三个从库" tabindex="0" loading="lazy"><figcaption>设置三个从库</figcaption></figure><p>因为之前是按3取模来划分的数据库，所以尾数为<code>0</code>和尾数为<code>3</code>的订单都在扩容前的<code>ds0</code>库中。也就是说，如果按照6进行取模，那么<code>ds0</code>会被分为<code>ds0</code>和<code>ds3</code>两个库，<code>ds0</code>的数据要分一半到<code>ds3</code>里面去，其他<code>ds1</code>和<code>ds2</code>的情况依此类推。</p><p>但在新的分片算法（也就是按6取模）生效前，<code>ds0</code>和<code>ds3</code>中的数据经过同步后，是完全一致的。</p></li><li><p>修改业务代码，让它按照新的算法执行<code>分库分表</code>。除了<code>读取（R）</code>操作，其他的<code>创建（C）</code>、<code>更新（U）</code>和<code>删除（D）</code>操作都通过<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>来完成，但是此时不要消费任何<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>中的消息。另外，也就是虽然有操作，但只是把这些业务消息给<code>存储</code>起来。</p><p>为了保障业务不中断，还需要业务系统同时操作之前同步的<code>备份库</code>。此时业务系统重新发布并上线运行（设定一个时间点，例如<code>2023-01-01 00:00:00</code>，后面需要它作为参照）。</p><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-14.png" alt="修改业务系统并存储、和这三类操作" tabindex="0" loading="lazy"><figcaption>修改业务系统并存储<code>Create</code>、<code>Update</code>和<code>Delete</code>这三类操作</figcaption></figure></li><li><p>关闭主从同步，切换到真正的业务数据库，同时让业务系统在指定的时间点开始消费之前在<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>中存储的消息（注意消息积压问题，否则一上线就可能导致崩溃）。此时所有的数据都会按照设定的新规则执行<code>分库分表</code>。</p><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-15.png" alt="切换到真正的业务数据库并开始消费消息" tabindex="0" loading="lazy"><figcaption>切换到真正的业务数据库并开始消费消息</figcaption></figure></li><li><p>因为执行新的<code>分库分表</code>规则后，表中的<code>synctime</code>字段必然会自动更新，所以可以以此为依据，删除所有早于它的冗余数据。</p><p>例如，尾号为<code>3</code>的订单现在仍然存在于<code>ds0</code>中，可以通过<code>SQL</code>语句（<code>DELETD FROM t_order WHERE id % 6 = 3 AND synctime &lt; &#39;2023-01-01 00:00:00&#39;</code>）删除它。同样的道理，可以用这种方法删除<code>ds3</code>中的冗余数据。</p></li></ul><p>经过以上步骤，基本上大头就搞定了。</p></li></ul><p><code>停机维护</code>和<code>在线升级</code>这两种方式并非绝对的，因为<code>停机维护</code>中可能会有部分服务仍然对外提供服务，然后在线升级。而<code>在线升级</code>中也可能会有某些集群中的服务执行轮换停机。</p><p>而且上面的方案也基本是一个纯粹理想的简化版，实际上执行起来，一定会涉及到若干业务集群、若干内外系统交互、若干团队协作，是<code>停机维护</code>还是<code>在线升级</code>，是全部一起还是轮换进行，是<a href="https://baike.baidu.com/item/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83" target="_blank" rel="noopener noreferrer">灰度发布</a>还是<a href="https://baike.baidu.com/item/%E8%93%9D%E7%BB%BF%E9%83%A8%E7%BD%B2" target="_blank" rel="noopener noreferrer">蓝绿发布</a>，都是需要仔细斟酌和考量的。</p><p>总之，这种<code>分库分表</code>的扩容工作绝不是哪一个或哪几个人可以独立搞定的，面对这种程度的复杂度和挑战性，除了发挥团队的力量外，个人无能为力。</p>',14),n=[d];function r(i,p){return a(),o("div",null,n)}const h=e(c,[["render",r],["__file","extend.html.vue"]]),l=JSON.parse('{"path":"/technology/database/sharding/extend.html","title":"二次扩容的问题和方案","lang":"zh-CN","frontmatter":{"title":"二次扩容的问题和方案","icon":"cubes-stacked","category":["数据库","分库分表"],"tag":["数据库","分库分表","ShardingSphere"],"date":"2023-06-15T00:00:00.000Z","isOriginal":true,"star":true,"description":"扩容的问题 在ShardingSphere中间件的分库分表方案中，Hash取模和Range占了绝大多数。 如果业务发展非常快，可能在初次分库分表后过不了多久就要考虑开始扩容了。例如，原来只分了4个库，但是现在要在原来的基础上再分4个，变成8个库。 当采用Datetime Range（日期时间范围）进行分库分表时，一般不会有扩容问题，因为时间天然就是有序...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/database/sharding/extend.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"二次扩容的问题和方案"}],["meta",{"property":"og:description","content":"扩容的问题 在ShardingSphere中间件的分库分表方案中，Hash取模和Range占了绝大多数。 如果业务发展非常快，可能在初次分库分表后过不了多久就要考虑开始扩容了。例如，原来只分了4个库，但是现在要在原来的基础上再分4个，变成8个库。 当采用Datetime Range（日期时间范围）进行分库分表时，一般不会有扩容问题，因为时间天然就是有序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/database/sharding/sharding-10.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"分库分表"}],["meta",{"property":"article:tag","content":"ShardingSphere"}],["meta",{"property":"article:published_time","content":"2023-06-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二次扩容的问题和方案\\",\\"image\\":[\\"https://tianmazuo.com/technology/database/sharding/sharding-10.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-11.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-12.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-13.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-14.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-15.png\\"],\\"datePublished\\":\\"2023-06-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"扩容的问题","slug":"扩容的问题","link":"#扩容的问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}],"git":{},"readingTime":{"minutes":5.8,"words":1740},"filePathRelative":"technology/database/sharding/extend.md","localizedDate":"2023年6月15日","excerpt":"<h2>扩容的问题</h2>\\n<p>在<a href=\\"https://shardingsphere.apache.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ShardingSphere</a>中间件的<code>分库分表</code>方案中，<code>Hash</code>取模和<code>Range</code>占了绝大多数。</p>\\n<p>如果业务发展非常快，可能在初次<code>分库分表</code>后过不了多久就要考虑开始扩容了。例如，原来只分了4个库，但是现在要在原来的基础上再分4个，变成8个库。</p>\\n<ul>\\n<li>\\n<p>当采用<code>Datetime Range（日期时间范围）</code>进行<code>分库分表</code>时，一般不会有扩容问题，因为时间天然就是有序且易分割的。例如按月划分的话，就很容易划分为12个库，保存每年相同月份的数据。</p>\\n</li>\\n<li>\\n<p>当采用<code>Region Range（地区范围）</code>进行<code>分库分表</code>时，需要对原有数据进行迁移。例如，如果之前按照<code>华中</code>地区来划分的话，现在需要进一步细分为省份，那么就需要将所有的<code>华中</code>数据再次拆分到各个对应的省份数据库中。</p>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,l as data};
