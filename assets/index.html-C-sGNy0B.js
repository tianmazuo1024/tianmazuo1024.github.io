import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,d as r}from"./app-B5m7CcSj.js";const n={},t=r(`<h2 id="加密与解密" tabindex="-1"><a class="header-anchor" href="#加密与解密"><span>加密与解密</span></a></h2><p>网络安全是最近几年越来越被社会和国家高层关注的问题，比如<a href="https://zh.wikipedia.org/wiki/%E7%A8%9C%E9%8F%A1%E8%A8%88%E7%95%AB" target="_blank" rel="noopener noreferrer">棱镜门事件</a>、<a href="https://zh.wikipedia.org/wiki/%E4%B9%8C%E4%BA%91%E7%BD%91%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">乌云网</a>、<a href="https://finance.sina.cn/tech/2022-05-03/detail-imcwiwst5359841.d.html" target="_blank" rel="noopener noreferrer">摄像头偷拍</a>等事件的不断曝光，也让普罗大众知道了这一阳光下的灰暗地带。</p><p><code>外行看热闹，内行看门道</code>——<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener noreferrer">密码学</a>是整个网络安全的底层支撑，就好比人离不开呼吸，没有它们，信息安全无从谈起。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener noreferrer">密码学</a>，顾名思义，就是研究编制密码和破译密码的学问，以前经常在谍战片中看到摩尔斯码，就是一种密码学的应用。</p><p>迄今为止，有三种不同的<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">加密算法</a>（以及<code>伴生</code>的对应的<code>解密算法</code>）。</p><br><h2 id="对称加密算法" tabindex="-1"><a class="header-anchor" href="#对称加密算法"><span>对称加密算法</span></a></h2><p>所谓<a href="https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">对称加密算法</a>，就是信息的收发双方事先都知道密钥和加密规则，例如，谍战片中的接头暗号和密码本就是典型的对称加密工具，它的通用过程就像下面这样。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-01.png" alt="对称加密算法的一般加密过程" tabindex="0" loading="lazy"><figcaption>对称加密算法的一般加密过程</figcaption></figure><p><a href="https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">对称加密算法</a>有多种不同的实现方式，其中常用的是<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener noreferrer">DES</a>、<a href="https://zh.wikipedia.org/wiki/3DES" target="_blank" rel="noopener noreferrer">3DES</a>和<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener noreferrer">AES</a>。</p><h3 id="des" tabindex="-1"><a class="header-anchor" href="#des"><span>DES</span></a></h3><p><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener noreferrer">DES</a>全称是<code>Data Encryption Standard（数据加密标准）</code>，广泛应用于POS、ATM、收费站等金融领域。</p><p><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener noreferrer">DES</a>是一种分组加密算法：每次处理固定长度的数据段，分组大小是64位，它的安全性依赖于<code>混淆</code>与<code>扩散</code>。</p><ul><li><p><code>混淆</code>：隐藏任何明文同密文、或者密钥之间的关系。</p></li><li><p><code>扩散</code>：使明文和密钥一起组成尽可能多的密文。</p></li></ul><p><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener noreferrer">DES</a>的关键就是从给定的初始密钥中得到16个子密钥，然后将每个子密钥按照顺序（1-16）以一系列的位操作施加于数据上，每个子密钥一次，一共重复16次，每一次迭代称之为一轮，其过程如下图。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-02.png" alt="DES的一般加密过程" tabindex="0" loading="lazy"><figcaption>DES的一般加密过程</figcaption></figure><h3 id="_3des" tabindex="-1"><a class="header-anchor" href="#_3des"><span>3DES</span></a></h3><p><a href="https://zh.wikipedia.org/wiki/3DES" target="_blank" rel="noopener noreferrer">3DES</a>全称<code>Triple DES（三倍DES）</code>，是从<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener noreferrer">DES</a>向<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener noreferrer">AES</a>过渡的算法，使用3条56位的密钥对数据进行3次加密，是<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener noreferrer">DES</a>的升级版。</p><p><a href="https://zh.wikipedia.org/wiki/3DES" target="_blank" rel="noopener noreferrer">3DES</a>算法比较有意思，因为它的<code>加密</code>和<code>解密</code>是混在一起的。</p><ul><li><p><code>加密过程</code>：<code>加密</code> -&gt; <code>解密</code> -&gt; <code>加密</code>（不全是加密）。</p></li><li><p><code>解密过程</code>：<code>解密</code> -&gt; <code>加密</code> -&gt; <code>解密</code>（不全是解密）。</p></li></ul><h3 id="aes" tabindex="-1"><a class="header-anchor" href="#aes"><span>AES</span></a></h3><p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener noreferrer">AES</a>全称<code>Advanced Encryption Standard（高级加密标准）</code>，微信小程序的加密传输就是用的它。</p><p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener noreferrer">AES</a>的加密过程大体上可以分为<code>字节代换</code>、<code>行位移</code>、<code>列混合</code>和<code>轮密钥加</code>这几个步骤，把<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener noreferrer">DES</a>的<code>混淆</code>和<code>扩散</code>效果最大化。</p><p>所谓<code>轮密钥加（AddRoundKey）</code>，指的是将当前轮次的轮密钥与数据块进行异或运算，将密钥信息融入到加密过程中，确保了每轮加密都使用不同的密钥，在经过多轮处理后输出密文数据。</p><p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener noreferrer">AES</a>也采取分组的方式，把一段话分成几段，每一段分别加密，然后再把它们拼接到一起成为密文。</p><p>而且密钥和明文一样，也会被分组，每次都将密钥中的一组数据加入到密文中执行<code>轮密钥加（AddRoundKey）</code>。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-03.png" alt="AES的一般加密过程" tabindex="0" loading="lazy"><figcaption>AES的一般加密过程</figcaption></figure><br><h2 id="非对称加密算法" tabindex="-1"><a class="header-anchor" href="#非对称加密算法"><span>非对称加密算法</span></a></h2><p>和<a href="https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">对称加密算法</a>不同，在<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">非对称加密算法</a>中，信息的收发双方需要各持有两个密钥：<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>和<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>和<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>是成对出现的：<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>必须公开，而<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>必须保密。</p><p>打一个不准确的比方，<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">非对称加密算法</a>有点像开<code>保险柜</code>一样，柜门上的<code>密码旋钮</code>（对应<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>）谁都可以看到，但除了使用拥有者的密码（对应<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>）外，理论上谁都打不开它。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-04.png" alt="保险柜" tabindex="0" loading="lazy"><figcaption>保险柜</figcaption></figure><p><code>发送者A</code>用<code>接收者B</code>的<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>加密，<code>接收者B</code>用自己的<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>解密。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-05.png" alt="非对称加密算法的一般加密过程" tabindex="0" loading="lazy"><figcaption>非对称加密算法的一般加密过程</figcaption></figure><p>常用的<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">非对称加密算法</a>包括<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">RSA</a>/<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">DSA</a>、<a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" rel="noopener noreferrer">ECDSA</a>/<a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener noreferrer">ECC</a>和<a href="https://en.wikipedia.org/wiki/PKCS" target="_blank" rel="noopener noreferrer">PKCS</a>。</p><h3 id="rsa" tabindex="-1"><a class="header-anchor" href="#rsa"><span>RSA</span></a></h3><p><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">RSA</a>是一种非常常见的<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">非对称加密算法</a>，它的加密和解密算法也都是公开的，其运行机制用一句简单的话来说就是<code>不可能通过公钥推导出私钥</code>，<code>支付宝</code>的支付接口调用使用的就是它。</p><p>这种<code>不可能通过公钥推导出私钥</code>的机制，是建立在大整数因子分解的困难性上的，其安全性能够抵抗目前为止已知的绝大多数密码攻击。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-06.png" alt="RSA的一般加密过程" tabindex="0" loading="lazy"><figcaption>RSA的一般加密过程</figcaption></figure><p>可以看到，如果要得到一个能够产生<code>1024</code>位或<code>2048</code>位二进制的质数乘积，参与运算的两个质数一定都是天文数字。</p><h3 id="dsa" tabindex="-1"><a class="header-anchor" href="#dsa"><span>DSA</span></a></h3><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">DSA</a>和<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">RSA</a>的主要不同在于它不用作加密和解密，只用作签名，银行自助柜台、金融APP上的签名软件用的就是它。</p><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">DSA</a>签名生成速度很快，但验证速度比较慢，加密时更慢，解密却很快，这一点与<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">RSA</a>相反，其安全性与<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">RSA</a>差不多。</p><p>实际上，<a href="https://www.openssh.com/" target="_blank" rel="noopener noreferrer">OpenSSH</a><code>7.0</code>及以上版本默认禁用了<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">DSA</a>算法。</p><h3 id="ecc" tabindex="-1"><a class="header-anchor" href="#ecc"><span>ECC</span></a></h3><p><a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener noreferrer">ECC</a>全称<code>Elliptic curve cryptography（椭圆曲线加密）</code>，<a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%9D%8A" target="_blank" rel="noopener noreferrer">以太坊</a>的<a href="https://zh.wikipedia.org/zh-hans/%E6%AF%94%E7%89%B9%E5%B8%81" target="_blank" rel="noopener noreferrer">比特币</a>地址就是用它生成的，<a href="https://zh.wikipedia.org/zh-hans/%E6%AF%94%E7%89%B9%E5%B8%81" target="_blank" rel="noopener noreferrer">比特币</a>椭圆曲线采用的是<a href="https://en.bitcoin.it/wiki/Secp256k1" target="_blank" rel="noopener noreferrer">Secp256k1</a>算法（<code>y2 = x3 + 7</code>）。</p><p><a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener noreferrer">ECC</a>的数学基础是<a href="https://zh.wikipedia.org/wiki/%E9%BB%8E%E6%9B%BC%E5%87%A0%E4%BD%95" target="_blank" rel="noopener noreferrer">黎曼几何</a>中的<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%A9%B7%E8%BF%9C%E7%82%B9" target="_blank" rel="noopener noreferrer">无穷远点</a>性质和<a href="https://en.wikipedia.org/wiki/Formal_group_law" target="_blank" rel="noopener noreferrer">群率（GROUP LAW）公式</a>。</p><p>可以通过<a href="https://openssl.org/" target="_blank" rel="noopener noreferrer">OpenSSL</a>来演示<a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener noreferrer">ECC</a>的加密与解密过程。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; mkdir /home/work/ecc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cd /home/work/ecc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第一步：生成私钥并输出为DER格式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl ecparam -name secp256k1 -genkey &gt; private.pem</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl ec -in private.pem -outform DER | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">head</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xxd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">private.der</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第二步：生成公钥</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl ec -in private.pem -pubout -outform DER | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 65</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xxd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 65</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">public.der</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看结果（未压缩公钥 = 前缀04 + x坐标 + y坐标，压缩公钥 = 前缀03 + x(如果y是奇数) 或 前缀02 + x(如果y是偶数)）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cat public.der</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第三步：先SHA256，再进行RMD160运算</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl sha256 public.der</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 保存结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; echo 8674a407487bb7808bbb2c1ac12603f1f3a480e98c01abbebd03477c5179f974 &gt; public_sha256.der</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进行RMD160运算</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl ripemd160 public_sha256.der</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 保存结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; echo 9870db0ccf40cfd970b503fb031c889d089a4cd4 &gt; public_rmd160.der</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第四步：加上Bitcoin地址前缀（https://en.bitcoin.it/wiki/List_of_address_prefixes）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi public_rmd160.der</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在前面增加00并保存退出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9870db0ccf40cfd970b503fb031c889d089a4cd4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cat public_rmd160.der</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">009870db0ccf40cfd970b503fb031c889d089a4cd4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第五步：执行两次SHA256，取前8位作为校验和</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl sha256 public_rmd160.der</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; echo c6349f1cb358dcd7af0dc8fd4cf7aa82293142eea7d97f45c83e86595ac22c04 &gt; public_sha256.der</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl sha256 public_sha256.der</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 取前八位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; 9550d445</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第六步：合并第四步和第五步的结果</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第四步结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cat public_rmd160.der</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">009870db0ccf40cfd970b503fb031c889d089a4cd4</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第五步结果</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9550d445</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 结果合并</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; echo 009870db0ccf40cfd970b503fb031c889d089a4cd49550d445 &gt; public_result.der</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第七步：执行Base59编码（这是一种独特的编码方式，是Base64的变形，主要用于比特币的钱包地址）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 出于演示目的，仅用Base64执行编码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl base64 -in public_result.der</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MDA5ODcwZGIwY2NmNDBjZmQ5NzBiNTAzZmIwMzFjODg5ZDA4OWE0Y2Q0OTU1MGQ0NDUK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小常识：在<a href="https://zh.wikipedia.org/zh-hans/%E6%AF%94%E7%89%B9%E5%B8%81" target="_blank" rel="noopener noreferrer">比特币</a>系统中，<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>能得<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>，<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>能得到<code>钱包地址</code>，也就是<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a> -&gt; <a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a> -&gt; <code>钱包地址</code>，但反向是不行的。</p><h3 id="pkcs" tabindex="-1"><a class="header-anchor" href="#pkcs"><span>PKCS</span></a></h3><p><a href="https://en.wikipedia.org/wiki/PKCS" target="_blank" rel="noopener noreferrer">PKCS</a>全称<code>Public-Key Cryptography Standards（公钥加密标准）</code>，是由<a href="https://zh.wikipedia.org/wiki/RSA_%E5%AE%89%E5%85%A8" target="_blank" rel="noopener noreferrer">RSA公司</a>设计、发布的一系列安全标准，主要用在证书申请、更新、作废、数字签名和数字信封等的创建上，目前苹果的<code>IOS</code>使用的就是<a href="https://zh.wikipedia.org/wiki/PKCS_12" target="_blank" rel="noopener noreferrer">PKCS 12</a>标准的证书。</p><p>依旧可以用<a href="https://openssl.org/" target="_blank" rel="noopener noreferrer">OpenSSL</a>来生成<a href="https://en.wikipedia.org/wiki/PKCS" target="_blank" rel="noopener noreferrer">PKCS</a>证书。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; mkdir /home/work/pkcs12</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cd /home/work/pkcs12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第一步：生成密钥</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 生成一个1024位的私钥，保存在rsa_private_key.pem里</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl genrsa -out rsa_private_key.pem 1024</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 通过私钥生产公钥，保存在rsa_public_key.pem里</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 第二步：生成pkcs12文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 密钥库keyrepo.p12，密码123456，有效期1天</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; keytool -genkey -v -alias root -keyalg RSA -storetype PKCS12 -keystore keyrepo.p12 -dname </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CN=www.company.com,OU=company,O=公司,L=武汉,ST=湖北,C=中国&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -storepass 123456 -keypass 123456 -validity 1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 生成客户端证书</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; keytool -genkey -v -alias p12client -keyalg RSA -storetype PKCS12 -keystore keyrepo.p12 -dname </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CN=www.company.com,OU=company,O=公司,L=武汉,ST=湖北,C=中国&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -storepass 123456 -keypass 123456 -validity 1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看已生成的证书</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; keytool -list -v -alias p12client -keystore keyrepo.p12 -storepass 123456 -storetype PKCS12</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 将p12证书导出为.cer格式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; keytool -export -alias p12client -keystore keyrepo.p12 -storetype PKCS12 -storepass 123456 -rfc -file p12.cer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看.cer证书文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; keytool -printcert -v -file /Users/bear/p12.cer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="不可逆加密算法" tabindex="-1"><a class="header-anchor" href="#不可逆加密算法"><span>不可逆加密算法</span></a></h2><p><a href="https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">对称加密算法</a>和<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">非对称加密算法</a>在处理明文的过程中需要使用<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">密钥</a>，而<a href="https://baike.baidu.com/item/%E4%B8%8D%E5%8F%AF%E9%80%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">不可逆加密算法</a>根本就不需要，因为它压根就没想过要<code>解密</code>。</p><p>这种<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">加密算法</a>和其他算法不同，它的<code>解密</code>过程就是<code>加密</code>：把明文再算一次，如果结果等于密文，就认为是解密成功。</p><p>常用的<a href="https://baike.baidu.com/item/%E4%B8%8D%E5%8F%AF%E9%80%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">不可逆加密算法</a>包括<a href="https://en.wikipedia.org/wiki/MD5" target="_blank" rel="noopener noreferrer">MD5</a>和<a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms" target="_blank" rel="noopener noreferrer">SHA</a>。</p><h3 id="md5" tabindex="-1"><a class="header-anchor" href="#md5"><span>MD5</span></a></h3><p><a href="https://en.wikipedia.org/wiki/MD5" target="_blank" rel="noopener noreferrer">MD5</a>全称<code>Message-Digest Algorithm 5（消息摘要算法5）</code>，是一种<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener noreferrer">Hash散列算法</a>，它可以将任意长度的字符串变换成一个128位的二进制大整数。</p><p><a href="https://en.wikipedia.org/wiki/MD5" target="_blank" rel="noopener noreferrer">MD5</a>的使用极其广泛，常用的用户密码加密就是用的它。</p><h3 id="sha" tabindex="-1"><a class="header-anchor" href="#sha"><span>SHA</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms" target="_blank" rel="noopener noreferrer">SHA</a>全称<code>Secure Hash Algorithm（安全散列算法）</code>，它是一系列算法的简称，有<code>SHA-1/2/3/224/256/384/512</code>这一系列类别，较为常用的是<a href="https://en.wikipedia.org/wiki/SHA-2" target="_blank" rel="noopener noreferrer">SHA-2</a>、<a href="https://developer.apple.com/documentation/cryptokit/sha256" target="_blank" rel="noopener noreferrer">SHA-256</a>，早期版本的MongoDB的加密算法默认就是<a href="https://en.wikipedia.org/wiki/SHA-1" target="_blank" rel="noopener noreferrer">SHA-1</a>，现在已经换成了<a href="https://en.wikipedia.org/wiki/SHA-2" target="_blank" rel="noopener noreferrer">SHA-2</a>。</p><p><a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms" target="_blank" rel="noopener noreferrer">SHA</a>和<a href="https://en.wikipedia.org/wiki/MD5" target="_blank" rel="noopener noreferrer">MD5</a>一样，都属于<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener noreferrer">Hash散列算法</a>，将任意长度的字符串变换为长度较短、位数固定的输出序列值。</p><p>但<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener noreferrer">Hash散列算法</a>和<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8" target="_blank" rel="noopener noreferrer">Hash表</a>是不同的。</p><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener noreferrer">Hash散列算法</a>是一种数学函数，它将一串数据/信息<code>K</code>通过<code>Hash函数</code>进行<code>转换/摘要</code>，输出另一段固定长度但更精简的数据/信息<code>V</code>，作为<code>K</code>的<code>指纹</code>。</p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8" target="_blank" rel="noopener noreferrer">Hash表</a>是一种将<code>键</code>与<code>值</code>对应起来的数据存储结构，<a href="https://www.oracle.com/java/technologies/downloads/archive/" target="_blank" rel="noopener noreferrer">Java</a>中的<code>HashMap</code>就是这种数据存储结构的实现。</p></li></ul><br><h2 id="ssl与tls" tabindex="-1"><a class="header-anchor" href="#ssl与tls"><span>SSL与TLS</span></a></h2><h3 id="ssl" tabindex="-1"><a class="header-anchor" href="#ssl"><span>SSL</span></a></h3><p>早在1994年，为了解决网络通信的安全风险问题，<a href="https://en.wikipedia.org/wiki/Netscape" target="_blank" rel="noopener noreferrer">NetScape</a>就提出了一个方案。</p><ul><li><p>通过引入加密与解密技术，来杜绝偷窃问题。</p></li><li><p>通过引入信息摘要与校验和，来杜绝篡改问题。</p></li><li><p>通过引入第三方认证机构，来杜绝身份冒充问题。</p></li></ul><p>于是，<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>产生了。</p><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>全称<code>Secure Sockets Layer（安全套接字层）</code>，是为网络通信提供安全保障及数据完整性的一种安全协议。</p><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>位于<code>TCP/IP</code>与各种应用层协议之间，为通讯提供安全支持，主流<a href="https://en.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener noreferrer">HTTP</a>服务器都支持它。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-07.png" alt="SSL" tabindex="0" loading="lazy"><figcaption>SSL</figcaption></figure><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>的基本运行过程如下。</p><ul><li><p>客户端发出加密通信请求（<code>ClientHello</code>），并向服务器提供如下内容。</p><ul><li><p>用于会话密钥的随机数（第一个随机数）</p></li><li><p>支持的加密和压缩算法</p></li></ul></li><li><p>服务器收到请求并向客户端回应（<code>ServerHello</code>）如下内容。</p><ul><li><p>用于会话密钥的随机数（第二个随机数）</p></li><li><p>支持的加密和压缩算法</p></li><li><p>服务器证书</p></li><li><p>请求客户端证书</p></li></ul></li><li><p>客户端收到服务器回应，然后执行如下动作。</p><ul><li><p>验证服务器证书，否则显示警告，选择继续或终止访问</p></li><li><p>从服务器证书中取出公钥，并向服务器发送数据</p><ul><li><p>用服务器公钥加密的随机数（第三个随机数<code>pre-master key</code>）</p></li><li><p>编码改变通知，开始加密会话</p></li><li><p>客户端握手结束通知（前述所有内容的Hash值，给服务端校验）</p></li></ul></li></ul></li><li><p>服务器收到请求并作出当前会话的最后回应（<code>ServerHello</code>）。</p><ul><li><p>收到第三个随机数并计算生成会话密钥，向客户端发送数据</p><ul><li><p>编码改变通知，随后的信息都采用之前商定的加密方法和密钥发送</p></li><li><p>服务器握手结束通知（前述所有内容的Hash值，给客户端校验）</p></li></ul></li></ul></li></ul><p>至此，整个握手阶段结束。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-08.png" alt="SSL基本运行过程" tabindex="0" loading="lazy"><figcaption>SSL基本运行过程</figcaption></figure><p>需要注意的是：在最后一步<code>服务端收到第三个随机数并向客户端发送数据</code>时，以及后续的内容传输，采用的是<a href="https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">对称加密算法</a>，原因是效率问题。</p><h3 id="tls" tabindex="-1"><a class="header-anchor" href="#tls"><span>TLS</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Netscape" target="_blank" rel="noopener noreferrer">NetScape</a>推出了<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>，而<a href="https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force" target="_blank" rel="noopener noreferrer">IETF（The Internet Engineering Task Force，互联网工程任务组）</a>将<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>扩展并制定了一系列标准之后，提出了<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener noreferrer">TLS</a>。</p><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener noreferrer">TLS</a>全称<code>Transport Layer Security（传输层安全）</code>，是继<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>之后的一种为保障互联网通信安全及数据完整性的安全协议，它可以说是<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>的升级版，是为了适应更广泛的应用场景。</p><ul><li><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener noreferrer">TLS</a><code>1.0</code>对应<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a><code>3.1</code>。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener noreferrer">TLS</a><code>1.1</code>对应<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a><code>3.2</code>。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener noreferrer">TLS</a><code>1.2</code>对应<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a><code>3.3</code>。</p></li></ul><br><h2 id="证书" tabindex="-1"><a class="header-anchor" href="#证书"><span>证书</span></a></h2><h3 id="证书是什么" tabindex="-1"><a class="header-anchor" href="#证书是什么"><span>证书是什么</span></a></h3><p>大学读完之后有毕业证书，并且这个证书可以在网上查询。</p><p>专业上有<code>注会</code>、<code>CCIE</code>、<code>律师证</code>等，可以在国家职业认证机构的网站上查到。</p><p>公司注册之后，<code>营业执照</code>信息也可以在网上找到。</p><p>从上述场景中，不难发现证书的三种作用。</p><ul><li><p>过往经历的证明。</p></li><li><p>第三方信用担保。</p></li><li><p>唯一合法性检验。</p></li></ul><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-09.png" alt="互联网证书" tabindex="0" loading="lazy"><figcaption>互联网证书</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-10.png" alt="互联网证书" tabindex="0" loading="lazy"><figcaption>互联网证书</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-11.png" alt="互联网证书" tabindex="0" loading="lazy"><figcaption>互联网证书</figcaption></figure><p>既然证书这么有用，那能不能让它来给网站/应用<code>撑腰</code>？</p><p>当然没问题，而且还诞生了一批世界著名证书颁发机构，也叫<a href="https://en.wikipedia.org/wiki/Certificate_authority" target="_blank" rel="noopener noreferrer">CA（Certificate Authority）证书授权中心</a>，包括<a href="https://www.digicert.com/" target="_blank" rel="noopener noreferrer">DigiCert</a>、<a href="https://comodosslstore.com/" target="_blank" rel="noopener noreferrer">Comodo</a>、<a href="https://www.geotrust.com/" target="_blank" rel="noopener noreferrer">GeoTrust</a>、<a href="">Symantec</a>、<a href="https://www.rapidsslonline.com/" target="_blank" rel="noopener noreferrer">RapidSSL</a>等。</p><p>有了<code>毕业证</code>，就不能没有<code>学位证</code>，所以就有了不同类型的证书。</p><ul><li><p><code>DV</code>：域名型证书，只需要验证域名的所有权，相当于学士学位。</p></li><li><p><code>OV</code>：组织型证书，域名和组织身份都要验证，相当于硕士学位。</p></li><li><p><code>EV</code>：安全性和可信任度最高，特点是浏览器有绿色地址栏，相当于博士学位。</p></li></ul><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-12.png" alt="安装了EV证书的浏览器有绿色地址栏" tabindex="0" loading="lazy"><figcaption>安装了EV证书的浏览器有绿色地址栏</figcaption></figure><p>有了<code>学位证</code>，还要能够选修不同<code>专业</code>：<a href="https://www.digicert.com/cn/faq/public-trust-and-certificates/what-is-a-wildcard-certificate" target="_blank" rel="noopener noreferrer">通配符型证书</a>、<a href="https://support.huaweicloud.com/ccm_faq/ccm_01_0165.html" target="_blank" rel="noopener noreferrer">单域名证书</a>、<code>多域名证书</code>和<code>万能证书</code>等。</p><p>目前，所有的证书都由四部分组成。</p><ul><li><p>主题信息：常规信息，如国家、地区、组织等。</p></li><li><p>签发者信息：证书机构、签发者使用的签名算法。</p></li><li><p>公钥信息</p><ul><li><p>密钥基本信息</p></li><li><p>扩展信息：策略、约束、扩展域名、时间戳列表等</p></li></ul></li><li><p>指纹信息：<a href="https://en.wikipedia.org/wiki/SHA-1" target="_blank" rel="noopener noreferrer">SHA-1</a>、<a href="https://developer.apple.com/documentation/cryptokit/sha256" target="_blank" rel="noopener noreferrer">SHA-256</a>。</p></li></ul><h3 id="证书的签发与验证" tabindex="-1"><a class="header-anchor" href="#证书的签发与验证"><span>证书的签发与验证</span></a></h3><p>证书的签发过程如下。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-13.png" alt="证书的签发过程" tabindex="0" loading="lazy"><figcaption>证书的签发过程</figcaption></figure><ul><li><p>准备证书元数据：包括签发人、地址、签发时间、有效期等，还包括证书持有者基本信息，比如DN(DNS Name)、 所有者公钥等信息</p></li><li><p>使用<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener noreferrer">Hash散列算法</a>对证书元数据进行计算，生成数字摘要。</p></li><li><p>使用签发人的私钥对该数字摘要进行加密，生成一个加密的数字摘要，也就是签发人的数字签名。</p></li><li><p>将数字签名附加到数字证书上，变成一个签过名的数字证书。</p></li><li><p>将签过名的数字证书与签发人的公钥一同发给证书使用者。</p></li></ul><p>而证书的验证过程如下。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-14.png" alt="证书的验证过程" tabindex="0" loading="lazy"><figcaption>证书的验证过程</figcaption></figure><ul><li><p>证书使用者获通过某种途径（如浏览器访问）获取到该数字证书，解压后分别获得证书元数据和数字签名。</p></li><li><p>使用同样的<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener noreferrer">Hash散列算法</a>计算证书元数据的数字摘要。</p></li><li><p>使用签发人的公钥对数字签名进行解密，得到解密后的摘要。</p></li><li><p>对比前两个步骤得到的数字摘要值，如果相同，则说明这个证书确实是被签发人验证过的合法证书，证书中的信息（最主要的是所有者的公钥）是可信的。</p></li></ul><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-15.png" alt="证书的验证过程" tabindex="0" loading="lazy"><figcaption>证书的验证过程</figcaption></figure><h3 id="证书链" tabindex="-1"><a class="header-anchor" href="#证书链"><span>证书链</span></a></h3><p>证书的关键在于签发人的公钥，但如果签发人本身有问题，信用差，那谁又来替TA担保呢？</p><p>就好比<code>清北</code>的证书（文凭），谁来保证他们和野鸡大学不一样呢？</p><p>真实世界中有国家这个强力后盾为名牌大学做担保，在互联网里则是<a href="https://zh.wikipedia.org/zh-hans/%E4%BF%A1%E4%BB%BB%E9%8F%88" target="_blank" rel="noopener noreferrer">证书链</a>。</p><p>以<code>支付宝</code>为例，它的证书层级大概是这样的。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DigiCert</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CA</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> │</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> └─Secure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Site</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> G2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    │</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    └─*.alipay.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种证书的层级结构就是<a href="https://zh.wikipedia.org/zh-hans/%E4%BF%A1%E4%BB%BB%E9%8F%88" target="_blank" rel="noopener noreferrer">证书链</a>。</p><p>支付宝的证书层级有三个级别。</p><ul><li><p><code>终端用户</code>：就是支付宝，该证书包含支付宝的公钥，支付宝的用户支付或者调用支付宝接口，就是使用这个公钥将数据加密后再传给支付宝的。</p></li><li><p><code>中间签发人</code>：对公钥持有者身份的证书进行认证，负责确认确实是支付宝在使用终端用户证书，也就是负责确认<code>支付宝确实是支付宝</code>，这类签发人可以有很多层级。</p></li><li><p><code>根root</code>：最高级别的签发人，负责认证所有中间签发人，类似于国家教育部，认证和管理下面所有的教育机构。</p></li></ul><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-16.png" alt="证书链" tabindex="0" loading="lazy"><figcaption>证书链</figcaption></figure><p>也就是说，为了得到终端用户的公钥，就要得到终端用户证书；为了证明该证书可信，必须向上追溯该证书是否被中间签发人机构认证，继续线上追溯，直到找到最终的<a href="https://en.wikipedia.org/wiki/Root_certificate" target="_blank" rel="noopener noreferrer">Root CA</a>。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-17.png" alt="SSL基本运行过程" tabindex="0" loading="lazy"><figcaption>SSL基本运行过程</figcaption></figure><h3 id="pki与证书链" tabindex="-1"><a class="header-anchor" href="#pki与证书链"><span>PKI与证书链</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Public_key_infrastructure" target="_blank" rel="noopener noreferrer">PKI</a>全称<code>Public Key Infrastructure（公钥基础设施）</code>，之前所说的那些内容，全都属于<a href="https://en.wikipedia.org/wiki/Public_key_infrastructure" target="_blank" rel="noopener noreferrer">PKI</a>（或者类比于教育体系）中的部分。</p><p>也就是：<a href="https://en.wikipedia.org/wiki/Certificate_authority" target="_blank" rel="noopener noreferrer">证书</a> + <code>发证/认证机构</code> + <code>证书库</code> = <a href="https://en.wikipedia.org/wiki/Public_key_infrastructure" target="_blank" rel="noopener noreferrer">PKI</a>。</p><br><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https"><span>HTTPS</span></a></h2><p>随着成本的下降，主流网站都已经开始使用<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTPS</a>了，但有了可信机构颁发的证书，网站就真的绝对安全了吗？</p><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTPS</a>的整体过程分为<code>证书验证</code>和<code>数据传输</code>阶段。</p><ul><li><p>证书验证阶段</p><ul><li><p>浏览器发起<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTPS</a>请求。</p></li><li><p>服务端返回<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTPS</a>证书。</p></li><li><p>客户端验证证书是否合法，如果不合法则提示告警。</p></li></ul></li><li><p>数据传输阶段</p><ul><li><p>当证书验证合法后，在本地生成随机数。</p></li><li><p>通过公钥加密随机数，并把加密后的随机数传输到服务端。</p></li><li><p>服务端通过私钥对随机数进行解密。</p></li><li><p>服务端通过传入的随机数构造对称加密算法，对返回结果内容进行加密后传输。</p></li></ul></li></ul><p>因为<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">非对称加密算法</a>效率很低，而实际应用场景中端与端之间通常有大量的交互，在<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTPS</a>中只有服务端保存了私钥，因此只能实现单向的加解密，所以内容传输采用了<a href="https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">对称加密算法</a>。</p><p>如果没有证书颁发机构，就会出现经典的<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB" target="_blank" rel="noopener noreferrer">中间人攻击</a>问题。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-18.png" alt="中间人攻击" tabindex="0" loading="lazy"><figcaption>中间人攻击</figcaption></figure><p>其实这和冒名顶替上大学如出一辙。</p><ul><li><p>本地请求被<code>劫持</code>，所有请求被发送到中间人的服务器。</p></li><li><p>中间人服务器返回中间人自己的证书。</p></li><li><p>客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输。</p></li><li><p>中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密。</p></li><li><p>中间人以客户端的请求内容再向正规网站发起请求。</p></li><li><p>因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据。</p></li><li><p>中间人凭借与正规网站建立的对称加密算法对内容进行解密。</p></li><li><p>中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输。</p></li><li><p>客户端通过与中间人建立的对称加密算法对返回结果数据进行解密。</p></li></ul><p>之所以出现这种状况，是因为客户端不知道自己的信息被拦截了，而且客户端完全无法验证证书的真假。</p><p>用了<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTPS</a>一样会被抓包，它只能防止用户在不知情的状态下通信被监听。</p><p>但如果用户主动信任网站，那么数据一样会被<code>中间人</code>窃取，所有的安全都只是相对的，没有绝对的安全。</p><br><h2 id="配置https" tabindex="-1"><a class="header-anchor" href="#配置https"><span>配置HTTPS</span></a></h2><p>只要熟悉<a href="https://openssl.org/" target="_blank" rel="noopener noreferrer">OpenSSL</a>，是很容易创建自己的证书的，前面就用它生成过了<a href="https://en.wikipedia.org/wiki/PKCS" target="_blank" rel="noopener noreferrer">PKCS</a>证书。</p><h3 id="本地https" tabindex="-1"><a class="header-anchor" href="#本地https"><span>本地HTTPS</span></a></h3><p>下面用它来实现配置本地的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">HTTPS</a>。</p><p>首先，用<a href="https://openssl.org/" target="_blank" rel="noopener noreferrer">OpenSSL</a>创建一个<code>key.p12</code>证书。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; mkdir /home/work/https</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cd /home/work/https</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; keytool -genkey -alias https -keyalg RSA -keysize 2048 -keystore key.p12 -validity 90</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-19.png" alt="创建证书" tabindex="0" loading="lazy"><figcaption>创建证书</figcaption></figure><p>然后，创建一个在<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Springboot</a>应用，并在<code>application.properties</code>配置文件中加上下面的内容。</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server.ssl.key-store=/home/work/https/key.p12</span></span>
<span class="line"><span>server.ssl.key-store-password=123456</span></span>
<span class="line"><span>server.ssl.key-store-type=PKCS12</span></span>
<span class="line"><span>server.ssl.key-alias=https</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务，通过<a href="https://www.postman.com/" target="_blank" rel="noopener noreferrer">Postman</a>访问服务接口，发现报错。</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Bad Request</span></span>
<span class="line"><span>This combination of host and port requires TLS.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要先导出<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">公钥</a>和<a href="https://zh.wikipedia.org/wiki/%E7%A7%81%E9%92%A5" target="_blank" rel="noopener noreferrer">私钥</a>。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cd /home/work/https</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl pkcs12 -in key.p12 -clcerts -out public_key.pem</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; openssl pkcs12 -in key.p12 -nodes -out private_key.pem</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-20.png" alt="导出公钥和私钥" tabindex="0" loading="lazy"><figcaption>导出公钥和私钥</figcaption></figure><p>接着修改<a href="https://www.postman.com/" target="_blank" rel="noopener noreferrer">Postman</a>的配置。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-21.png" alt="修改Postman的配置" tabindex="0" loading="lazy"><figcaption>修改Postman的配置</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-22.png" alt="修改Postman的配置" tabindex="0" loading="lazy"><figcaption>修改Postman的配置</figcaption></figure><p>再次访问<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Springboot</a>服务接口，功能正常。</p><h3 id="在线https" tabindex="-1"><a class="header-anchor" href="#在线https"><span>在线HTTPS</span></a></h3><p>通过<code>万网</code>、<code>新网</code>、<code>Godaddy</code>或其他<code>ISP服务商</code>购买域名，然后再购买相关云主机。</p><p>然后购买证书，路径为：<code>控制台</code> -&gt; <code>产品与服务</code> -&gt; <code>SSL证书</code> -&gt; <code>SSL证书管理</code> -&gt; <code>购买证书</code>。</p><p>注意：只有<code>单域名</code>的<code>DV</code><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>才有<code>免费版</code>（忘了什么是<code>单域名</code>、什么是<code>DV</code>的可以看前面）。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-23.png" alt="购买证书过程" tabindex="0" loading="lazy"><figcaption>购买证书过程</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-24.png" alt="购买证书过程" tabindex="0" loading="lazy"><figcaption>购买证书过程</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-25.png" alt="购买证书过程" tabindex="0" loading="lazy"><figcaption>购买证书过程</figcaption></figure><p>申请证书其实就是将刚才购买的<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0" target="_blank" rel="noopener noreferrer">SSL</a>和域名绑定起来。</p><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-26.png" alt="证书申请" tabindex="0" loading="lazy"><figcaption>证书申请</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-27.png" alt="证书申请" tabindex="0" loading="lazy"><figcaption>证书申请</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-28.png" alt="证书申请" tabindex="0" loading="lazy"><figcaption>证书申请</figcaption></figure><p>提交后就等待<a href="https://en.wikipedia.org/wiki/Certificate_authority" target="_blank" rel="noopener noreferrer">CA</a>审核。</p><p>审核成功就可以安装到网站或APP中。</p><p>点击<code>已签发</code>证书中的<code>下载</code>，可以依据需要配置<a href="https://tomcat.apache.org/" target="_blank" rel="noopener noreferrer">Tomcat</a>或<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>服务器证书。</p><ul><li><p><a href="https://tomcat.apache.org/" target="_blank" rel="noopener noreferrer">Tomcat</a>可以直接支持<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Springboot</a>的运行（相关配置可百度）。</p></li><li><p>如果需要做分布式流量控制，那就必须配置<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>服务器证书。</p></li></ul><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-29.png" alt="证书下载" tabindex="0" loading="lazy"><figcaption>证书下载</figcaption></figure><figure><img src="https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-30.png" alt="证书下载" tabindex="0" loading="lazy"><figcaption>证书下载</figcaption></figure>`,177),s=[t];function p(l,o){return a(),i("div",null,s)}const d=e(n,[["render",p],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/technology/sundry/","title":"加解密与HTTPS","lang":"zh-CN","frontmatter":{"title":"加解密与HTTPS","icon":"arrow-down-up-lock","category":["杂项","加密算法","SSL","TLS","CA证书","HTTPS"],"tag":["杂项","加密算法","SSL","TLS","CA证书","HTTPS"],"date":"2021-08-02T00:00:00.000Z","isOriginal":true,"star":true,"description":"加密与解密 网络安全是最近几年越来越被社会和国家高层关注的问题，比如棱镜门事件、乌云网、摄像头偷拍等事件的不断曝光，也让普罗大众知道了这一阳光下的灰暗地带。 外行看热闹，内行看门道——密码学是整个网络安全的底层支撑，就好比人离不开呼吸，没有它们，信息安全无从谈起。 密码学，顾名思义，就是研究编制密码和破译密码的学问，以前经常在谍战片中看到摩尔斯码，就是...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/sundry/"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"加解密与HTTPS"}],["meta",{"property":"og:description","content":"加密与解密 网络安全是最近几年越来越被社会和国家高层关注的问题，比如棱镜门事件、乌云网、摄像头偷拍等事件的不断曝光，也让普罗大众知道了这一阳光下的灰暗地带。 外行看热闹，内行看门道——密码学是整个网络安全的底层支撑，就好比人离不开呼吸，没有它们，信息安全无从谈起。 密码学，顾名思义，就是研究编制密码和破译密码的学问，以前经常在谍战片中看到摩尔斯码，就是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"杂项"}],["meta",{"property":"article:tag","content":"加密算法"}],["meta",{"property":"article:tag","content":"SSL"}],["meta",{"property":"article:tag","content":"TLS"}],["meta",{"property":"article:tag","content":"CA证书"}],["meta",{"property":"article:tag","content":"HTTPS"}],["meta",{"property":"article:published_time","content":"2021-08-02T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加解密与HTTPS\\",\\"image\\":[\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-01.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-02.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-03.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-04.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-05.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-06.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-07.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-08.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-09.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-10.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-11.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-12.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-13.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-14.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-15.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-16.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-17.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-18.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-19.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-20.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-21.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-22.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-23.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-24.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-25.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-26.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-27.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-28.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-29.png\\",\\"https://tianmazuo.com/technology/sundry/encrypt/encrypt-https-30.png\\"],\\"datePublished\\":\\"2021-08-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"加密与解密","slug":"加密与解密","link":"#加密与解密","children":[]},{"level":2,"title":"对称加密算法","slug":"对称加密算法","link":"#对称加密算法","children":[{"level":3,"title":"DES","slug":"des","link":"#des","children":[]},{"level":3,"title":"3DES","slug":"_3des","link":"#_3des","children":[]},{"level":3,"title":"AES","slug":"aes","link":"#aes","children":[]}]},{"level":2,"title":"非对称加密算法","slug":"非对称加密算法","link":"#非对称加密算法","children":[{"level":3,"title":"RSA","slug":"rsa","link":"#rsa","children":[]},{"level":3,"title":"DSA","slug":"dsa","link":"#dsa","children":[]},{"level":3,"title":"ECC","slug":"ecc","link":"#ecc","children":[]},{"level":3,"title":"PKCS","slug":"pkcs","link":"#pkcs","children":[]}]},{"level":2,"title":"不可逆加密算法","slug":"不可逆加密算法","link":"#不可逆加密算法","children":[{"level":3,"title":"MD5","slug":"md5","link":"#md5","children":[]},{"level":3,"title":"SHA","slug":"sha","link":"#sha","children":[]}]},{"level":2,"title":"SSL与TLS","slug":"ssl与tls","link":"#ssl与tls","children":[{"level":3,"title":"SSL","slug":"ssl","link":"#ssl","children":[]},{"level":3,"title":"TLS","slug":"tls","link":"#tls","children":[]}]},{"level":2,"title":"证书","slug":"证书","link":"#证书","children":[{"level":3,"title":"证书是什么","slug":"证书是什么","link":"#证书是什么","children":[]},{"level":3,"title":"证书的签发与验证","slug":"证书的签发与验证","link":"#证书的签发与验证","children":[]},{"level":3,"title":"证书链","slug":"证书链","link":"#证书链","children":[]},{"level":3,"title":"PKI与证书链","slug":"pki与证书链","link":"#pki与证书链","children":[]}]},{"level":2,"title":"HTTPS","slug":"https","link":"#https","children":[]},{"level":2,"title":"配置HTTPS","slug":"配置https","link":"#配置https","children":[{"level":3,"title":"本地HTTPS","slug":"本地https","link":"#本地https","children":[]},{"level":3,"title":"在线HTTPS","slug":"在线https","link":"#在线https","children":[]}]}],"git":{},"readingTime":{"minutes":21.8,"words":6539},"filePathRelative":"technology/sundry/README.md","localizedDate":"2021年8月2日","excerpt":"<h2>加密与解密</h2>\\n<p>网络安全是最近几年越来越被社会和国家高层关注的问题，比如<a href=\\"https://zh.wikipedia.org/wiki/%E7%A8%9C%E9%8F%A1%E8%A8%88%E7%95%AB\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">棱镜门事件</a>、<a href=\\"https://zh.wikipedia.org/wiki/%E4%B9%8C%E4%BA%91%E7%BD%91%E4%BA%8B%E4%BB%B6\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">乌云网</a>、<a href=\\"https://finance.sina.cn/tech/2022-05-03/detail-imcwiwst5359841.d.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">摄像头偷拍</a>等事件的不断曝光，也让普罗大众知道了这一阳光下的灰暗地带。</p>","autoDesc":true}');export{d as comp,k as data};
