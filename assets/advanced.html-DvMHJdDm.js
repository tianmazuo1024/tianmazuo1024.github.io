import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,d as a}from"./app-B5m7CcSj.js";const n={},t=a(`<p>可以通过<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a>的配置文件<code>server.properties</code>来扩展它更多的高级功能。</p><h2 id="broker" tabindex="-1"><a class="header-anchor" href="#broker"><span>Broker</span></a></h2><p><code>server.properties</code>中<a href="https://kafka.apache.org/documentation/#brokerconfigs" target="_blank" rel="noopener noreferrer">配置Broker的完整参数说明</a>。</p><p>其中比较重要的有这么几个。</p><ul><li><p><code>Log Flush Policy</code>：设置数据的刷盘策略，它们都以<code>log.flush.</code>开头，其中又以<code>log.flush.interval.messages</code>和<code>log.flush.interval.ms</code>这两个比较关键。它们一个指定分区消息的刷盘阈值（也就是当某个分区积压了多少个消息时就将数据写到磁盘中去，<code>server.properties</code>中的默认值是<code>10000</code>），另一个指定刷盘的最大时间间隔，单位为毫秒（<code>server.properties</code>中的默认值是<code>1000</code>，也就是每秒写一次）。</p></li><li><p><code>Log Retention Policy</code>：设置数据的保存时长，它们都以<code>log.retention.</code>开头。在<code>server.properties</code>中设置了这几个参数：<code>log.retention.hours=168</code>、<code>#log.retention.bytes=1073741824</code>（未生效）和<code>log.retention.check.interval.ms=300000</code>。</p></li></ul><br><h2 id="producer" tabindex="-1"><a class="header-anchor" href="#producer"><span>Producer</span></a></h2><p><code>server.properties</code>中<a href="https://kafka.apache.org/documentation/#producerconfigs" target="_blank" rel="noopener noreferrer">配置Producer的完整参数说明</a>。</p><ul><li><p><code>partitioner.class</code>：根据用户设置的算法来计算将消息发送到哪个分区，默认是随机发送到不同的分区。</p></li><li><p><code>acks</code>：它决定数据的发送方式是<code>同步</code>（<code>synchronous</code>）还是<code>异步</code>（<code>asynchronous</code>）。它可以设置为三个值：<code>-1</code>、<code>1</code>和<code>0</code>，分别代表<code>完全同步</code>、<code>半异步</code>和<code>完全异步</code>，默认为<code>1</code>。</p></li></ul><br><h2 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer"><span>Consumer</span></a></h2><p><code>server.properties</code>中<a href="https://kafka.apache.org/documentation/#consumerconfigs" target="_blank" rel="noopener noreferrer">配置Consumer的完整参数说明</a>。</p><p><code>group.id</code>：用于指定消费者组，指定之后就要注意<code>组内消费</code>和<code>组间消费</code>之间的区别。</p><ul><li><p><code>组内消费</code>表示同一个<code>group</code>的消费者都<code>可以消费</code>同一份数据，但只有有一个消费者<code>能真正消费</code>数据，但要分情况。</p><ul><li><p>当<code>消费者数量</code> &lt; <code>分区数量</code>时，一个消费者可以消费多个分区的数据。</p></li><li><p>当<code>消费者数量</code> &gt; <code>分区数量</code>时，多余的消费者不消费数据。</p></li><li><p>所以对同一个消费者组而言，消费者的数量最好不要大于分区的数量，否则某些消费者将无法消费消息。</p></li></ul></li><li><p><code>组间消费</code>表示多个<code>group</code>可以消费相同<code>Topic</code>的数据，相互不影响。</p></li></ul><figure><img src="https://tianmazuo.com/technology/middleware/kafka/kafka-03.png" alt="组内消费和组间消费的区别" tabindex="0" loading="lazy"><figcaption>组内消费和组间消费的区别</figcaption></figure><p>上图中有两个<code>Broker</code>和4个分区，以及两个消费者组：<code>Consumer Group 1</code>和<code>Consumer Group 2</code>。</p><p>它们分别展示了<code>消费者数量</code> &lt; <code>分区数量</code>（<code>Consumer Group 1</code>）和<code>消费者数量</code> &gt; <code>分区数量</code>（<code>Consumer Group 2</code>）时的<code>组内消费</code>情况，以及<code>组间消费</code>情况。</p><br><h2 id="topic、partition和message" tabindex="-1"><a class="header-anchor" href="#topic、partition和message"><span>Topic、Partition和Message</span></a></h2><p><code>server.properties</code>中<a href="https://kafka.apache.org/documentation/#topicconfigs" target="_blank" rel="noopener noreferrer">配置Topic的完整参数说明</a>。</p><ul><li><p><code>Topic</code>对应于业务类型，如果有新的业务类型，就需要适当增加<code>Topic</code>。</p></li><li><p>每个<code>Partition</code>在物理存储上，都是一个<code>Append Log</code>文件，新消息会被直接追加到文件的尾部，而每条消息在文件中的位置称为<code>Offset</code>（<code>偏移量</code>）。</p><ul><li><p><code>Partition</code>越多，能容纳的<code>Consumer</code>也就越多，能有效提升并发消费能力，在<code>server.properties</code>中默认的分区数量设置为1（<code>num.partitions=1</code>）。</p></li><li><p><code>Partition</code>对应于具体业务中的数据量，当数据量增大时，就要适当增加<code>Partition</code>的数量，实现对数据的<code>分而治之</code>。</p></li></ul></li><li><p>每个<code>Message</code>都对应一条具体的物理数据，它由<code>Offset</code>、<code>MessageSize</code>和<code>data</code>这三部分组成，分别表示偏移量、消息内容长度和消息数据。可以将<code>Offset</code>等同于唯一区分每一条不同<code>Message</code>的<code>id</code>。</p></li></ul><figure><img src="https://tianmazuo.com/technology/middleware/kafka/kafka-04.png" alt="Topic、Partition和Message的关系" tabindex="0" loading="lazy"><figcaption>Topic、Partition和Message的关系</figcaption></figure><br><h2 id="数据存取策略" tabindex="-1"><a class="header-anchor" href="#数据存取策略"><span>数据存取策略</span></a></h2><p>通过<code>Message</code>的<code>Offset</code>快速查找数据时，<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a>会用到<code>Segment</code>（分段）和<code>Index</code>（索引）技术。</p><ul><li><p>每个<code>Partition</code>是由若干个不同的<code>Segment</code>组成，每个<code>Segment</code>又存储若干个<code>Message</code>。</p></li><li><p>每个<code>Partition</code>在内存中都会对应一个<code>Index</code>，<code>Index</code>中会记录每个<code>Segment</code>中第一条数据的<code>Offset</code>。</p></li></ul><br><h2 id="查询offset信息" tabindex="-1"><a class="header-anchor" href="#查询offset信息"><span>查询Offset信息</span></a></h2><p>在<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a><code>0.9</code>版本之前，消费者的<code>Offset</code>信息是保存在<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener noreferrer">ZooKeeper</a>中的。</p><p>在<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a><code>0.9</code>版本开始，使用了新的消费者API，而消费者的<code>Offset</code>等信息会保存在<code>server.properties</code>配置文件设置过的<code>log.dirs=/home/work/volumes/kafka/logs</code>中，<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a>默认会创建50个预定义的<code>__consumer_offsets-x</code>文件夹（<code>x</code>的范围从0~49）。</p><p>通过<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a>提供的脚本可以查询消费者的<code>Offset</code>信息。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cd /home/work/kafka_2.12-3.7.1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看消费者组列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ./bin/kafka-consumer-groups.sh --list --bootstrap-server 172.16.185.176:9092</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">user1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">user2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">console-consumer-94645</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 查看某一个消费者组的详细信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ./bin/kafka-consumer-groups.sh --describe --bootstrap-server 172.16.185.176:9092 --group user2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GROUP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           TOPIC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           PARTITION</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  CURRENT-OFFSET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  LOG-END-OFFSET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  LAG</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">user2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">               3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">               0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">user2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">               5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">               0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="consumer消费顺序" tabindex="-1"><a class="header-anchor" href="#consumer消费顺序"><span>Consumer消费顺序</span></a></h2><p>有以下发送数据、<code>Topic</code>、<code>Partition</code>和<code>Consumer</code>。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 发送有序数据</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Topic</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 数据进入Partition的顺序（从左往右）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Partition-0：←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Partition-1：←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 消费者</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消费者组A</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Consumer-0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Consumer-1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消费者组B</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Consumer-2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当<code>Consumer</code>和<code>Partition</code>是一一对应的时候，<code>Consumer</code>的消费顺序和<code>Partition</code>的生产顺序是一致的。</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Consumer-0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 消费</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Partition-0的顺序：←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Consumer-1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 消费</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Partition-1的顺序：←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当一个<code>Consumer</code>消费多个<code>Partition</code>的时候，会轮流消费每个<code>Partition</code>中的数据。例如，会先从<code>Partition1</code>中消费一条数据，然后再从<code>Partition2</code>中消费一条数据，接着再回头消费<code>Partition1</code>的一条数据，哪个先到就消费哪个，这样轮番进行。</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 得到的结果是随机的，取决于Partition-0或Partition-1中的数据哪个先被Consumer-2消费</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 但对于每个Partition来说，Consumer-2消费它们的数据是有序的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Consumer-2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 消费数据后的顺序：←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ←</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以要想实现生产数据的顺序和消费数据的顺序完全一致，只需要创建一个<code>Partition</code>和一个<code>Consumer</code>就行了，不过这样效率和性能都会大打折扣。</p><br><h2 id="三种语义" tabindex="-1"><a class="header-anchor" href="#三种语义"><span>三种语义</span></a></h2><p>从<code>Consumer</code>数据消费的结果来看，<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a>支持实现三种语义。</p><ul><li><p><code>At-Least-Once</code>：表示<code>至少一次</code>，它保证<code>Consumer</code>至少会消费一次数据，也可能会重复消费多次。</p></li><li><p><code>At-Most-Once</code>：表示<code>至多一次</code>，它保证<code>Consumer</code>最多只消费一次数据，有可能会丢失数据，这是<a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka</a>默认的设置。</p></li><li><p><code>Exactly-Once</code>：表示<code>精确一次</code>，它保证<code>Consumer</code>仅消费一次数据，且数据不会丢失，它需要自己手动指定<code>Partition</code>和<code>offset</code>信息。</p></li></ul><p>这三种不同的语义适用于不同的业务场景。</p>`,46),l=[t];function o(r,d){return s(),i("div",null,l)}const h=e(n,[["render",o],["__file","advanced.html.vue"]]),k=JSON.parse('{"path":"/technology/middleware/kafka/advanced.html","title":"Kafka高级特性","lang":"zh-CN","frontmatter":{"title":"Kafka高级特性","icon":"message","category":["中间件","Kafka"],"tag":["中间件","Kafka"],"date":"2023-03-11T00:00:00.000Z","isOriginal":true,"star":true,"description":"可以通过Kafka的配置文件server.properties来扩展它更多的高级功能。 Broker server.properties中配置Broker的完整参数说明。 其中比较重要的有这么几个。 Log Flush Policy：设置数据的刷盘策略，它们都以log.flush.开头，其中又以log.flush.interval.messages和l...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/middleware/kafka/advanced.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"Kafka高级特性"}],["meta",{"property":"og:description","content":"可以通过Kafka的配置文件server.properties来扩展它更多的高级功能。 Broker server.properties中配置Broker的完整参数说明。 其中比较重要的有这么几个。 Log Flush Policy：设置数据的刷盘策略，它们都以log.flush.开头，其中又以log.flush.interval.messages和l..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/middleware/kafka/kafka-03.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"Kafka"}],["meta",{"property":"article:published_time","content":"2023-03-11T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka高级特性\\",\\"image\\":[\\"https://tianmazuo.com/technology/middleware/kafka/kafka-03.png\\",\\"https://tianmazuo.com/technology/middleware/kafka/kafka-04.png\\"],\\"datePublished\\":\\"2023-03-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"Broker","slug":"broker","link":"#broker","children":[]},{"level":2,"title":"Producer","slug":"producer","link":"#producer","children":[]},{"level":2,"title":"Consumer","slug":"consumer","link":"#consumer","children":[]},{"level":2,"title":"Topic、Partition和Message","slug":"topic、partition和message","link":"#topic、partition和message","children":[]},{"level":2,"title":"数据存取策略","slug":"数据存取策略","link":"#数据存取策略","children":[]},{"level":2,"title":"查询Offset信息","slug":"查询offset信息","link":"#查询offset信息","children":[]},{"level":2,"title":"Consumer消费顺序","slug":"consumer消费顺序","link":"#consumer消费顺序","children":[]},{"level":2,"title":"三种语义","slug":"三种语义","link":"#三种语义","children":[]}],"git":{},"readingTime":{"minutes":5.52,"words":1656},"filePathRelative":"technology/middleware/kafka/advanced.md","localizedDate":"2023年3月11日","excerpt":"<p>可以通过<a href=\\"https://kafka.apache.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Kafka</a>的配置文件<code>server.properties</code>来扩展它更多的高级功能。</p>\\n<h2>Broker</h2>\\n<p><code>server.properties</code>中<a href=\\"https://kafka.apache.org/documentation/#brokerconfigs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">配置Broker的完整参数说明</a>。</p>","autoDesc":true}');export{h as comp,k as data};
