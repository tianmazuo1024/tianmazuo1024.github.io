import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,d as a}from"./app-B5m7CcSj.js";const n={},r=a(`<div class="hint-container important"><p class="hint-container-title">vs. / vs / v.s / v.s. / Vs. / ... / 底哪种才算正确？</p><p><a href="https://spencerlam.hk/blog/2024/01/13/vs/" target="_blank" rel="noopener noreferrer">https://spencerlam.hk/blog/2024/01/13/vs/</a>这里有不算权威，但应该是正确的解释。</p></div><br><h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>MVC</span></a></h2><p>在过去的若干年中，<a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC编程模型</a>大行其道，通过将<code>模型层</code>、<code>服务层</code>、<code>控制层</code>等不同层次的职责分离，淘汰了更古老的<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener noreferrer">页面模板</a>方式。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-01.png" alt="MVC编程模型" tabindex="0" loading="lazy"><figcaption>MVC编程模型</figcaption></figure><p>以常见的电商订单系统为例来说明，它的典型工作过程应该是下面这样的。</p><ul><li><p>会有一个<code>OrderController</code>类，专门负责处理客户端（<code>PC</code>、<code>APP</code>或<code>小程序</code>）发过来的下单请求。</p></li><li><p>会有一个<code>OrderService</code>类，专门负责各种业务逻辑处理，它的工作内容应该包括但不限于下面这些。</p><ul><li><p>对用户账户信息进行合规性及行为的校验、分析和评估。</p></li><li><p><code>渲染</code>用户购物车，如优惠叠加、价格计算、运营活动等。</p></li><li><p>调用<a href="https://en.wikipedia.org/wiki/Enterprise_resource_planning" target="_blank" rel="noopener noreferrer">ERP</a>中的接口，检查是否有足够的库存，便于展示下单后的<a href="https://zh.wikipedia.org/wiki/%E5%AD%98%E8%B4%A7%E5%8D%95%E4%BD%8D" target="_blank" rel="noopener noreferrer">SKU</a>。</p></li><li><p>完成其他相关工作后给订单服务（或者订单生产系统）发送消息，准备生成订单。</p></li></ul></li><li><p><code>OrderService</code>可能会需要通过其实现类<code>OrderServiceImpl</code>来完成上述方法。</p></li><li><p><code>OrderServiceImpl</code>通过调用底层的数据访问层<code>DAO/Mapper</code>来操作数据库中的数据。</p></li><li><p><code>DAO/Mapper</code>将<code>DO/PO</code>作为映射，实现对数据的<a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank" rel="noopener noreferrer">CRUD</a>操作。</p></li></ul><p>它的伪代码可能是这样的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FulfillService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDAO</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CartDAO</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cartDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WarehouseDAO</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> warehouseDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderDAO</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> orderDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> preAllocateWarehouse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 校验用户账户</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        userDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">check</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 渲染购物车</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        cartDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 库存检查</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        warehouseDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">check</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 创建预订单</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        orderDAO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createPreOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 其他几百行业务代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ......</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-02.png" alt="不同层次之间的交互" tabindex="0" loading="lazy"><figcaption>不同层次之间的交互</figcaption></figure><p>这基本上是一种<code>面向数据库编程</code>的范式，而不是<code>面向真实世界业务编程</code>的范式。</p><p><a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>最大的问题在于：代码和真实的业务流程、业务模型、业务语义完全脱节，导致可维护性极差。</p><p>哪怕是某个人自己写的代码，过了几个月后，他可能自己都看不懂了，更别说其他负责系统维护的工程师。</p><p>而且这种代码越到后期就越难于维护：当数量庞大的<code>Controller</code>、<code>Service</code>、<code>Dao</code>以及<code>DO</code>们混在一起的时候，整个系统已经无解了——要么原封不动，要么推倒重来，没有第三种选择。</p><br><h2 id="ddd" tabindex="-1"><a class="header-anchor" href="#ddd"><span>DDD</span></a></h2><h3 id="它是什么" tabindex="-1"><a class="header-anchor" href="#它是什么"><span>它是什么</span></a></h3><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的全称是<code>Domain Driven Design</code>，翻译过来就是<code>领域驱动设计</code>。</p><p>这里的<code>领域</code>指的是具体的业务分类，比如电商、社交、团购、教培、打车等不同的业务。</p><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的核心思想就是<code>通过聚焦业务来优化软件设计流程，提高软件开发质量、提高可用性和复用性</code>。</p><p>它是一套系统的设计方法论，从<code>战略层面（业务规划）</code>到<code>战术设计（需求实现）</code>都很规范，让编码工作更加清晰明了，而且完全面向业务。</p><p>用大白话说，<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>就是一种<code>一切围绕业务的软件设计方法论</code>，而不是像<a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>那样<code>围绕数据库编程</code>。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-03.png" alt="DDD的发展历程" tabindex="0" loading="lazy"><figcaption>DDD的发展历程</figcaption></figure><ul><li><p>2003年，<a href="https://ddd.academy/eric-evans/" target="_blank" rel="noopener noreferrer">Eric Evans</a>出版了一本叫做<a href="https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/" target="_blank" rel="noopener noreferrer">《Domain-Driven Design: Tackling Complexity in the Heart of Software》（《领域驱动设计：软件核心复杂性应对之道》）</a>的技术图书。</p></li><li><p>2005年，<a href="https://en.wikipedia.org/wiki/Alistair_Cockburn" target="_blank" rel="noopener noreferrer">Alistair Cockburn</a>提出了针对<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的第一个系统设计架构：<a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)" target="_blank" rel="noopener noreferrer">六边形架构（Hexagonal Architecture）</a>，又叫做<a href="https://wiki.c2.com/?PortsAndAdaptersArchitecture" target="_blank" rel="noopener noreferrer">端口适配器架构（Ports &amp; Adapters Architecture）</a>。</p></li><li><p>2008年，<a href="https://jeffreypalermo.com/about/" target="_blank" rel="noopener noreferrer">Jeffrey Palermo</a>提出了<a href="https://medium.com/expedia-group-tech/onion-architecture-deed8a554423" target="_blank" rel="noopener noreferrer">洋葱架构（Onion Architecture）</a>。</p></li><li><p>2012年，<a href="https://en.wikipedia.org/wiki/Robert_C._Martin" target="_blank" rel="noopener noreferrer">Robert C. Martin</a>提出了改进后的<a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener noreferrer">整洁架构（The Clean Architecture）</a>。</p></li><li><p>2013年～至今，中间陆续出版了一些<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>落地的书籍，也出现了<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9C%8D%E5%8B%99" target="_blank" rel="noopener noreferrer">微服务</a>，这两种不同的思想和模式互相影响、借鉴。</p></li></ul><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-04.png" alt="DDD的核心作用" tabindex="0" loading="lazy"><figcaption>DDD的核心作用</figcaption></figure><p>虽然<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>中也有数据库操作，也存在<a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank" rel="noopener noreferrer">CRUD</a>，但它的关注点却始终在业务上。</p><p>来看一段<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的伪代码，并把它和前面的<a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>伪代码比较一番就能明白其中的差别。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * 仓库领域模型服务</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WarehouseDomainService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WarehouseApiGateway</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> warehouseApiGateway</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     * 为订单分配最近的仓库</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Warehouse</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> preAllocateWarehouse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Order</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 查询所有的仓库信息</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Warehouses</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> warehouses</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> warehouseApiGateway</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 从所有的仓库里选择一个距离订单收货地址最近的仓库</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Warehouse</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> warehouse</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> warehouses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">selectNearest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeliveryAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 检查库存是否充足</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">warehouse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isInventoryEnough</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 将履约订单分配给选择的仓库</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allocateToWarehouse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(warehouse);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 锁定订单对应的库存</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            warehouse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lockInventory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(order);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> warehouse;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不是什么" tabindex="-1"><a class="header-anchor" href="#不是什么"><span>不是什么</span></a></h3><p>很显然，每种理论、方法都有它的边界。</p><ul><li><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>只能做和业务相关的部分，和业务不相关的无能为力，如<a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener noreferrer">UI</a>。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>无法代替团队的技术决策，例如，是使用<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener noreferrer">Spring Boot</a>还是使用<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">Spring Cloud</a>，又或者<a href="https://flask.palletsprojects.com/" target="_blank" rel="noopener noreferrer">Flask</a>和<a href="https://gin-gonic.com/" target="_blank" rel="noopener noreferrer">Gin</a>呢。</p></li><li><p>系统性能低的问题和<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>没有半毛钱关系。</p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90" target="_blank" rel="noopener noreferrer">需求分析</a>、<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language" target="_blank" rel="noopener noreferrer">UML</a>等技能，<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>是教不了的。</p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA)" target="_blank" rel="noopener noreferrer">设计模式</a>、<a href="https://zh.wikipedia.org/wiki/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">架构模式</a>、<a href="https://wiki.mbalib.com/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">开发模型</a>这些东西早就已经存在了，<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>不是要替代它们。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>不是编码规范，所以写出<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E6%9D%A1%E5%BC%8F%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener noreferrer">意呆利面条式的代码</a>和<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>无关。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>本质上仍然是属于<code>软件工程</code>而不是<code>产品设计</code>范畴，好的产品经理仍然是不可或缺的。</p></li></ul><br><h2 id="取舍" tabindex="-1"><a class="header-anchor" href="#取舍"><span>取舍</span></a></h2><p><code>存在即合理</code>，每种方法都有它自己的适用场景，<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>也并不是用来代替<a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>的。</p><p>比如，如果只是一个公司内部的小应用系统，就不用搞的像中标几百万甚至上千万的大项目那样折腾，也不用想什么<code>限界上下文</code>、<code>防腐层</code>之类的东西，闭着眼睛实现对数据（库）的<a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank" rel="noopener noreferrer">CRUD</a>就好了，可以非常快地整活。</p><p>但如果真的是个大项目，那可就要坐下来好好思忖一番了，因为相比于代码的<code>Bug</code>，真正决定软件复杂性、可用性的是思考模式和设计方式，而且需求与实现之间的脱节实在是稀松平常。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-05.png" alt="设计、需求、实现之间的脱节实在是太正常不过了" tabindex="0" loading="lazy"><figcaption>设计、需求、实现之间的脱节实在是太正常不过了</figcaption></figure><p>所以，确切地来说，<a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>适用于变化极少且较为简单的业务，而<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>则适用于变化频繁且较为复杂的业务。</p><p><a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>模式既是一种思想，也是一种代码架构，而<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>仅仅是一种思想，与实现它的代码架构无关（虽然迄今为止有好几种<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的实现架构，但并无好坏之分，只有是否适用之别）。</p><br><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>总体上来讲，<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>从初始的分析到最终的编码实现，大致会经过这么三个阶段。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-06.png" alt="DDD落地的三个阶段" tabindex="0" loading="lazy"><figcaption>DDD落地的三个阶段</figcaption></figure>`,43),t=[r];function l(p,h){return s(),e("div",null,t)}const o=i(n,[["render",l],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/technology/engineering/domain/","title":"MVC vs. DDD","lang":"zh-CN","frontmatter":{"title":"MVC vs. DDD","icon":"vihara","category":["开发过程","领域模型"],"tag":["开发过程","领域模型","MVC"],"date":"2022-11-08T00:00:00.000Z","isOriginal":true,"star":true,"description":"vs. / vs / v.s / v.s. / Vs. / ... / 底哪种才算正确？ https://spencerlam.hk/blog/2024/01/13/vs/这里有不算权威，但应该是正确的解释。 MVC 在过去的若干年中，MVC编程模型大行其道，通过将模型层、服务层、控制层等不同层次的职责分离，淘汰了更古老的页面模板方式。 MVC编程模型...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/engineering/domain/"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"MVC vs. DDD"}],["meta",{"property":"og:description","content":"vs. / vs / v.s / v.s. / Vs. / ... / 底哪种才算正确？ https://spencerlam.hk/blog/2024/01/13/vs/这里有不算权威，但应该是正确的解释。 MVC 在过去的若干年中，MVC编程模型大行其道，通过将模型层、服务层、控制层等不同层次的职责分离，淘汰了更古老的页面模板方式。 MVC编程模型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/engineering/domain/ddd-01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"开发过程"}],["meta",{"property":"article:tag","content":"领域模型"}],["meta",{"property":"article:tag","content":"MVC"}],["meta",{"property":"article:published_time","content":"2022-11-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVC vs. DDD\\",\\"image\\":[\\"https://tianmazuo.com/technology/engineering/domain/ddd-01.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-02.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-03.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-04.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-05.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-06.png\\"],\\"datePublished\\":\\"2022-11-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"DDD","slug":"ddd","link":"#ddd","children":[{"level":3,"title":"它是什么","slug":"它是什么","link":"#它是什么","children":[]},{"level":3,"title":"不是什么","slug":"不是什么","link":"#不是什么","children":[]}]},{"level":2,"title":"取舍","slug":"取舍","link":"#取舍","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{},"readingTime":{"minutes":6.54,"words":1963},"filePathRelative":"technology/engineering/domain/README.md","localizedDate":"2022年11月8日","excerpt":"<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">vs. / vs / v.s / v.s. / Vs. / ... / 底哪种才算正确？</p>\\n<p><a href=\\"https://spencerlam.hk/blog/2024/01/13/vs/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://spencerlam.hk/blog/2024/01/13/vs/</a>这里有不算权威，但应该是正确的解释。</p>\\n</div>\\n<br>\\n<h2>MVC</h2>","autoDesc":true}');export{o as comp,c as data};
