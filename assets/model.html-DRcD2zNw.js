import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,d as e}from"./app-CiwSPZKD.js";const n={},l=e(`<h2 id="执行阶段" tabindex="-1"><a class="header-anchor" href="#执行阶段"><span>执行阶段</span></a></h2><p><a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>是一种基于声明性配置的<code>HTTP</code>服务器，它把请求处理的过程划分成了<a href="https://nginx.org/en/docs/dev/development_guide.html#http_phases" target="_blank" rel="noopener noreferrer">十一个阶段</a>。</p><figure><img src="https://tianmazuo.com/technology/programming/lua/lua-07.png" alt="Nginx请求处理的十一个阶段" tabindex="0" loading="lazy"><figcaption>Nginx请求处理的十一个阶段</figcaption></figure><table><thead><tr><th style="text-align:center;">顺序</th><th style="text-align:center;">名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">加载模块</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">NGX_HTTP_POST_READ_PHASE</td><td style="text-align:left;">第一个阶段，<code>ngx_http_realip_module</code>在此阶段注册其处理程序，以便在调用任何其他模块之前替换客户端地址</td><td style="text-align:left;"><code>ngx_http_realip_module</code></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">NGX_HTTP_SERVER_REWRITE_PHASE</td><td style="text-align:left;">重写服务器块（但在定位的块之外）中定义的指令，<code>ngx_http_rewrite_module</code>在此阶段安装其处理程序</td><td style="text-align:left;"><code>ngx_http_rewrite_module</code></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">NGX_HTTP_FIND_CONFIG_PHASE</td><td style="text-align:left;">根据请求<code>URI</code>选择<code>location</code>的特殊阶段。在此阶段之前，相关虚拟服务器的默认<code>location</code>被分配给请求，任何请求<code>location</code>配置的模块都会收到默认服务器<code>location</code>的配置。此阶段为请求分配一个新的<code>location</code>。在此阶段无法注册其他处理程序</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">NGX_HTTP_REWRITE_PHASE</td><td style="text-align:left;">与<code>NGX_HTTP_SERVER_REWRITE_PHASE阶段</code>相同，但用于在上一阶段选择的<code>location</code>中定义的重写规则</td><td style="text-align:left;"><code>ngx_http_rewrite_module</code></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">NGX_HTTP_POST_REWRITE_PHASE</td><td style="text-align:left;">特殊阶段，如果请求的<code>URI</code>在重写过程中发生变化，则将请求重定向到新<code>location</code>。这是通过再次发送<code>NGX_HTTP_FIND_CONFIG_PHASE</code>请求来实现的。在此阶段无法注册其他处理程序</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">NGX_HTTP_PREACCESS_PHASE</td><td style="text-align:left;">不同类型处理程序的通用阶段，与访问控制无关。标准<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>模块<code>ngx_http_limit_conn_module</code>和<code>ngx_http_limit_req_module</code>在此阶段注册其处理程序</td><td style="text-align:left;"><code>ngx_http_limit_conn_module</code>、<code>ngx_http_limit_req_module</code></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">NGX_HTTP_ACCESS_PHASE</td><td style="text-align:left;">验证客户端是否有权发出请求的阶段。标准<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>模块，如<code>ngx_http_access_module</code>、<code>ngx_http_auth_basic_module</code>和<code>ngx_http_auth_request_module</code>在此阶段注册其处理程序。默认情况下，客户端必须通过在此阶段注册的所有处理程序的授权检查，请求才能继续到下一阶段。如果任何阶段处理程序授权客户端，则可以使用<code>confuse</code>指令来允许处理继续进行</td><td style="text-align:left;"><code>ngx_http_access_module</code>、<code>ngx_http_auth_basic_module</code>、<code>ngx_http_auth_request_module</code></td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">NGX_HTTP_POST_ACCESS_PHASE</td><td style="text-align:left;">处理满足任何指令的特殊阶段。如果某些访问阶段处理程序拒绝访问，并且没有明确允许访问，则请求已完成。在此阶段无法注册其他处理程序</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">NGX_HTTP_TRY_FILES_PHASE</td><td style="text-align:left;">在生成内容之前调用处理程序的阶段。标准<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>模块，如<code>ngx_http_try_files_module</code>和<code>ngx_http_mirror_module</code>在此阶段注册其处理程序</td><td style="text-align:left;"><code>ngx_http_try_files_module</code>、<code>ngx_http_mirror_module</code></td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;">NGX_HTTP_CONTENT_PHASE</td><td style="text-align:left;">正常生成响应的阶段。在此阶段，多个<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>标准模块注册了它们的处理程序，包括<code>ngx_http_index_module</code>或<code>ngx_http_static_module</code>。它们按顺序调用，直到其中一个产生输出。也可以在每个<code>location</code>设置内容处理程序。如果<code>ngx_http_core_module</code>的<code>location</code>设置了处理程序，则将其称为内容处理程序，并忽略在此阶段安装的处理程序</td><td style="text-align:left;"><code>ngx_http_index_module</code>、<code>ngx_http_autoindex_module</code>、<code>ngx_http_concat_module</code></td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">NGX_HTTP_LOG_PHASE</td><td style="text-align:left;">执行请求日志记录的阶段。目前，只有<code>ngx_http_log_module</code>模块在此阶段注册其处理程序以进行访问日志记录。在释放请求之前，日志处理程序在请求处理的最后被调用</td><td style="text-align:left;"><code>ngx_http_log_module</code></td></tr></tbody></table><p><a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>仿效<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>，也把<a href="https://www.lua.org/" target="_blank" rel="noopener noreferrer">Lua</a>模块指令的执行过程分为了<a href="https://openresty-reference.readthedocs.io/en/latest/Directives/" target="_blank" rel="noopener noreferrer">四个阶段</a></p><figure><img src="https://tianmazuo.com/technology/programming/lua/lua-08.png" alt="Openresty处理请求的四个阶段" tabindex="0" loading="lazy"><figcaption>Openresty处理请求的四个阶段</figcaption></figure><table><thead><tr><th style="text-align:center;">顺序</th><th style="text-align:center;">名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">init_by_lua*</td><td style="text-align:left;">启动<code>master</code>，将变量复制到<code>worker</code></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">init_worker_by_lua*</td><td style="text-align:left;"><code>worker</code>启动</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">set_by_lua*</td><td style="text-align:left;">根据需求执行变量初始化</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">rewrite_by_lua*</td><td style="text-align:left;">实现转发、重定向等功能</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">access_by_lua*</td><td style="text-align:left;">执行访问控制，例如IP黑名单、接口权限过滤、代理转发等</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">content_by_lua*</td><td style="text-align:left;">生成内容</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">header_filter_by_lua*</td><td style="text-align:left;">响应头过滤处理</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">body_filter_by_lua*</td><td style="text-align:left;">内容体过滤处理</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">log_by_lua*</td><td style="text-align:left;">完成日志记录</td></tr></tbody></table><p><a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>与<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>执行阶段的对照。</p><table><thead><tr><th style="text-align:left;">指令</th><th style="text-align:left;">对应<code>Nginx</code>的处理阶段</th><th style="text-align:left;">在<code>Nginx</code>配置文件中的适用范围</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">init_by_lua<br>init_by_lua_block<br>init_by_lua_file</td><td style="text-align:left;">loading-config</td><td style="text-align:left;">http</td><td style="text-align:left;"><code>Nginx</code>进程加载配置时执行<br>通常用于初始化全局配置/预加载<code>Lua</code>模块</td></tr><tr><td style="text-align:left;">init_worker_by_lua<br>init_worker_by_lua_block<br>init_worker_by_lua_file</td><td style="text-align:left;">starting-worker</td><td style="text-align:left;">http</td><td style="text-align:left;">每个<code>Worker</code>进程启动时调用一次，如果<code>Master</code>进程不允许则只会在<code>init_by_lua</code>之后调用<br>通常用于定时拉取配置或数据，或者做后端服务的健康检查</td></tr><tr><td style="text-align:left;">ssl_certificate_by_lua_block<br>ssl_certificate_by_lua_file</td><td style="text-align:left;">right-before-ssl</td><td style="text-align:left;">server</td><td style="text-align:left;">当<code>Nginx</code>与下游<code>SSL</code>开始握手时，运行指定的<code>Lua</code>代码<br>通常用于对<code>SSL</code>做特殊处理</td></tr><tr><td style="text-align:left;">set_by_lua<br>set_by_lua_block<br>set_by_lua_file</td><td style="text-align:left;">rewrite</td><td style="text-align:left;">server<br>location</td><td style="text-align:left;">通常用于设置<code>Nginx</code>变量，实现复杂的赋值逻辑</td></tr><tr><td style="text-align:left;">rewrite_by_lua<br>rewrite_by_lua_block<br>rewrite_by_lua_file</td><td style="text-align:left;">rewrite<br>tail</td><td style="text-align:left;">http<br>server<br>location</td><td style="text-align:left;">通常用于实现复杂的转发、重定向、缓存等功能</td></tr><tr><td style="text-align:left;">access_by_lua<br>access_by_lua_block<br>access_by_lua_file</td><td style="text-align:left;">access<br>tail</td><td style="text-align:left;">http<br>server<br>location</td><td style="text-align:left;">通常用于实现IP黑名单、接口权限过滤、代理转发等功能</td></tr><tr><td style="text-align:left;">balancer_by_lua_block<br>balancer_by_lua_file</td><td style="text-align:left;">content</td><td style="text-align:left;">upstream</td><td style="text-align:left;">负载均衡器，实现动态负载均衡</td></tr><tr><td style="text-align:left;">content_by_lua<br>content_by_lua_block<br>content_by_lua_file</td><td style="text-align:left;">content</td><td style="text-align:left;">location</td><td style="text-align:left;">内容处理器，用于接收请求并输出响应</td></tr><tr><td style="text-align:left;">header_filter_by_lua<br>header_filter_by_lua_block<br>header_filter_by_lua_file</td><td style="text-align:left;">output-header-filter</td><td style="text-align:left;">http<br>server<br>location</td><td style="text-align:left;">响应头过滤器，用于设置返回的响应头和<code>Cookie</code></td></tr><tr><td style="text-align:left;">body_filter_by_lua<br>body_filter_by_lua_block<br>body_filter_by_lua_file</td><td style="text-align:left;">output-body-filter</td><td style="text-align:left;">http<br>server<br>location</td><td style="text-align:left;">内容体过滤器，用于处理响应数据</td></tr><tr><td style="text-align:left;">log_by_lua<br>log_by_lua_block<br>log_by_lua_file</td><td style="text-align:left;">log</td><td style="text-align:left;">http<br>server<br>location</td><td style="text-align:left;">记录日志</td></tr></tbody></table><br><h2 id="阶段测试" tabindex="-1"><a class="header-anchor" href="#阶段测试"><span>阶段测试</span></a></h2><p>通过代码来直观感受<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>不同的执行阶段。</p><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在server中加入如下内容</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /phase</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    set_by_lua_block</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;set_by_lua*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    rewrite_by_lua_block</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;rewrite_by_lua*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    access_by_lua_block</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;access_by_lua*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    content_by_lua_block</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;content_by_lua*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    header_filter_by_lua_block</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;header_filter_by_lua*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    body_filter_by_lua_block</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;body_filter_by_lua*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    log_by_lua_block</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;log_by_lua*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中访问<a href="http://%E6%9C%8D%E5%8A%A1%E5%99%A8IP:%E7%AB%AF%E5%8F%A3%E5%8F%B7/phase" target="_blank" rel="noopener noreferrer">http://服务器IP:端口号/phase</a>后，<code>error.log</code>中会生成下内容。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2023/06/06</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 23:05:31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [error] 68145#68145: *1 [lua] set_by_lua(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx.conf:50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):2: set_by_lua*, client: 127.0.0.1, server: localhost, request: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET /phase HTTP/1.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, host: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2023/06/06</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 23:05:31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [error] 68145#68145: *1 [lua] rewrite_by_lua(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx.conf:53</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):2: rewrite_by_lua*, client: 127.0.0.1, server: localhost, request: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET /phase HTTP/1.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, host: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2023/06/06</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 23:05:31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [error] 68145#68145: *1 [lua] access_by_lua(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx.conf:56</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):2: access_by_lua*, client: 127.0.0.1, server: localhost, request: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET /phase HTTP/1.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, host: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2023/06/06</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 23:05:31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [error] 68145#68145: *1 [lua] content_by_lua(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx.conf:59</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):2: content_by_lua*, client: 127.0.0.1, server: localhost, request: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET /phase HTTP/1.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, host: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2023/06/06</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 23:05:31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [error] 68145#68145: *1 [lua] header_filter_by_lua(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx.conf:62</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):2: header_filter_by_lua*, client: 127.0.0.1, server: localhost, request: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET /phase HTTP/1.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, host: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2023/06/06</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 23:05:31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [error] 68145#68145: *1 [lua] body_filter_by_lua(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx.conf:65</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):2: body_filter_by_lua*, client: 127.0.0.1, server: localhost, request: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET /phase HTTP/1.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, host: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2023/06/06</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 23:05:31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [error] 68145#68145: *1 [lua] log_by_lua(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx.conf:68</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):2: log_by_lua* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> logging</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> request,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> client:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> request:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;GET /phase HTTP/1.1&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;localhost&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="阶段指令" tabindex="-1"><a class="header-anchor" href="#阶段指令"><span>阶段指令</span></a></h2><p>下面就分别展示一下各个不同阶段的执行结果。</p><h3 id="init-by-lua" tabindex="-1"><a class="header-anchor" href="#init-by-lua"><span>init_by_lua</span></a></h3><p><code>init_by_lua</code>在每次<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>重新加载配置时执行。</p><p>先修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在http部分加入下面这一行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">init_by_lua_file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/openresty/nginx/conf/lua/init.lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 注释掉原来的include</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#include lua.conf;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在server中加入下面的内容</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /request</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    content_by_lua_block</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 每刷新一次页面，count的值就会加1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如果注释掉</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1，那么count会一直停留在1不变</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.say(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;global variable ==&gt; &quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;br&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> global_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">global_shared</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        global_shared:incr(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;count&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.say(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;global shared ==&gt; &quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> global_shared:get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;br&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>/usr/local/openresty/nginx/conf/lua</code>中新建<code>init.lua</code>文件，并输入如下内容。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua/init.lua</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 初始化耗时的模块</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;resty.mysql&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;resty.redis&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 全局变量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 共享全局内存</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> global_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">global_shared</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">global_shared:set(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;count&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中访问<a href="http://xn--IP-fr5c86lx7z:9527/request" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/request</a>，会发现<code>global variable</code>的值始终都是1，而<code>global shared</code>每刷新一次页面值都会加1，这就是初始化执行后的效果。</p><h3 id="init-worker-by-lua" tabindex="-1"><a class="header-anchor" href="#init-worker-by-lua"><span>init_worker_by_lua</span></a></h3><p><code>init_worker_by_lua</code>就是用于执行某些定时任务的调度器。</p><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 对之前的init.lua行进行修改，其他不变</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">init_worker_by_lua_file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/openresty/nginx/conf/lua/init_worker.lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>/usr/local/openresty/nginx/conf/lua</code>中新建<code>init_worker.lua</code>文件，并输入如下内容。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua/init_worker.lua</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">5</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> heartbeat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nil</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">heartbeat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (args)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;do check ==&gt; &quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ok</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">at</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">delay,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> heartbeat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ok</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> then</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ngx.log(ngx.ERR,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;failed to startup heartbeat worker...&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">heartbeat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>后，就可以通过下面的命令看到输出。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; tail -f /usr/local/openresty/nginx/logs/error.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[error] 73839#73839: *22 [lua] init_worker.lua:6: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">2,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> context:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ngx.timer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[error] 73839#73839: *23 [lua] init_worker.lua:6: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">3,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> context:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ngx.timer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[error] 73839#73839: *24 [lua] init_worker.lua:6: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">4,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> context:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ngx.timer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[error] 73839#73839: *25 [lua] init_worker.lua:6: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">5,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> context:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ngx.timer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[error] 73839#73839: *26 [lua] init_worker.lua:6: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">6,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> context:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ngx.timer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-by-lua" tabindex="-1"><a class="header-anchor" href="#set-by-lua"><span>set_by_lua</span></a></h3><p><code>set_by_lua</code>的语法是<code>set_by_lua_file $var lua_file arg1 arg2…;</code>。</p><p>先修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 注释掉这一行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># init_worker_by_lua_file /usr/local/openresty/nginx/conf/lua/init_worker.lua;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 取消这一行之前的注释</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lua.conf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再修改<code>/usr/local/openresty/nginx/conf/lua.conf</code>文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9527</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /setbylua</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        set_by_lua_file</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conf/lua/set_by_lua.lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>/usr/local/openresty/nginx/conf/lua</code>中新建<code>set_by_lua.lua</code>文件，并输入如下内容。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua/set_by_lua.lua</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> uri_args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">get_uri_args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uri_args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">or</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uri_args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">or</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>后，在浏览器中访问<a href="http://xn--IP-fr5c86lx7z:9527/setbylua?a=1&amp;b=2" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/setbylua?a=1&amp;b=2</a>，就会显示参数<code>a</code>和参数<code>b</code>相加后的结果<code>3</code>。</p><p>这是比较简单的栗子，<code>set_by_lua</code>最大的作用是某种程度上能够替代后端服务，实现类似于动态网关的效果。</p><h3 id="rewrite-by-lua" tabindex="-1"><a class="header-anchor" href="#rewrite-by-lua"><span>rewrite_by_lua</span></a></h3><p><code>rewrite_by_lua</code>用于实现<code>URL</code>重定向。</p><p>修改<code>/usr/local/openresty/nginx/conf/lua.conf</code>文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9527</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    server_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /rewrite1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;text/html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        rewrite_by_lua_file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conf/lua/rewrite1.lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;no redirect 1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /rewrite2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;text/html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        rewrite_by_lua_file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conf/lua/rewrite2.lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;no redirect 2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /rewrite3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;text/html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        rewrite_by_lua_file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conf/lua/rewrite3.lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;no redirect 3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /rewrite4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;text/html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;no redirect 4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>/usr/local/openresty/nginx/conf/lua</code>中新建3个<a href="https://www.lua.org/" target="_blank" rel="noopener noreferrer">Lua</a>文件，分别是<code>rewrite1.lua</code>、<code>rewrite2.lua</code>和<code>rewrite3.lua</code>，内容如下。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua/rewrite1.lua</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ngx.req.get_uri_args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redirect&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] == </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ngx.redirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;http://www.google.com?redirect=1&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 302</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua/rewrite2.lua</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ngx.req.get_uri_args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redirect&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] == </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ngx.req.set_uri(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/rewrite3&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ngx.req.set_uri(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/rewrite4&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ngx.req.set_uri_args(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{redirect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ngx.req.set_uri_args(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{redirect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua/rewrite3.lua</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ngx.req.get_uri_args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redirect&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] == </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ngx.req.set_uri(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;/rewrite4&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ngx.req.set_uri_args(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{redirect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>后，在浏览器中分别访问下面的地址查看效果。</p><ul><li><p><a href="http://xn--IP-fr5c86lx7z:9527/rewrite1" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/rewrite1</a>输出<code>no redirect 1</code>；<a href="http://xn--IP-fr5c86lx7z:9527/rewrite1redirect=1" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/rewrite1redirect=1</a>跳转到<a href="http://www.google.com?redirect=1" target="_blank" rel="noopener noreferrer">http://www.google.com?redirect=1</a>。</p></li><li><p><a href="http://xn--IP-fr5c86lx7z:9527/rewrite2?redirect=1" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/rewrite2?redirect=1</a>输出<code>no redirect 2</code>；<a href="http://xn--IP-fr5c86lx7z:9527/rewrite2?redirect=0" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/rewrite2?redirect=0</a>输出<code>no redirect 3</code>，重定向到<code>/rewrite3</code>。</p></li><li><p><a href="http://xn--IP-fr5c86lx7z:9527/rewrite3?redirect=1" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/rewrite3?redirect=1</a>输出<code>no redirect 4</code>，重定向到<code>/rewrite4</code>；<a href="http://xn--IP-fr5c86lx7z:9527/rewrite3?redirect=0" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/rewrite3?redirect=0</a>输出<code>no redirect 3</code>。</p></li><li><p><a href="http://xn--IP-fr5c86lx7z:9527/rewrite4" target="_blank" rel="noopener noreferrer">http://服务器IP:9527/rewrite4</a>带不带参数都会输出<code>no redirect 4</code>。</p></li></ul><p><code>rewrite1.lua</code>中状态码<code>302</code>则代表<code>暂时性转移（Temporarily Moved）</code>，如果是状态码<code>301则</code>代表<code>永久性转移（Permanently Moved）</code>。</p><h3 id="access-by-lua" tabindex="-1"><a class="header-anchor" href="#access-by-lua"><span>access_by_lua</span></a></h3><p><code>access_by_lua</code>通常用于访问控制，比如只允许指定<code>IP</code>访问。</p><p>修改<code>/usr/local/openresty/nginx/conf/lua.conf</code>文件，在<code>server</code>中增加如下内容。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">location</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /accessbylua</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	default_type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;text/html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	lua_code_cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	access_by_lua_file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conf/lua/access_by_lua.lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">	echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;authorize access&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>/usr/local/openresty/nginx/conf/lua</code>中新建<code>access_by_lua.lua</code>文件，内容如下。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; vi /usr/local/openresty/nginx/conf/lua/access_by_lua.lua</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ngx.var.host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;localhost&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ngx.exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">403</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>后，在浏览器中访问<a href="http://localhost:9527/accessbylua" target="_blank" rel="noopener noreferrer">http://localhost:9527/accessbylua</a>输出<code>authorize access</code>，而访问<a href="http://127.0.0.1:9527/accessbylua" target="_blank" rel="noopener noreferrer">http://127.0.0.1:9527/accessbylua</a>则显示<code>403 Forbidden</code>页面。</p><p>至于后续<code>header_filter_by_lua</code>、<code>body_filter_by_lua</code>和<code>log_by_lua</code>的使用方式也大同小异。</p>`,61),t=[l];function h(r,k){return a(),i("div",null,t)}const c=s(n,[["render",h],["__file","model.html.vue"]]),g=JSON.parse('{"path":"/technology/programming/lua/model.html","title":"模块处理流程","lang":"zh-CN","frontmatter":{"title":"模块处理流程","icon":"scroll","category":["编程语言","LUA"],"tag":["编程语言","LUA"],"date":"2023-02-25T00:00:00.000Z","isOriginal":true,"star":true,"description":"执行阶段 Nginx是一种基于声明性配置的HTTP服务器，它把请求处理的过程划分成了十一个阶段。 Nginx请求处理的十一个阶段Nginx请求处理的十一个阶段 OpenResty仿效Nginx，也把Lua模块指令的执行过程分为了四个阶段 Openresty处理请求的四个阶段Openresty处理请求的四个阶段 Nginx与OpenResty执行阶段的对...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/programming/lua/model.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"模块处理流程"}],["meta",{"property":"og:description","content":"执行阶段 Nginx是一种基于声明性配置的HTTP服务器，它把请求处理的过程划分成了十一个阶段。 Nginx请求处理的十一个阶段Nginx请求处理的十一个阶段 OpenResty仿效Nginx，也把Lua模块指令的执行过程分为了四个阶段 Openresty处理请求的四个阶段Openresty处理请求的四个阶段 Nginx与OpenResty执行阶段的对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/programming/lua/lua-07.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:tag","content":"LUA"}],["meta",{"property":"article:published_time","content":"2023-02-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块处理流程\\",\\"image\\":[\\"https://tianmazuo.com/technology/programming/lua/lua-07.png\\",\\"https://tianmazuo.com/technology/programming/lua/lua-08.png\\"],\\"datePublished\\":\\"2023-02-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"执行阶段","slug":"执行阶段","link":"#执行阶段","children":[]},{"level":2,"title":"阶段测试","slug":"阶段测试","link":"#阶段测试","children":[]},{"level":2,"title":"阶段指令","slug":"阶段指令","link":"#阶段指令","children":[{"level":3,"title":"init_by_lua","slug":"init-by-lua","link":"#init-by-lua","children":[]},{"level":3,"title":"init_worker_by_lua","slug":"init-worker-by-lua","link":"#init-worker-by-lua","children":[]},{"level":3,"title":"set_by_lua","slug":"set-by-lua","link":"#set-by-lua","children":[]},{"level":3,"title":"rewrite_by_lua","slug":"rewrite-by-lua","link":"#rewrite-by-lua","children":[]},{"level":3,"title":"access_by_lua","slug":"access-by-lua","link":"#access-by-lua","children":[]}]}],"git":{},"readingTime":{"minutes":8.88,"words":2665},"filePathRelative":"technology/programming/lua/model.md","localizedDate":"2023年2月25日","excerpt":"<h2>执行阶段</h2>\\n<p><a href=\\"https://www.nginx.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Nginx</a>是一种基于声明性配置的<code>HTTP</code>服务器，它把请求处理的过程划分成了<a href=\\"https://nginx.org/en/docs/dev/development_guide.html#http_phases\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">十一个阶段</a>。</p>\\n<figure><img src=\\"https://tianmazuo.com/technology/programming/lua/lua-07.png\\" alt=\\"Nginx请求处理的十一个阶段\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Nginx请求处理的十一个阶段</figcaption></figure>","autoDesc":true}');export{c as comp,g as data};
