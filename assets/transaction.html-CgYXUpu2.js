import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-CiwSPZKD.js";const n={},t=e(`<p><a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>有一个非常强大的功能，就是它支持<code>事务消息</code>。所谓<code>事务消息</code>，它可以保证消息的正确投递，而且绝不丢失消息，要么全部投递成功，要么全部投递失败，绝对不存在成功一部分或失败一部分的可能。</p><br><h2 id="事务half消息机制" tabindex="-1"><a class="header-anchor" href="#事务half消息机制"><span>事务Half消息机制</span></a></h2><p>所谓<code>Half消息</code>，其实是一种试探性的机制，也就是在正式发送消息之前，先向<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>发送一个<code>Half消息</code>。这个<code>Half消息</code>对于其他系统来说是<code>看不见</code>的，起到类似于<code>回声定位</code>的作用，发送它的目的是看<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>是否能够正常响应，然后再决定后续将执行什么样的操作。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-23.png" alt="发送Half消息" tabindex="0" loading="lazy"><figcaption>发送Half消息</figcaption></figure><p>当订单履约系统发送<code>Half消息</code>成功之后，就可以更新自己的业务数据库了。不管更新业务数据库成功或失败，它都会向<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>发送相应的<code>Commit</code>或<code>Rollback</code>请求，让<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>保存或删除之前的<code>Half消息</code>。</p><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-24.png" alt="保存或删除Half消息" tabindex="0" loading="lazy"><figcaption>保存或删除Half消息</figcaption></figure><p>只有当<code>Half消息</code>被成功提交之后，其他的下游系统，例如积分、优惠券、红包等系统才能收到订单支付成功的消息并进行后续处理。</p><ul><li>如果<code>Half消息</code>发送成功，<code>Half消息</code>也保存到了<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>，而订单系统却因为网络延迟一直没有收到<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>返回的响应，自己先执行了更新数据库的操作。为了解决这个缺陷，<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>有一个补偿机制：它会定期去扫描<code>Half消息</code>的状态，如果超过一定的时间还没有删除或提交它，就会通过一个预先定义回调接口来处理。这时候就可以根据订单数据的状态来决定是删除还是保存它了，确保整个流程不出现漏洞。</li></ul><figure><img src="https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-25.png" alt="通过回调接口处理Half消息" tabindex="0" loading="lazy"><figcaption>通过回调接口处理Half消息</figcaption></figure><ul><li>如果是回滚或提交<code>Half消息</code>的时候发生异常或失败，同样也会通过回到接口实现对<code>Half消息</code>的处理。</li></ul><p>本质上，上面整个的对<code>Half消息</code>的处理过程，就是一种确保业务执行不出纰漏的消息投递机制。</p><br><h2 id="消息零丢失方案" tabindex="-1"><a class="header-anchor" href="#消息零丢失方案"><span>消息零丢失方案</span></a></h2><p>如果在给<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>发送消息的时候，因为网络异常导致消息发送失败，是完全可以通过<code>以同步的方式发送消息 + 反复重试</code>的方式，确保消息一定可以投递到<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>中去的。</p><p>这里有一个问题，到底是先更新订单数据库还是先发消息到<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>？</p><p>如果先执更新订单数据库再发送消息，那么伪代码就是这样的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 执行本地事务更新订单数据库</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">completedOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 发送消息的到MQ</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 如果消息发送失败，就重试3次</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 重试发送消息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 重试多次失败后回滚本地事务</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">flag) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但问题是，如果在第3行代码<code>orderService.completedOrder();</code>刚执行完时，订单系统崩溃了怎么办？此时的消息是没有发出去的，而且<code>catch</code>中的代码是根本没机会执行的。如果要想发送消息，意味着整个代码要重新执行一遍。即使有幂等机制的支持，也会给系统性能造成不必要的拖累。</p><p>如果把本地事务和发送消息的代码放到一个事务中呢？</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> payOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 执行本地事务更新订单数据库</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">completedOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 更新Redis缓存</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">updateRedis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 更新Mongodb数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">updateMongodb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 更新Elasticsearch数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">updateElasticsearch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 更新其他数据</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // ......</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 发送消息的到MQ</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 如果消息发送失败，就重试3次</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // 重试发送消息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 重试多次失败后抛出异常回滚本地事务</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">flag) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式也会因为多次重试导致性能低下，而且像<code>Redis</code>、<code>Mongodb</code>和<code>Elasticsearch</code>这类数据存储系统，是几乎没有回滚机制的，数据可能仍然不一致。</p><p>所以，这种<code>同步发送消息 + 反复重试</code>的方式虽然可以满足功能要求，却达不到某些性能上和数据一致性、健壮性的要求。</p><p>因此，真正要满足消息一定可以投递到<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>且性能良好的方案，最好的还是基于<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>的事务消息机制。</p><br><h2 id="关键点" tabindex="-1"><a class="header-anchor" href="#关键点"><span>关键点</span></a></h2><p>从发送消息开始到所有业务执行完毕，<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>全链路的消息零丢失方案包括这几个关键点。</p><ul><li><p>发送消息到<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>的零丢失。</p><ul><li><p>方案一：同步发送消息 + 反复重试。</p></li><li><p>方案二：事务消息机制。</p></li></ul></li><li><p>生产消息的零丢失：采用同步刷盘策略 + 主从架构同步，只要其中的一个<code>Broker</code>收到消息后再写入磁盘后，再同时同步给其他<code>Broker</code>，并返回给生产者写入成功的消息，就可以保证<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener noreferrer">RocketMQ</a>自身不会弄丢消息。</p></li><li><p>消费消息的零丢失：以非异步多线程的方式消费完消息后再提交ACK确认。</p></li></ul>`,28),l=[t];function h(r,k){return a(),s("div",null,l)}const o=i(n,[["render",h],["__file","transaction.html.vue"]]),c=JSON.parse('{"path":"/technology/middleware/rocketmq/transaction.html","title":"事务与消息零丢失方案","lang":"zh-CN","frontmatter":{"title":"事务与消息零丢失方案","icon":"envelope-circle-check","category":["中间件","RocketMQ"],"tag":["中间件","RocketMQ","事务消息"],"date":"2023-02-24T00:00:00.000Z","isOriginal":true,"star":true,"description":"RocketMQ有一个非常强大的功能，就是它支持事务消息。所谓事务消息，它可以保证消息的正确投递，而且绝不丢失消息，要么全部投递成功，要么全部投递失败，绝对不存在成功一部分或失败一部分的可能。 事务Half消息机制 所谓Half消息，其实是一种试探性的机制，也就是在正式发送消息之前，先向RocketMQ发送一个Half消息。这个Half消息对于其他系统...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/middleware/rocketmq/transaction.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"事务与消息零丢失方案"}],["meta",{"property":"og:description","content":"RocketMQ有一个非常强大的功能，就是它支持事务消息。所谓事务消息，它可以保证消息的正确投递，而且绝不丢失消息，要么全部投递成功，要么全部投递失败，绝对不存在成功一部分或失败一部分的可能。 事务Half消息机制 所谓Half消息，其实是一种试探性的机制，也就是在正式发送消息之前，先向RocketMQ发送一个Half消息。这个Half消息对于其他系统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-23.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"RocketMQ"}],["meta",{"property":"article:tag","content":"事务消息"}],["meta",{"property":"article:published_time","content":"2023-02-24T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务与消息零丢失方案\\",\\"image\\":[\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-23.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-24.png\\",\\"https://tianmazuo.com/technology/middleware/rocketmq/rocketmq-25.png\\"],\\"datePublished\\":\\"2023-02-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"事务Half消息机制","slug":"事务half消息机制","link":"#事务half消息机制","children":[]},{"level":2,"title":"消息零丢失方案","slug":"消息零丢失方案","link":"#消息零丢失方案","children":[]},{"level":2,"title":"关键点","slug":"关键点","link":"#关键点","children":[]}],"git":{},"readingTime":{"minutes":4.72,"words":1415},"filePathRelative":"technology/middleware/rocketmq/transaction.md","localizedDate":"2023年2月24日","excerpt":"<p><a href=\\"https://rocketmq.apache.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">RocketMQ</a>有一个非常强大的功能，就是它支持<code>事务消息</code>。所谓<code>事务消息</code>，它可以保证消息的正确投递，而且绝不丢失消息，要么全部投递成功，要么全部投递失败，绝对不存在成功一部分或失败一部分的可能。</p>\\n<br>\\n<h2>事务Half消息机制</h2>\\n<p>所谓<code>Half消息</code>，其实是一种试探性的机制，也就是在正式发送消息之前，先向<a href=\\"https://rocketmq.apache.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">RocketMQ</a>发送一个<code>Half消息</code>。这个<code>Half消息</code>对于其他系统来说是<code>看不见</code>的，起到类似于<code>回声定位</code>的作用，发送它的目的是看<a href=\\"https://rocketmq.apache.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">RocketMQ</a>是否能够正常响应，然后再决定后续将执行什么样的操作。</p>","autoDesc":true}');export{o as comp,c as data};
