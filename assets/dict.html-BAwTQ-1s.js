import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,c as o,a as e,e as i,b as n,w as a,d as l,o as r}from"./app-CiwSPZKD.js";const p={},c=l('<p>想学习一种思想或一门技术，就需要理解这个思想或技术所赖以存在的环境，也称<code>语境</code>，也就是俗称的<code>行话</code>，或者<code>专业术语</code>。</p><p>本想将这些概念融入到具体案例分析之中，但结合自己的学习经历和痛点，觉得有一本小册子一样的东西可能更好，尤其是对于<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>这种复杂度稍高的设计思想来说尤其如此。一来方便集中查阅，二来也可以集中做出解释，避免出现前后不一致的混乱。</p><p>通常情况下，现实世界与软件世界的映射关系是这样的。</p><ul><li><p>现实世界有什么<code>事物</code>，软件世界就有什么<code>对象</code>。</p></li><li><p>现实世界有什么<code>行为</code>，软件世界就有什么<code>方法</code>。</p></li><li><p>现实世界有什么<code>关系</code>，软件世界就有什么<code>关联</code>。</p></li></ul><br><h2 id="统一语言" tabindex="-1"><a class="header-anchor" href="#统一语言"><span>统一语言</span></a></h2><p>有的地方中也称为<code>通用语言</code>，但个人认为<code>统一语言</code>更合适一些，因为<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>是为了厘清业务边界和业务内容的，所有的参与者都在一个统一的语境下完成工作，而且也可以和<a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language" target="_blank" rel="noopener noreferrer">UML（统一建模语言）</a>关联起来。</p><p>所谓<code>统一语言</code>，其实就是一个术语转换表。</p><p>例如，跨境电商的业务专家可能会说<code>虚拟物流</code>、<code>无形损耗</code>、<code>堆码</code>、<code>共同配送</code>、<code>拣选报关行</code>、<code>JIT</code>、<code>战争附加费</code>等，这些对工程师来说完全是一头雾水。反过来，技术专家可能会说<code>幂等</code>、<code>熔断限流</code>、<code>令牌桶</code>、<code>异步</code>、<code>回调</code>、<code>适配器模式</code>、<code>SnowFlake</code>等，这些对业务专家来说也同样是云里雾里。</p><p>所以就要专家们都坐下来，花时间把这些不同专业领域的术语做一个翻译，形成<code>术语表</code>（类似<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8" target="_blank" rel="noopener noreferrer">数据字典</a>，也可以看成是业务界的<a href="https://en.wikipedia.org/wiki/Internationalization_and_localization" target="_blank" rel="noopener noreferrer">i18n或l10n</a>）。</p><p>这其中也包括英文和拼音的命名规范。例如，同样是用来表示<code>性别</code>的字段，如果后端是<code>gender</code>，而前端是<code>sex</code>（或者相反），那么就会造成信息混乱。这同时也为编码规范提供依据，消除代码中的<a href="https://zh.wikipedia.org/wiki/" target="_blank" rel="noopener noreferrer">魔法数字</a>。</p><br><h2 id="领域建模" tabindex="-1"><a class="header-anchor" href="#领域建模"><span>领域建模</span></a></h2><p>这<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>中进行业务抽象的一个过程。</p><p>如前所述，<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>中包括<code>业务分析</code>、<code>战略设计</code>和<code>战术设计</code>这三大过程，也就是把现实世界中的问题<code>搬</code>到软件世界中，用对应的技术手段去解决掉。</p><p>拿买东西来说，它在现实世界中是<code>一手交钱一手交货</code>，而到了软件世界中就是这样的过程。</p><ul><li><p>从我的账户转账到商家账户（这里的往来账户可以是任意组合，如银行卡、钱包余额、第三方支付、红包、卡券、积分等）。</p></li><li><p>商家收到支付成功通知。</p></li><li><p>商家收到支付成功的通知后就开启发货进程，但需要用户确认收货后商家才能真正收到钱。</p></li></ul><p><a href="https://baike.baidu.com/item/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">领域建模（或领域模型）</a>就是实现这种异构世界之间的<code>转换</code>的一种方法或行为。</p><br><h2 id="业务分析" tabindex="-1"><a class="header-anchor" href="#业务分析"><span>业务分析</span></a></h2><p>和通常意义上的<a href="https://www.ibm.com/cn-zh/topics/business-analytics" target="_blank" rel="noopener noreferrer">业务分析</a>不同，<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>中的<code>业务分析</code>主要是通过<a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A2%A8%E6%9A%B4" target="_blank" rel="noopener noreferrer">事件风暴</a>的方式快速实现对复杂的业务问题的拆解，从而提取开发需要的（领域）设计模型。</p><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A2%A8%E6%9A%B4" target="_blank" rel="noopener noreferrer">事件风暴</a>类似于<a href="https://zh.wikipedia.org/wiki/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA%E6%B3%95" target="_blank" rel="noopener noreferrer">头脑风暴</a>，但和<a href="https://zh.wikipedia.org/wiki/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA%E6%B3%95" target="_blank" rel="noopener noreferrer">头脑风暴</a>不同的是，它还需要明确各类由<code>风暴</code>产生的实际活动之间的联系，也需要明确所有参与者的输入和输出。</p><p>参与者主要包括业务专家、<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>专家、架构师、产品经理、项目经理、开发人员、设计人员、测试人员、运维人员等角色。</p><p>拿电商中的<a href="https://en.wikipedia.org/wiki/Warehouse_management_system" target="_blank" rel="noopener noreferrer">WMS</a>子系统来说，其实际活动可能包括：<code>用户下单</code>、<code>生成拣货单</code>、<code>生成拣货任务</code>、<code>拣取货品</code>、<code>订单合并</code>、<code>订单校验</code>、<code>封装包裹</code>这一系列步骤。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-07.png" alt="WMS中的业务分析" tabindex="0" loading="lazy"><figcaption>WMS中的业务分析</figcaption></figure><br><h2 id="战略设计" tabindex="-1"><a class="header-anchor" href="#战略设计"><span>战略设计</span></a></h2><p>从宏观层面来说，<code>战略设计</code>就是公司的发展目标和实现这些目标的路径。</p><p>从<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>层面来说，就是根据<code>业务分析</code>得到<code>统一语言</code>、<code>领域分析</code>、<code>领域模型</code>，形成清晰的<code>限界上下文</code>，并进行<a href="https://baike.baidu.com/item/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">领域建模</a>。</p><p><a href="https://baike.baidu.com/item/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">领域建模</a>可以说是<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>中极为核心和关键的步骤。<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>设计的好不好，直接取决于这一步，它的大致步骤是如下。</p><ul><li><p>找出<code>实体</code>和<code>值对象</code>等领域对象。</p></li><li><p>构建<code>聚合</code>和<code>聚合根</code>。</p></li><li><p>划分聚合到相应的<code>限界上下文</code>。</p></li></ul><br><h2 id="战术设计" tabindex="-1"><a class="header-anchor" href="#战术设计"><span>战术设计</span></a></h2><p>有了<code>限界上下文</code>，也就有了（微）服务规划和拆分的依据。</p><p>所以，在<code>战术设计</code>环节中，就是从实际技术角度出发，用代码来实现<code>战略设计</code>中的那些<a href="https://baike.baidu.com/item/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">领域模型</a>，它包括但不限于识别下面这些东西。</p><ul><li><p><code>聚合</code></p></li><li><p><code>聚合根</code></p></li><li><p><code>实体</code></p></li><li><p><code>值对象</code></p></li><li><p><code>领域服务</code></p></li><li><p><code>领域事件</code></p></li></ul><br><h2 id="领域事件" tabindex="-1"><a class="header-anchor" href="#领域事件"><span>领域事件</span></a></h2><p>所谓<code>领域事件</code>是指在执行业务或业务流程的过程中产生的动作。</p><p>对核心业务有实质性影响的事件才叫<code>领域事件</code>。</p><p>例如，在购物车中结算商品时，如果用户支付成功，那么就需要创建对应的订单、同时要扣除库存，订单创建和扣减库存就是领域事件。</p><p>而用户登录失败后给出提示，就不是领域事件（但登录失败后锁定账户，也有可能是或不是领域事件）。</p><p>领域事件可以是业务流程的一个步骤。例如，登录后增加积分。</p><p>也可以是执行定时任务过程中发生的事件。例如，提现额度的定期调整。</p><p>或者一个事件发生后触发的后续动作。例如，转账失败后钱款原路退回。</p><p>领域事件通常是通过解耦的方式实现业务间的异步化执行。</p><p>因为领域事件的本质在于事件的<code>解耦</code>和<code>异步</code>。</p><br><h2 id="领域服务" tabindex="-1"><a class="header-anchor" href="#领域服务"><span>领域服务</span></a></h2><p>用于执行领域操作和业务规则，就是将一些似是而非的非核心功能单独剥离出来。</p><p>例如，对于创建订单而言，一些权益和账户的校验并不属于核心业务，但会给核心业务造成影响。</p><p>或者当用户下单却未付款时，超时后需要自动删除该订单。</p><p>这种操作既不由用户来完成，也不由商家来完成，所以将它作为领域服务合情合理。</p><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的提出者<a href="https://ddd.academy/eric-evans/" target="_blank" rel="noopener noreferrer">Eric Evans</a>认为好的领域服务应该具备如下特征。</p><ul><li><p>相关操作不是实体或者值对象的本质部分（可有可无）。</p></li><li><p>接口定义在<a href="https://baike.baidu.com/item/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">领域模型</a>的其他元素中。</p></li><li><p>操作是无状态的。</p></li></ul><br><h2 id="事件风暴" tabindex="-1"><a class="header-anchor" href="#事件风暴"><span>事件风暴</span></a></h2><p>事件即事实，即已经发生的并且能对业务产生实质性影响的事实，并且它可能需要保存下来或者得到响应。</p><p>官方的定义是<code>一种以协作探索复杂业务领域为目标的，灵活的作坊（workshop）形式的活动</code>。</p><p>用大白话说就是拉上业务方（甲方）、产品经理、技术经理、研发工程师、测试工程师、运维工程师、UI设计师等若干角色，以<a href="https://zh.wikipedia.org/wiki/%E8%85%A6%E5%8A%9B%E6%BF%80%E7%9B%AA%E6%B3%95" target="_blank" rel="noopener noreferrer">头脑风暴</a>的形式探讨业务规则、流程及约束，使业务得到真正的统一的认识，避免各方的理解误差。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-08.png" alt="事件风暴" tabindex="0" loading="lazy"><figcaption>事件风暴</figcaption></figure><br><h2 id="限界上下文" tabindex="-1"><a class="header-anchor" href="#限界上下文"><span>限界上下文</span></a></h2><p><code>限界</code>就是领域的边界，<code>上下文</code>则是语义环境。通过限定领域的语义环境，就可以在统一的领域边界内用统一的语言交流，而不致于出现理解偏差。</p><p>拿商品举例，虽然商品有自身的较为固定的属性，但从<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>的角度来看，在不同的子域应该是有所侧重。</p><ul><li><p>在商品子域，就是商品本身所属的领域，自然是需要具备完整的业务属性。</p></li><li><p>在店铺子域，由于店铺本身就是商品售卖的聚集地，因此和商品子域的重合度会比较高。而且不同的业务领域，其对应的业务属性也会有略微差异。例如对于某宝来说，店铺子域应该是没有<code>成色</code>这个属性的，但如果是二手商品的电商平台就必定会有。包括<code>批发价</code>，某宝是没有的，但这里仍然显示出来，只为说明业务领域的不同会造成业务属性的不同这个问题。</p></li><li><p>在订单子域，由于订单只关心商品名称、规格、数量和单价，因此大大减少了业务属性的数量，但有一些衍生出来的业务属性。</p></li><li><p>在物流子域，它只关心商品的仓储、运输、配送状态，最多还需要确认商品是否在有效期内，也有一些因此衍生出来的业务属性。</p></li><li><p>除了业务属性之外，还需要对应的业务操作。例如，店铺子域可以有商品的上下架，其他子域是没有的，但这里暂时不考虑操作，仅划分属性。</p></li></ul><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-09.png" alt="商品的限界上下文" tabindex="0" loading="lazy"><figcaption>商品的限界上下文</figcaption></figure><p>其他划分<code>限界上下文</code>的方式有这么两种。</p><ul><li><p>具有逻辑一致性的规则和操作一般都会划在<code>相同的限界上下文</code>里面。例如，商品的编辑、存草稿、上下架、预览，一般都会在同一个限界上下文里。</p></li><li><p>具有不同时间线的业务需求一般都划分为<code>不同的限界上下文</code>。例如，浏览商品、加入购物车、下单/支付、发货、确认收货、评价一般都会在不同限界上下文里。</p></li></ul><br><h2 id="上下文映射" tabindex="-1"><a class="header-anchor" href="#上下文映射"><span>上下文映射</span></a></h2><p>既然有了<code>限界上下文</code>，那这些<code>限界上下文</code>之间就一定会有某种逻辑顺序或调用关系，也就是业务之间的调用关系和流程。</p><p>理论上存在着若干种上下文之间的映射关系，但实际上每家公司的业务都是不同的，而且公司的开发文化、技术决策、组织结构都不相同，所以上下文映射也会有些差别。</p><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>根据团队协作的方式与紧密程度，定义了若干种团队协作模式。</p><ul><li><p><code>分离（Separate Way）上下文</code>：就是两个限界上下文之间没有半毛钱的关系，这也是最好的关系。</p></li><li><p><code>客户-供应（Customer-Supplier）上下文</code>：这体现的是一种体现上下游的合作关系，上游标记为<code>U（Upstream）</code>，下游标记为<code>D（Downstream）</code>。</p></li><li><p><code>遵奉者（Conformist）上下文</code>，是<code>客户-供应</code>关系的变种，它指的是下游团队完全依赖于上游团队的服务，而且还无法改变。这个在跨团队，甚至跨组织的应用中很可能会出现。之所以有这种情况发生，就是为了抵消模型变换的成本。</p></li><li><p><code>OHS（Open Host Service） + PL（Published Language）上下文</code>：<code>开放主机服务</code> + <code>发布语言</code>，也算是<code>客户-供应</code>关系的变种，其实就是上游承诺提供一组不会改变的接口服务给下游。例如，云服务商提供的应用<a href="https://en.wikipedia.org/wiki/API" target="_blank" rel="noopener noreferrer">API接口</a>就属于这种模式。</p></li><li><p><code>发布-订阅（Publish-Subscribe）上下文</code>：一般是通过<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6" target="_blank" rel="noopener noreferrer">消息中间件</a>来解耦，消息生产者标记为<code>P</code>，消费者标记为<code>S</code>。</p></li><li><p><code>共享内核（Shared Kernel）上下文</code>：通常是为其他业务服务代码或微服务提供代码库，例如<code>jar</code>包，这比较容易造成耦合，而且改动起来也相当麻烦，牵一发动全身，一般老系统中比较多见。</p></li><li><p><code>合作关系（Partnership）上下文</code>：少了其中的一个，另一个也难以继续存在。一种强耦合关系，甚至循环依赖，变动时容易引发问题。</p></li></ul><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-10.png" alt="几种不同的上下文映射关系" tabindex="0" loading="lazy"><figcaption>几种不同的上下文映射关系</figcaption></figure><p><code>U-D</code>其实就是<code>客户端-服务器</code>的另一种表述方式，也可以用自己的理解来代替<code>U-D</code>。</p><br><h2 id="防腐层" tabindex="-1"><a class="header-anchor" href="#防腐层"><span>防腐层</span></a></h2>',79),h=e("code",null,"防腐层",-1),g=e("code",null,"ACL（Anti Corruption Layer）",-1),k=e("li",null,[e("p",null,"实现新老系统之间的隔离。")],-1),y=e("li",null,[e("p",null,"对上游系统进行改造，不影响下游系统。")],-1),f=e("li",null,[e("p",null,"对接口进行封装，对调用者屏蔽内部信息。")],-1),m=l(`<p><code>防腐层</code>其实并不是什么新概念，大多数人其实一直都在使用它。</p><p>例如，在<a href="https://en.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>中<code>Controller</code>负责调用<code>Service</code>层提供的服务。如果现在<code>Service</code>接口的参数放生变化（参数名改变、参数类型改变，或者参数的个数改变），那么调用的时候就会抛异常。为了解决这个问题，就需要一个专门的机制来处理并且对<code>Controller</code>屏蔽这种变化。</p><p>这种屏蔽不同系统之间的变化，或者封装访问方法的机制就称之为<code>防腐层</code>。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-11.png" alt="防腐层" tabindex="0" loading="lazy"><figcaption>防腐层</figcaption></figure><br><h2 id="领域与子域" tabindex="-1"><a class="header-anchor" href="#领域与子域"><span>领域与子域</span></a></h2><p>任何业务系统都会有自己需要招揽的顾客、需要服务的用户和需要解决的问题，不同的业务系统，这些内容都是不一样的。</p><p>例如，电商系统和社交系统，虽然都可以卖东西，也都可以互发消息，也都可以建群组，但他们的核心关注点，也就是需要解决的核心问题肯定是不一样的。</p><p><code>领域</code>，顾名思义，就是范围与边界。好像动物世界中狮子的领地一样。<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>也会不断对业务进行抽象、归类、细分，当这项任务完成后，就会形成初步的业务边界，即哪些问题是需要解决的，哪些是暂时不用关注的，而哪些又是毫无关系的，在边界之内就是可以解决业务问题的<a href="https://baike.baidu.com/item/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">领域模型</a>。</p><p>将领域进一步划分，按照不同的业务单元，就像每家每户都有客厅、主卧、次卧、厨房、卫生间一样，这些不同的业务单元虽然都从属于同一个大领域，但把它们再划分成更小的子领域会有利于问题的解决，正如主卧、厨房和卫生间的风格、功能和装修花费肯定是不同的一样。</p><p>一个领域一般会有多个子域，这些子域如果过大，还可以再拆分。例如，客厅连接的阳台可以封闭成一个小空间，其装修又会和客厅有所不同。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-12.png" alt="领域与子域" tabindex="0" loading="lazy"><figcaption>领域与子域</figcaption></figure><p>子域和<code>限界上下文</code>一般有两种不同的关系。</p><ul><li><p><code>一对多</code>的关系，即<code>子域:限界上下文 = 1:n</code>。</p></li><li><p><code>一对一</code>的关系，即<code>子域:限界上下文 = 1:1</code>，这样便于维护，其实大多数情况下都是这种关系。</p></li></ul><p>到底是<code>1:n</code>还是<code>1:1</code>，更多取决于公司业务规模。</p><p>例如，互联网大厂的物流子域就是一个非常庞大的业务，它里面又可分为仓储、运输、配送等子域。那么此时物流子域和限界上下文就可能是一对多的关系，而且还可能是<code>1 : n : m</code>的关系。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-13.png" alt="子域和限界上下文的关系" tabindex="0" loading="lazy"><figcaption>子域和限界上下文的关系</figcaption></figure><p>子域多了以后，就要搞清楚一件事：究竟哪些才是最重要的？哪些是都会做的？为了区分很多不同的子域，就出现了<code>核心域</code>、<code>通用域</code>和<code>支撑域</code>的概念。</p><br><h2 id="核心域" tabindex="-1"><a class="header-anchor" href="#核心域"><span>核心域</span></a></h2><p>就是业务的核心功能。例如，对于电商系统来说，<code>商品</code>、<code>店铺</code>、<code>订单</code>一定是最核心功能的功能。而对于社交系统，即时通讯、通讯录和群组也是最核心的功能。</p><p>即使是对于同是电商企业的某宝和某东来说，由于业务属性的不同，其<code>核心域</code>也是不同的。</p><p>例如，对于某宝来说，租户、佣金一定是核心域。但对于某东来说，因为其自营模式比重较大，那么它的仓储、物流和供应链就会是<code>核心域</code>。</p><br><h2 id="支撑域" tabindex="-1"><a class="header-anchor" href="#支撑域"><span>支撑域</span></a></h2><p>以开发为例，对于电商系统来说，除了需要有核心的业务功能以外，一些非核心的业务功能其实也是不可或缺的，因为没有它们，可能核心功能就会运行不畅，比如统计分析、客服工单。</p><p>对于<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a>来说，<code>支撑域</code>具有一定的企业专属特性，但不具有通用性。例如，某宝和某东的商业报表从设计到结果都会不一样。</p><br><h2 id="通用域" tabindex="-1"><a class="header-anchor" href="#通用域"><span>通用域</span></a></h2><p>还是以开发为例，除了核心功能（核心域）和非核心功能（支撑域）之外，还有一部分内容其实是几乎每个电商系统都会有的。</p><p>例如，权限系统、监控系统、日志系统，这类系统没有太多定制化的东西，业务属性较弱，对接任何平台都可以，指标也几乎都相同，也没有针对特定企业的限制，这些可以统统放到<code>通用域</code>中。</p><figure><img src="https://tianmazuo.com/technology/engineering/domain/ddd-14.png" alt="核心域、支撑域和通用域" tabindex="0" loading="lazy"><figcaption>核心域、支撑域和通用域</figcaption></figure><br><h2 id="实体和值对象" tabindex="-1"><a class="header-anchor" href="#实体和值对象"><span>实体和值对象</span></a></h2><p><code>实体（Entity）</code>是<a href="https://baike.baidu.com/item/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">领域模型</a>中富有业务行为且具备<code>唯一标识</code>的对象。</p><ul><li><p><code>唯一标识</code>：可以是用户指定的，可以是系统生成的，也可以是其他限界上下文中传递过来的。</p></li><li><p><code>业务形态</code>：在不同的子域中，同一个实体往往有不同的形态，如商品子域中的商品、订单子域中的商品。</p></li><li><p><code>运行形态</code>：在相同的子域中，同一个实体有不同的运行形态，如<code>DO</code>、<code>VO</code>、<code>DTO</code>等。</p></li></ul><p><code>值对象（Value Object）</code>则用来描述领域的特定方面的属性或属性集合，并且没有<code>唯一标识</code>。</p><p>例如，省/市/区/县不同层次的地址共同组成了<code>收货地址</code>这个属性集。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.itechthink.ddd.datatype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * 实体和值对象</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 用户实体，有唯一标识guid</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 值对象，唯一标志符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> guid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 单一属性值对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 单一属性值对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 多属性值对象，被实体引用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Address</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 值对象，无唯一标识</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 单一属性值对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> province</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 单一属性值对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> city</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 单一属性值对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> town</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 单一属性值对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> street</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="聚合和聚合根" tabindex="-1"><a class="header-anchor" href="#聚合和聚合根"><span>聚合和聚合根</span></a></h2><p><code>聚合</code>就是一组业务相关对象的集合，由业务紧密关联的实体和值对象组合而成，且具备业务约束。例如，一个公司中的部门，就是共同从事相同职责的员工的聚合。</p><p>一个<code>限界上下文</code>可能包含多个<code>聚合</code>，一个<code>聚合</code>可以包含多个<code>实体</code>和<code>值对象</code>。</p><p>每个<code>聚合</code>都有一个<code>聚合根</code>，它类似于一个组织的负责人，它自身也是<code>实体</code>，且还是实体的管理者。</p><p>对<code>聚合</code>的访问就是通过<code>聚合根</code>进行的，而<code>聚合</code>里面的<code>子实体</code>对外界是完全封闭的。</p><p><code>聚合</code>和<code>聚合根</code>的生命周期必须保持一致，<code>聚合根</code>及其内部<code>实体</code>和<code>值对象</code>的声明和销毁需要同步。也就是说，如果<code>聚合根</code>不存在了，那么<code>聚合</code>也不应该继续存在。</p><p>例如，订单和订单详情组成的<code>聚合</code>中，订单就是<code>聚合根</code>，没有订单这个<code>聚合根</code>，订单详情不可能单独存在。</p><br><h2 id="工厂和资源库" tabindex="-1"><a class="header-anchor" href="#工厂和资源库"><span>工厂和资源库</span></a></h2>`,49),u=e("code",null,"聚合",-1),b=e("code",null,"实体",-1),A=e("code",null,"值对象",-1),D=l('<p><code>工厂（Factory）</code>就是专门来干这个事的，它封装实现，屏蔽细节。例如，仓库的分拣和包装工作，就是典型的工厂应用环节。</p><p>最好的例子莫过于<a href="https://spring.io/" target="_blank" rel="noopener noreferrer">Spring</a>中的<code>依赖注入</code>机制。</p><p>而<code>资源库（Repository）</code>是对资源访问的抽象，这里指的资源不限于数据、网络、文件、多媒体等。</p><p>它用来解耦对象的操作和具体实现，常见的资源库包括数据资源、文件资源、物流资源、支付资源、消息资源等。</p><p><code>资源库</code>和业务逻辑无关，只负责资源的读取和保存，至于资源要怎么应用于业务不是资源库的职责。例如，库管员并不关心货品发到哪里，只负责照单发货即可。</p><p>有些地方也把<code>资源库</code>称为<code>仓储</code>。</p><br><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><table><thead><tr><th style="text-align:center;">名词术语</th><th style="text-align:left;">大白话</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">统一语言</td><td style="text-align:left;">术语表，类似数据字典，也可以看成是业务中使用的i18n</td><td style="text-align:left;">战争附加费（WRS）：由于船舶、货物、港口及其它方面的种种原因，使得船方在运输货物时增加费用开支或蒙受经济损失，船方为补偿这些开支或损失向货主收取的费用。一般这个费用主要在地中海航线的LATTAKIA(叙利亚)、HAIFA(以色列)、ASHDOD(以色列)、BEIRUT(黎巴嫩)这几个港口出现</td></tr><tr><td style="text-align:center;">领域建模</td><td style="text-align:left;">将现实世界转换成软件世界的过程和方法</td><td style="text-align:left;">建筑施工图就是一种工程上的建设和建筑模型</td></tr><tr><td style="text-align:center;">业务分析</td><td style="text-align:left;">用事件风暴方式抽象出所需的业务模式、关系、流程和约束</td><td style="text-align:left;">产生施工图纸的过程</td></tr><tr><td style="text-align:center;">战略设计</td><td style="text-align:left;">得到限界上下文、映射关系、子域及其类型、通用语言</td><td style="text-align:left;">技术决策包括开发语言、框架选型、技术架构、层次划分、事务、数据架构等</td></tr><tr><td style="text-align:center;">战术设计</td><td style="text-align:left;">得到聚合（实体、值对象）、工厂、资源库、领域服务、领域事件、命令、业务组件</td><td style="text-align:left;">应用服务其实是类似于框架通用的代码或服务，例如日志、任务调度等。战术技术决策包括是否使用多模块依赖、规划DO、DTO、VO、PO</td></tr><tr><td style="text-align:center;">领域事件</td><td style="text-align:left;">在执行业务或业务流程的过程中产生的动作，对核心业务有实质性影响的事件</td><td style="text-align:left;">支付成功后给用户发送通知，或者商家发货后给用户发送通知。领域事件和命令的区别在于：命令是人驱动的，而事件是由系统发起的</td></tr><tr><td style="text-align:center;">领域服务</td><td style="text-align:left;">有些业务逻辑方法不属于实体或值对象，就需要领域服务来完成</td><td style="text-align:left;">当用户下单却未付款时，超时后需要自动删除该订单。这种操作既不由用户来完成，也不由商家来完成，由领域服务完成最合适</td></tr><tr><td style="text-align:center;">事件风暴</td><td style="text-align:left;">类似于头脑风暴，但它还需要明确各类由<code>风暴</code>产生的实际活动之间的联系，也需要明确所有参与者的输入、输出</td><td style="text-align:left;">例如：浏览商品 -&gt; 下单 -&gt; 权益校验 -&gt; 支付 -&gt; 发货 -&gt; 确认收货 -&gt; 交易完成</td></tr><tr><td style="text-align:center;">限界上下文</td><td style="text-align:left;">限定领域模型的语义边界，让业务边界和职责更加清晰</td><td style="text-align:left;">如果不划分限界上下文，那么在每一个子域，如商品子域、店铺子域、订单子域和物流子域中，商品这个实体都需要展现出全部的业务属性，这样显然是比较浪费时间和空间的</td></tr><tr><td style="text-align:center;">上下文映射</td><td style="text-align:left;">限界上下文之间的调用关系、顺序和流程</td><td style="text-align:left;">促销上下文依赖于商品上下文，而订单上下文又依赖于库存上下文</td></tr><tr><td style="text-align:center;">防腐层</td><td style="text-align:left;">运用软件设计原则对系统解耦</td><td style="text-align:left;">收银台和登录选择器就是防腐层最经典的例子</td></tr><tr><td style="text-align:center;">领域</td><td style="text-align:left;">不同的业务系统有不同的用户群体和不同的业务问题、流程</td><td style="text-align:left;">电商领域和社交领域，虽然都有订单、都有消息，但核心业务是完全不同的</td></tr><tr><td style="text-align:center;">子域</td><td style="text-align:left;">按照不同的业务单元对领域的进一步划分</td><td style="text-align:left;">电商中的用户、店铺、商品、订单、物流、结算等</td></tr><tr><td style="text-align:center;">核心域</td><td style="text-align:left;">包含企业核心业务和竞争力的子域</td><td style="text-align:left;">电商中的佣金结算子域和物流仓储子域，就属于电商核心业务</td></tr><tr><td style="text-align:center;">支撑域</td><td style="text-align:left;">除核心业务以外的一些非核心业务功能，而且具有企业自身专有属性，也就是不同的企业支撑域也会有不同</td><td style="text-align:left;">电商中的CRM、BI就是支撑域</td></tr><tr><td style="text-align:center;">通用域</td><td style="text-align:left;">一些偏技术层面但业务运行上又需要有的部分</td><td style="text-align:left;">认证与权限、平台运行监控子系统等</td></tr><tr><td style="text-align:center;">实体</td><td style="text-align:left;">领域模型中富有业务行为且具备唯一标识的对象</td><td style="text-align:left;">可利理解为数据库表，例如用户实体、订单实体</td></tr><tr><td style="text-align:center;">值对象</td><td style="text-align:left;">用来描述领域的特定方面的属性或属性集合，且没有唯一标识</td><td style="text-align:left;">例如用户详细地址，可以组成一个Address值对象，也可以拆分成省/市/区/县</td></tr><tr><td style="text-align:center;">聚合</td><td style="text-align:left;">一组业务相关对象的集合，类似于一个公司中的部门</td><td style="text-align:left;">用户和用户详情、订单和订单详情就是聚合关系</td></tr><tr><td style="text-align:center;">聚合根</td><td style="text-align:left;">在聚合关系中负责管理聚合的实体</td><td style="text-align:left;">订单和订单详情中的订单，就是聚合根，没有订单这个聚合根，订单详情是无法单独存在的</td></tr><tr><td style="text-align:center;">工厂</td><td style="text-align:left;">需要按照单一职责原则将对象的创建和使用相分离</td><td style="text-align:left;">需要将DO装配为DTO或VO时，就需要填补一些缺失的值对象，这种职责最适合由工厂来完成</td></tr><tr><td style="text-align:center;">资源库</td><td style="text-align:left;">对资源访问的抽象，这里指的资源不限于数据、网络、文件、多媒体等</td><td style="text-align:left;">数据库操作方言、文件操作方言等就是资源库的职责</td></tr></tbody></table><p>至于诸如<code>贫血模型</code>、<code>充血模型</code>、<code>业务组件</code>、<code>CQRS</code>等概念，更多属于开发层面的术语，就不再啰嗦了。</p>',10);function E(v,x){const t=s("RouteLink");return r(),o("div",null,[c,e("p",null,[h,i("又名"),g,i("，其实就是"),n(t,{to:"/technology/engineering/principle/demeter.html"},{default:a(()=>[i("迪米特法则")]),_:1}),i("的应用，它主要用于解决如下问题。")]),e("ul",null,[k,y,f,e("li",null,[e("p",null,[i("使用"),n(t,{to:"/technology/engineering/patterns/adapter.html"},{default:a(()=>[i("适配器模式（Adapter）")]),_:1}),i("将老接口转换为适合调用者的接口。")])])]),m,e("p",null,[i("在针对大型的复杂领域进行建模时，"),u,i("、"),b,i("和"),A,i("之间的依赖关系可能会变得十分复杂，非常需要按照"),n(t,{to:"/technology/engineering/principle/"},{default:a(()=>[i("单一职责原则")]),_:1}),i("将对象的创建、使用和销毁行为相分离。")]),D])}const w=d(p,[["render",E],["__file","dict.html.vue"]]),C=JSON.parse('{"path":"/technology/engineering/domain/dict.html","title":"术语字典","lang":"zh-CN","frontmatter":{"title":"术语字典","icon":"vihara","category":["开发过程","领域模型"],"tag":["开发过程","领域模型"],"date":"2022-11-09T00:00:00.000Z","isOriginal":true,"star":true,"description":"想学习一种思想或一门技术，就需要理解这个思想或技术所赖以存在的环境，也称语境，也就是俗称的行话，或者专业术语。 本想将这些概念融入到具体案例分析之中，但结合自己的学习经历和痛点，觉得有一本小册子一样的东西可能更好，尤其是对于DDD这种复杂度稍高的设计思想来说尤其如此。一来方便集中查阅，二来也可以集中做出解释，避免出现前后不一致的混乱。 通常情况下，现实...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/engineering/domain/dict.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"术语字典"}],["meta",{"property":"og:description","content":"想学习一种思想或一门技术，就需要理解这个思想或技术所赖以存在的环境，也称语境，也就是俗称的行话，或者专业术语。 本想将这些概念融入到具体案例分析之中，但结合自己的学习经历和痛点，觉得有一本小册子一样的东西可能更好，尤其是对于DDD这种复杂度稍高的设计思想来说尤其如此。一来方便集中查阅，二来也可以集中做出解释，避免出现前后不一致的混乱。 通常情况下，现实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/engineering/domain/ddd-07.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"开发过程"}],["meta",{"property":"article:tag","content":"领域模型"}],["meta",{"property":"article:published_time","content":"2022-11-09T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"术语字典\\",\\"image\\":[\\"https://tianmazuo.com/technology/engineering/domain/ddd-07.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-08.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-09.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-10.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-11.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-12.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-13.png\\",\\"https://tianmazuo.com/technology/engineering/domain/ddd-14.png\\"],\\"datePublished\\":\\"2022-11-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"统一语言","slug":"统一语言","link":"#统一语言","children":[]},{"level":2,"title":"领域建模","slug":"领域建模","link":"#领域建模","children":[]},{"level":2,"title":"业务分析","slug":"业务分析","link":"#业务分析","children":[]},{"level":2,"title":"战略设计","slug":"战略设计","link":"#战略设计","children":[]},{"level":2,"title":"战术设计","slug":"战术设计","link":"#战术设计","children":[]},{"level":2,"title":"领域事件","slug":"领域事件","link":"#领域事件","children":[]},{"level":2,"title":"领域服务","slug":"领域服务","link":"#领域服务","children":[]},{"level":2,"title":"事件风暴","slug":"事件风暴","link":"#事件风暴","children":[]},{"level":2,"title":"限界上下文","slug":"限界上下文","link":"#限界上下文","children":[]},{"level":2,"title":"上下文映射","slug":"上下文映射","link":"#上下文映射","children":[]},{"level":2,"title":"防腐层","slug":"防腐层","link":"#防腐层","children":[]},{"level":2,"title":"领域与子域","slug":"领域与子域","link":"#领域与子域","children":[]},{"level":2,"title":"核心域","slug":"核心域","link":"#核心域","children":[]},{"level":2,"title":"支撑域","slug":"支撑域","link":"#支撑域","children":[]},{"level":2,"title":"通用域","slug":"通用域","link":"#通用域","children":[]},{"level":2,"title":"实体和值对象","slug":"实体和值对象","link":"#实体和值对象","children":[]},{"level":2,"title":"聚合和聚合根","slug":"聚合和聚合根","link":"#聚合和聚合根","children":[]},{"level":2,"title":"工厂和资源库","slug":"工厂和资源库","link":"#工厂和资源库","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":23.16,"words":6947},"filePathRelative":"technology/engineering/domain/dict.md","localizedDate":"2022年11月9日","excerpt":"<p>想学习一种思想或一门技术，就需要理解这个思想或技术所赖以存在的环境，也称<code>语境</code>，也就是俗称的<code>行话</code>，或者<code>专业术语</code>。</p>\\n<p>本想将这些概念融入到具体案例分析之中，但结合自己的学习经历和痛点，觉得有一本小册子一样的东西可能更好，尤其是对于<a href=\\"https://en.wikipedia.org/wiki/Domain-driven_design\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">DDD</a>这种复杂度稍高的设计思想来说尤其如此。一来方便集中查阅，二来也可以集中做出解释，避免出现前后不一致的混乱。</p>","autoDesc":true}');export{w as comp,C as data};
