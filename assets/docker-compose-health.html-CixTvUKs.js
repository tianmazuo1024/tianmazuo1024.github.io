import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,d as e}from"./app-CiwSPZKD.js";const n={},l=e(`<div class="hint-container info"><p class="hint-container-title">准备环境</p><figure><img src="https://tianmazuo.com/technology/cicd/docker/docker-22.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>容器本身有一个健康检查的功能，但是需要在<code>Dockerfile</code>里定义，或者在执行<code>docker run</code>的时候，通过下面的一些参数指定。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--health-cmd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">              	Command</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> health</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--health-interval</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> duration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       	Time</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> between</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> running</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> check</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ms|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--health-retries</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             	Consecutive</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failures</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> needed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> report</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unhealthy</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--health-start-period</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> duration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   Start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> period</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> initialize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> before</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> starting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> health-retries</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> countdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ms|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--health-timeout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> duration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        	Maximum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> allow</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> one</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> check</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>Dockerfile</code>中定义了一个健康检查。 会每隔30秒检查一次，如果失败就会退出，退出代码是<code>1</code>。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HEALTHCHECK</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --interval=30s</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --timeout=3s</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CMD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:5000/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">exit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行下面的步骤。</p><ul><li><p>先单独启动<code>flask</code>容器，触发健康检查机制。</p></li><li><p>再启动<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>服务，让<code>flask</code>能够正常访问。</p></li></ul><p>可以查看容器详情中有有关<code>health</code>的部分。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker inspect flask</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Health&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  &quot;Status&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;starting&quot;,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  &quot;FailingStreak&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  &quot;Log&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        &quot;Start&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;2021-07-14T19:04:46.4054004Z&quot;,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        &quot;End&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;2021-07-14T19:04:49.4055393Z&quot;,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        &quot;ExitCode&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -1,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        &quot;Output&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Health check exceeded timeout (3s)&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过3次检查，如果一直不通的话，<code>health</code>的状态会从<code>starting</code>变为<code>unhealthy</code>。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker ps -a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CONTAINER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   IMAGE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       COMMAND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">              		CREATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       STATUS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                     	PORTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      	NAMES</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">059c12486019</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   flask-demo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;flask run -h 0.0.0.0&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hours</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ago</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   Up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> minutes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (unhealthy)   	5000/tcp  	flask</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>，连到<code>mybridge</code>上，<code>name=redis</code>，经过几秒钟后<code>flask</code>变成了<code>healthy</code>。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker run -d --network mybridge --name redis redis:latest redis-server --requirepass abc123</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker ps -a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CONTAINER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   IMAGE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       	COMMAND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">              		CREATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          STATUS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          				PORTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      NAMES</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bc4e826ee938</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   redis:latest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&quot;docker-entrypoint.s…&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  18</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> seconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ago</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   Up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> seconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          6379/tcp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   redis</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">059c12486019</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   flask-demo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  	&quot;flask run -h 0.0.0.0&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hours</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ago</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      Up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> minutes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (healthy) 5000/tcp   flask</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<a href="https://github.com/docker/compose" target="_blank" rel="noopener noreferrer">Docker Compose</a>也可实现健康检查，而且还能设置检查条件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">version:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;3.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">services:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  flask:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    ......</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    healthcheck:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CMD&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;curl&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;-f&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;http://localhost:5000&quot;]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      interval:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 30s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      timeout:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      retries:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      start_period:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 40s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    depends_on:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      redis-server:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        condition:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> service_healthy</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 只有当redis服务的状态是healthy时才启动flask</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  ......</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  redis-server:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    image:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis:latest</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    command</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --requirepass</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">REDIS_PASSWORD</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    healthcheck:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CMD&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;redis-cli&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ping&quot;]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      interval:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      timeout:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      retries:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    ......</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  nginx:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    ......</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      flask:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        condition:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> service_healthy</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 只有当flask服务状态是healthy时才启动nginx</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    ......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上代码中可以看出。</p><ul><li><p><a href="https://github.com/docker/compose" target="_blank" rel="noopener noreferrer">Docker Compose</a>会首先启动<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>服务容器。</p></li><li><p>只有当<a href="https://www.redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>服务的状态是<code>healthy</code>时才启动<code>flask</code>。</p></li><li><p>只有当<code>flask</code>服务状态是<code>healthy</code>时才启动<a href="https://www.nginx.org/" target="_blank" rel="noopener noreferrer">Nginx</a>。</p></li></ul><p>也就是实现了如下的<code>健康状态</code>依赖关系。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">           依赖于flask的健康状态</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                  依赖于redis的健康状态</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ———————————————————————————</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">—&gt;  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">flask</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ———————————————————————————</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">—&gt;  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>healthcheck</code>支持下列选项。</p><ul><li><p><code>test</code>：健康检查命令，例如<code>[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost/healthcheck&quot;]</code>。</p></li><li><p><code>interval</code>：健康检查的间隔，默认为<code>30</code>秒，单位(h/m/s)。</p></li><li><p><code>timeout</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，单位(h/m/s)。</p></li><li><p><code>retries</code>：当连续失败指定次数后，则将容器状态视为<code>unhealthy</code>。</p></li><li><p><code>start_period</code>：应用启动期间的健康，检测不计入统计次数，但仍会发生检测。</p></li></ul><p>和<code>CMD</code>、<code>ENTRYPOINT</code>一样，<code>healthcheck</code>只可以出现一次，如果写了多个，那么只有最后一个生效。</p><p>在<code>depends_on</code>中，可以通过添加一个<code>condition</code>属性来指定服务之间的启动条件，该属性接受三个值。</p><ul><li><p><code>service_started</code>：表示在依赖的服务启动之后，才启动本服务。</p></li><li><p><code>service_healthy</code>：表示在依赖的服务健康检查通过之后，才启动本服务。</p></li><li><p><code>service_completed_successfully</code>：表示在依赖的服务成功执行之后，才启动本服务。</p></li></ul><p>官方给出的<a href="https://github.com/docker/compose" target="_blank" rel="noopener noreferrer">Docker Compose</a>学习资源。</p><ul><li><p><a href="https://github.com/dockersamples/example-voting-app" target="_blank" rel="noopener noreferrer">docker-compose投票app</a>。</p></li><li><p><a href="https://github.com/docker/awesome-compose" target="_blank" rel="noopener noreferrer">docker-compose AWS实例</a>。</p></li></ul>`,26),t=[l];function h(k,p){return a(),i("div",null,t)}const o=s(n,[["render",h],["__file","docker-compose-health.html.vue"]]),c=JSON.parse('{"path":"/technology/cicd/docker/docker-compose-health.html","title":"docker compose服务依赖和健康检查","lang":"zh-CN","frontmatter":{"title":"docker compose服务依赖和健康检查","icon":"inbox","category":["CI&CD","Docker"],"tag":["CI&CD","Docker","Docker Compose"],"date":"2022-10-29T00:00:00.000Z","isOriginal":true,"star":true,"description":"准备环境 容器本身有一个健康检查的功能，但是需要在Dockerfile里定义，或者在执行docker run的时候，通过下面的一些参数指定。 在Dockerfile中定义了一个健康检查。 会每隔30秒检查一次，如果失败就会退出，退出代码是1。 然后执行下面的步骤。 先单独启动flask容器，触发健康检查机制。 再启动Redis服务，让flask能够正常...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/cicd/docker/docker-compose-health.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"docker compose服务依赖和健康检查"}],["meta",{"property":"og:description","content":"准备环境 容器本身有一个健康检查的功能，但是需要在Dockerfile里定义，或者在执行docker run的时候，通过下面的一些参数指定。 在Dockerfile中定义了一个健康检查。 会每隔30秒检查一次，如果失败就会退出，退出代码是1。 然后执行下面的步骤。 先单独启动flask容器，触发健康检查机制。 再启动Redis服务，让flask能够正常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/cicd/docker/docker-22.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"CI&CD"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"Docker Compose"}],["meta",{"property":"article:published_time","content":"2022-10-29T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker compose服务依赖和健康检查\\",\\"image\\":[\\"https://tianmazuo.com/technology/cicd/docker/docker-22.png\\"],\\"datePublished\\":\\"2022-10-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":3,"words":900},"filePathRelative":"technology/cicd/docker/docker-compose-health.md","localizedDate":"2022年10月29日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">准备环境</p>\\n<figure><img src=\\"https://tianmazuo.com/technology/cicd/docker/docker-22.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n</div>\\n<p>容器本身有一个健康检查的功能，但是需要在<code>Dockerfile</code>里定义，或者在执行<code>docker run</code>的时候，通过下面的一些参数指定。</p>","autoDesc":true}');export{o as comp,c as data};
