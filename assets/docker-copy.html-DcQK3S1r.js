import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,d as l}from"./app-B5m7CcSj.js";const a={},t=l(`<h2 id="copy和add" tabindex="-1"><a class="header-anchor" href="#copy和add"><span>COPY和ADD</span></a></h2><p>往镜像里复制文件有两种方式：<code>COPY</code>和<code>ADD</code>。</p><p><code>COPY</code>和<code>ADD</code>都可以把<code>local</code>的一个文件复制到镜像里，且如果目标目录不存在的话，它会自动创建。</p><p>以<code>COPY</code>命令为例。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python:3.9.5-alpine3.13</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.py</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /app/hello.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker build -f Dockerfile-copy -t hello-copy </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行后进入容器。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker run -it --rm hello-copy sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在容器中执行。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ls</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会把<code>hello.py</code>文件复制到<a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a>的<code>/app</code>目录下，如果<code>/app</code>这个文件夹不存在，则会自动创建。</p><p>而且<code>hello.py</code>文件的相关权限也会被保留到容器中。</p><p>再来看<code>ADD</code>命令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python:3.9.5-alpine3.13</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.tar.gz</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /app/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker build -f Dockerfile-add -t hello-add </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行后进入容器：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello-add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在容器中执行。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ls</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会把<code>hello.tar.gz</code>文件复制到<a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a>的<code>/app</code>目录下，如果<code>/app</code>这个文件夹不存在，则会自动创建，而且它会把<code>hello.tar.gz</code>文件在<code>/app</code>目录中自动解压缩。</p><p><code>hello.py</code>文件的相关权限同样也会被保留到容器中。</p><p>所以<code>COPY</code>和<code>ADD</code>之间的区别如下。</p><ul><li><p><code>COPY</code>用于复制普通文件。</p></li><li><p><code>ADD</code>用于复制压缩文件，且会自动解压缩。</p></li></ul><p>可以遵循这样的原则。</p><ul><li><p>所有的文件复制均使用<code>COPY</code>指令。</p></li><li><p>仅在需要自动解压缩的场合使用<code>ADD</code>。</p></li></ul><br><h2 id="workdir" tabindex="-1"><a class="header-anchor" href="#workdir"><span>WORKDIR</span></a></h2><p>目录变更命令为<code>WORKDIR</code>。</p><p>它会在进入容器时自动进入<code>WORKDIR</code>指定的目录，类似于执行了一次<code>cd</code>命令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python:3.9.5-alpine3.13</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.py</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker build -f Dockerfile-work -t hello-work </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行后进入容器。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; docker run -it --rm hello-work sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在容器中执行。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ls</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候就不需要在<code>COPY</code>指令中指明<code>/app</code>目录了。</p>`,39),h=[t];function n(d,r){return s(),e("div",null,h)}const o=i(a,[["render",n],["__file","docker-copy.html.vue"]]),c=JSON.parse('{"path":"/technology/cicd/docker/docker-copy.html","title":"文件复制和目录操作","lang":"zh-CN","frontmatter":{"title":"文件复制和目录操作","icon":"inbox","category":["CI&CD","Docker"],"tag":["CI&CD","Docker"],"date":"2022-10-09T00:00:00.000Z","isOriginal":true,"star":true,"description":"COPY和ADD 往镜像里复制文件有两种方式：COPY和ADD。 COPY和ADD都可以把local的一个文件复制到镜像里，且如果目标目录不存在的话，它会自动创建。 以COPY命令为例。 执行命令。 执行后进入容器。 在容器中执行。 它会把hello.py文件复制到Docker的/app目录下，如果/app这个文件夹不存在，则会自动创建。 而且hell...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/cicd/docker/docker-copy.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"文件复制和目录操作"}],["meta",{"property":"og:description","content":"COPY和ADD 往镜像里复制文件有两种方式：COPY和ADD。 COPY和ADD都可以把local的一个文件复制到镜像里，且如果目标目录不存在的话，它会自动创建。 以COPY命令为例。 执行命令。 执行后进入容器。 在容器中执行。 它会把hello.py文件复制到Docker的/app目录下，如果/app这个文件夹不存在，则会自动创建。 而且hell..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"CI&CD"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2022-10-09T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件复制和目录操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"COPY和ADD","slug":"copy和add","link":"#copy和add","children":[]},{"level":2,"title":"WORKDIR","slug":"workdir","link":"#workdir","children":[]}],"git":{},"readingTime":{"minutes":1.67,"words":500},"filePathRelative":"technology/cicd/docker/docker-copy.md","localizedDate":"2022年10月9日","excerpt":"<h2>COPY和ADD</h2>\\n<p>往镜像里复制文件有两种方式：<code>COPY</code>和<code>ADD</code>。</p>\\n<p><code>COPY</code>和<code>ADD</code>都可以把<code>local</code>的一个文件复制到镜像里，且如果目标目录不存在的话，它会自动创建。</p>\\n<p>以<code>COPY</code>命令为例。</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">FROM</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> python:3.9.5-alpine3.13</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">COPY</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> hello.py</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> /app/hello.py</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,c as data};
