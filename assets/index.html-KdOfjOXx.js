import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,d as a}from"./app-B5m7CcSj.js";const r={},n=a('<p>不管是一个从头搭建的<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9C%8D%E5%8B%99" target="_blank" rel="noopener noreferrer">微服务</a>项目，还是一个仍在运行中的遗留项目，当它发展到一定规模的时候，就需要对它执行各种性能优化措施了。</p><p>这些优化措施包括但不限于：引入<code>索引</code>、分析<code>执行计划（Excute Explain）</code>、<code>慢查询</code>优化、表结构优化、字段类型（包括长度）优化、业务关系优化、业务流程优化、引入<a href="https://en.wikipedia.org/wiki/NoSQL" target="_blank" rel="noopener noreferrer">NoSQL</a>、<code>主从分离</code>、<a href="https://doris.apache.org/zh-CN/docs/1.2/advanced/cold_hot_separation/" target="_blank" rel="noopener noreferrer">冷热分离</a>、<a href="https://baike.baidu.com/item/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB" target="_blank" rel="noopener noreferrer">动静分离</a>等。</p><p>然而事物的发展总有一个极限，当上述所有的手段都不管用或效果不明显的时候，就可以考虑<code>分库分表</code>措施了。不过，总体原则仍然是尽量不要去尝试<code>分库分表</code>，因为它的改动太大，搞不好整个业务层代码都得跟着改。</p><p>另外，<code>分库</code>和<code>分表</code>是两种不同的操作。</p><ul><li><code>分库</code>：是将同一个数据库中的多张不同的表拆分到另一个或多个不同的新数据库中，属于纵向拆分。</li></ul><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-01.png" alt="纵向分库" tabindex="0" loading="lazy"><figcaption>纵向分库</figcaption></figure><ul><li><code>分表</code>：则是将同一张数据表拆分成多张大小不同的表，属于横向拆分，也可以在现有的数据库中对数据表进行拆分。</li></ul><figure><img src="https://tianmazuo.com/technology/database/sharding/sharding-02.png" alt="横向分表" tabindex="0" loading="lazy"><figcaption>横向分表</figcaption></figure><p>这两种操作并没有<code>先后关系</code>或者<code>递进关系</code>，而是需要根据实际的业务开展情况和系统运行状态来决定采取哪一种，或者两种同时采取。</p><ul><li><p>由于<code>分库</code>会将数据分布到多个不同的<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>数据库，导致它的并发连接数、<code>CPU</code>数量、磁盘数量都物理增加了，所以也就可以处理更多的数据，缩短操作时间。但另一方面，网络<code>I/O</code>增加了，发生网络故障的可能性大大增加了，数据同步的压力也增加了，而且之前简单的多表关联现在需要<code>跨库查询</code>才能实现。</p></li><li><p>而<code>分表</code>虽然解决了单表的数据存储量问题，但也带来了<code>分布式事务</code>问题、<code>查询结果的聚合</code>问题（排序、分组、分页等）、<code>主键重复</code>问题、以及导致<code>二次扩容困难</code>等。</p></li></ul><p>这些问题，不管哪一个解决不好，对业务造成的影响都是致命的，可以直接决定业务是否能够正常进行下去。</p>',11),c=[n];function i(d,p){return o(),t("div",null,c)}const h=e(r,[["render",i],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/technology/database/sharding/","title":"分库分表概述","lang":"zh-CN","frontmatter":{"title":"分库分表概述","icon":"cubes-stacked","category":["数据库","分库分表"],"tag":["数据库","分库分表","MySQL"],"date":"2023-06-05T00:00:00.000Z","isOriginal":true,"star":true,"description":"不管是一个从头搭建的微服务项目，还是一个仍在运行中的遗留项目，当它发展到一定规模的时候，就需要对它执行各种性能优化措施了。 这些优化措施包括但不限于：引入索引、分析执行计划（Excute Explain）、慢查询优化、表结构优化、字段类型（包括长度）优化、业务关系优化、业务流程优化、引入NoSQL、主从分离、冷热分离、动静分离等。 然而事物的发展总有一...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/database/sharding/"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"分库分表概述"}],["meta",{"property":"og:description","content":"不管是一个从头搭建的微服务项目，还是一个仍在运行中的遗留项目，当它发展到一定规模的时候，就需要对它执行各种性能优化措施了。 这些优化措施包括但不限于：引入索引、分析执行计划（Excute Explain）、慢查询优化、表结构优化、字段类型（包括长度）优化、业务关系优化、业务流程优化、引入NoSQL、主从分离、冷热分离、动静分离等。 然而事物的发展总有一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/database/sharding/sharding-01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"分库分表"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2023-06-05T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分库分表概述\\",\\"image\\":[\\"https://tianmazuo.com/technology/database/sharding/sharding-01.png\\",\\"https://tianmazuo.com/technology/database/sharding/sharding-02.png\\"],\\"datePublished\\":\\"2023-06-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[],"git":{},"readingTime":{"minutes":2.24,"words":672},"filePathRelative":"technology/database/sharding/README.md","localizedDate":"2023年6月5日","excerpt":"<p>不管是一个从头搭建的<a href=\\"https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9C%8D%E5%8B%99\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">微服务</a>项目，还是一个仍在运行中的遗留项目，当它发展到一定规模的时候，就需要对它执行各种性能优化措施了。</p>\\n<p>这些优化措施包括但不限于：引入<code>索引</code>、分析<code>执行计划（Excute Explain）</code>、<code>慢查询</code>优化、表结构优化、字段类型（包括长度）优化、业务关系优化、业务流程优化、引入<a href=\\"https://en.wikipedia.org/wiki/NoSQL\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">NoSQL</a>、<code>主从分离</code>、<a href=\\"https://doris.apache.org/zh-CN/docs/1.2/advanced/cold_hot_separation/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">冷热分离</a>、<a href=\\"https://baike.baidu.com/item/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">动静分离</a>等。</p>","autoDesc":true}');export{h as comp,g as data};
