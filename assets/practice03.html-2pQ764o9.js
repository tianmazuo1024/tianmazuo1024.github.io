import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-B5m7CcSj.js";const t={},h=a('<h2 id="设计原则一" tabindex="-1"><a class="header-anchor" href="#设计原则一"><span>设计原则一</span></a></h2><p>在设计完表结构之后，不用马上就加索引，因为此时根本不知道会经常查询哪些数据，也就不知道怎么加索引合适。</p><p>当系统差不多开发完毕了，功能都跑通了，就可以考虑该如何创建索引了。</p><p>设计索引的第一条原则：针对SQL查询语句中的<code>WHERE</code>条件子句、<code>ORDER BY</code>排序子句和<code>GROUP BY</code>分组子句中出现的字段设计索引。</p><p>尽量利用<code>联合索引</code>，联合索引尽量包含<code>WHERE</code>、<code>ORDER BY</code>和<code>GROUP BY</code>中出现的字段，而且遵循<code>最左列匹配原则</code>、<code>等值匹配原则</code>和<code>范围匹配原则</code>。</p><br><h2 id="设计原则二" tabindex="-1"><a class="header-anchor" href="#设计原则二"><span>设计原则二</span></a></h2><p>字段基数是指某个字段的取值范围，比如对于某些状态字段，可能就只能取0或1两个值，所以它的基数就是2。</p><p>给这种基数极少的字段建立索引，还不如做全表扫描——也就是说，建立索引的时候，尽量使用基数较大的字段，这样才能发挥出B+树快速二分查找的优势。</p><p>尽量针对那些字段类型比较小的列来设计索引——因为字段类型小，所以占用磁盘空间小，搜索时性能也比较好一点——即便是对于像<code>varchar(256)</code>这样有一定长度的字段，可以仅仅针对这类字段的前若干个字符建立前缀索引，减少数据长度（只不过这种截取长度的字段是不能用到<code>ORDER BY</code>或者<code>GROUP BY</code>之中的）。</p><br><h2 id="设计原则三" tabindex="-1"><a class="header-anchor" href="#设计原则三"><span>设计原则三</span></a></h2><p>查询时语句中的字段如果参与函数或者计算，是没法利用索引的。</p><p>由于不停的增删改，聚簇索引和相应的二级索引也会不停更新，因此二级索引不要太多，如果通过两三个联合索引就能覆盖掉所有需要索引的字段就最理想了。</p><p>主键最好用<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>自增字段，或者用自增长整型，禁止使用像UUID这类字符串主键，因为自增主键不会频繁地分裂而且有序，但UUID既会频繁分裂增加数据库压力，本身也是无序的。</p><br><h2 id="社交app的索引设计" tabindex="-1"><a class="header-anchor" href="#社交app的索引设计"><span>社交APP的索引设计</span></a></h2><p>当用户注册时，需要录入一系列个人信息，然后可能会通过一定的算法给用户推荐符合的交友对象，比如附近的人、陌生人社交等。</p><p>在筛选匹配对象的时候，就需要通过一系列的条件进行过滤，这就会查询存储在<a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer">MySQL</a>用户表中的各个字段数值了。</p><p>假设<code>user</code>表中需要存储这些字段：<code>用户名</code>、<code>密码</code>、<code>真实姓名</code>、<code>性别</code>、<code>年龄</code>、<code>身份证号</code>、<code>身高</code>、<code>体重</code>、<code>民族</code>、<code>省份</code>、<code>城市</code>、<code>区县</code>、<code>爱好</code>、<code>性格</code>、<code>头像</code>、<code>最后一次登录时间</code>、<code>关注数</code>、<code>被关注数</code>、<code>综合评价</code>、<code>信用等级</code>。</p><figure><img src="https://tianmazuo.com/technology/database/mysql/mysql-75.png" alt="用户数据表" tabindex="0" loading="lazy"><figcaption>用户数据表</figcaption></figure><h3 id="实际问题一" tabindex="-1"><a class="header-anchor" href="#实际问题一"><span>实际问题一</span></a></h3><p>往往在实际开发中，<code>WHERE</code>和<code>ORDER BY</code>中的字段并不相同，而且还可能有冲突。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> weight</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> BETWEEN</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 160</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 260</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> height </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BETWEEN</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 170</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 180</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在联合索引中，类似于分数、等级字段一般都不会在最左侧，但却经常需要根据它们来排序。</p><h3 id="实际问题二" tabindex="-1"><a class="header-anchor" href="#实际问题二"><span>实际问题二</span></a></h3><p>当<code>WHERE</code>和<code>ORDER BY</code>出现冲突的时候，到底是针对<code>WHERE</code>设计索引，还是针对<code>ORDER BY</code>设计索引呢？</p><p>也就是说，到底是先基于<code>WHERE</code>筛选出数据后再进行排序还是先通过联合索引做了排序再筛选数据呢？——大多数情况下，都会 <strong><mark>优先基于WHERE筛选后再做排序</mark></strong>，而且在分页条件下，每次筛选出来的数量都不会太大，对排序造成的影响有限。</p><p>需要针对哪些字段创建联合索引呢？——这个应该取决于实际业务场景，以社交应用为例来说的话是这样的。</p><ul><li>首先将<code>省份</code>、<code>城市</code>、<code>性别</code>、<code>年龄</code>这四个字段组成联合索引<code>(province, city, gender, age)</code>，因为这是交友时的首要关注点。</li></ul><p>此时的<code>WHERE</code>语句就可以像下面这样写。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> province </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;x&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> city </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;y&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> gender </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BETWEEN</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>至于字段基数问题，如果因为基数小就不做成联合索引，那么肯定会在索引查询之外再对这几个字段进行过滤，那就还不如把它们加到索引里去——规则也需要依据实际场景进行变通。</li></ul><h3 id="实际问题三" tabindex="-1"><a class="header-anchor" href="#实际问题三"><span>实际问题三</span></a></h3><p>除了<code>省份</code>、<code>城市</code>、<code>性别</code>、<code>年龄</code>这四个字段组成的联合索引，可能<code>爱好</code>、<code>性格</code>也会有一些高频出现的选项。</p><p>如<code>爱好</code>中的<code>旅游</code>、<code>读书</code>、<code>烹饪</code>，<code>性格</code>中的<code>暖男</code>、<code>御姐</code>等，完全可以把它们加入到联合索引中去，形成<code>(province, city, gender, hobby, character, age)</code>这样的联合索引。</p><p>此时的<code>WHERE</code>语句就可以像下面这样写。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> province </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;x&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> city </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;y&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> gender </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hobby </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;旅游&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;读书&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;烹饪&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> character</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;暖男&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;御姐&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果联合索引中有些查询条件不需要，可以用<code>IN(所有枚举值)</code>的方式加入到<code>SQL</code>语句中，这样可以让所有查询条件都用上索引，且不会导致索引条件中断。</p><ul><li>之所以把<code>age</code>字段放在最后，是因为依据<code>等值匹配</code> + <code>范围匹配</code>的原则，<strong><mark>应该优先让联合索引最左侧开始的字段进行等值匹配，然后接着最后一个字段才是范围匹配</mark></strong>——一旦有字段利用了<code>范围匹配</code>，那么后续的字段就都无法再利用索引了。</li></ul><h3 id="实际问题四" tabindex="-1"><a class="header-anchor" href="#实际问题四"><span>实际问题四</span></a></h3><p>如果还需要依据用户最近的<code>登录时间</code>来筛选——例如近三天登录过的用户——该怎么处理呢？</p><p>因为即使是将联合主键设计成<code>(province, city, gender, hobby, character, age, lastlogintime)</code>这样，但按照范围匹配规则，如果<code>age</code>利用了范围查询，那么<code>lastlogintime</code>是无法再用到索引的。</p><p>可以通过一个设计技巧解决：保留<code>lastlogintime</code>字段，增加一个<code>islastlogintimein3days</code>字段，类型<code>tinyint</code>，0为<code>false</code>，1为<code>true</code>，这样一来，联合主键就成了<code>(province, city, gender, hobby, character, islastlogintimein3days, age)</code>。</p><p>此时的<code>WHERE</code>语句就可以像下面这样写。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> province </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;x&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> city </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;y&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> gender </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hobby </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;旅游&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;读书&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;烹饪&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> character</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;暖男&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;御姐&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> islastlogintimein3days </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="实际问题五" tabindex="-1"><a class="header-anchor" href="#实际问题五"><span>实际问题五</span></a></h3><p>如果仅仅只是需要使用联合索引中某些基数很低的字段，比如<code>性别</code>，来进行筛选该怎么处理呢？因为由于字段基数小，可能某个状态就会有几百万条数据行，如果这时候还要在进行排序，性能可能就非常差了。</p><p>针对这个问题，可以将这类字段再加上排序字段单独创建一个辅助联合索引，专用于解决<code>WHERE</code>条件里低基数字段查询后排序分页的问题，比如（<code>gender</code>, <code>score</code>）。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> gender </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LIMIT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时<code>score</code>是可以利用到索引的，因为通过<code>gender</code>筛选出来数据后，剩下的原本就是按照<code>score</code>进行排序的，当然是可以利用到索引的了。</p><p>依此类推，用查询频率较高的主联合索引完成80%场景下的复杂<code>WHERE</code>条件筛选，同时针对余下的<code>低基数字段</code> + <code>排序/分组</code>的20%的场景，可以设计辅助联合索引来应对。</p><p>这种方式的核心重点是：<strong><mark>尽量利用一两个复杂的多字段主联合索引，满足80%应用场景的查询需求，然后用一两个辅助联合索引满足剩下20%应用场景的查询需求</mark></strong>——高低结合，保证99%以上的查询语句都能充分利用索引提升性能。</p>',53),l=[h];function n(d,k){return e(),s("div",null,l)}const r=i(t,[["render",n],["__file","practice03.html.vue"]]),c=JSON.parse('{"path":"/technology/database/mysql/practice03.html","title":"索引实践","lang":"zh-CN","frontmatter":{"title":"索引实践","icon":"table","category":["数据库","MySQL"],"tag":["数据库","MySQL"],"date":"2023-05-12T00:00:00.000Z","isOriginal":true,"star":true,"description":"设计原则一 在设计完表结构之后，不用马上就加索引，因为此时根本不知道会经常查询哪些数据，也就不知道怎么加索引合适。 当系统差不多开发完毕了，功能都跑通了，就可以考虑该如何创建索引了。 设计索引的第一条原则：针对SQL查询语句中的WHERE条件子句、ORDER BY排序子句和GROUP BY分组子句中出现的字段设计索引。 尽量利用联合索引，联合索引尽量包...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/technology/database/mysql/practice03.html"}],["meta",{"property":"og:site_name","content":"添码座"}],["meta",{"property":"og:title","content":"索引实践"}],["meta",{"property":"og:description","content":"设计原则一 在设计完表结构之后，不用马上就加索引，因为此时根本不知道会经常查询哪些数据，也就不知道怎么加索引合适。 当系统差不多开发完毕了，功能都跑通了，就可以考虑该如何创建索引了。 设计索引的第一条原则：针对SQL查询语句中的WHERE条件子句、ORDER BY排序子句和GROUP BY分组子句中出现的字段设计索引。 尽量利用联合索引，联合索引尽量包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tianmazuo.com/technology/database/mysql/mysql-75.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"添码座"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2023-05-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"索引实践\\",\\"image\\":[\\"https://tianmazuo.com/technology/database/mysql/mysql-75.png\\"],\\"datePublished\\":\\"2023-05-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"添码座\\",\\"url\\":\\"https://www.tianmazuo.com/about/\\"}]}"]]},"headers":[{"level":2,"title":"设计原则一","slug":"设计原则一","link":"#设计原则一","children":[]},{"level":2,"title":"设计原则二","slug":"设计原则二","link":"#设计原则二","children":[]},{"level":2,"title":"设计原则三","slug":"设计原则三","link":"#设计原则三","children":[]},{"level":2,"title":"社交APP的索引设计","slug":"社交app的索引设计","link":"#社交app的索引设计","children":[{"level":3,"title":"实际问题一","slug":"实际问题一","link":"#实际问题一","children":[]},{"level":3,"title":"实际问题二","slug":"实际问题二","link":"#实际问题二","children":[]},{"level":3,"title":"实际问题三","slug":"实际问题三","link":"#实际问题三","children":[]},{"level":3,"title":"实际问题四","slug":"实际问题四","link":"#实际问题四","children":[]},{"level":3,"title":"实际问题五","slug":"实际问题五","link":"#实际问题五","children":[]}]}],"git":{},"readingTime":{"minutes":6.92,"words":2077},"filePathRelative":"technology/database/mysql/practice03.md","localizedDate":"2023年5月12日","excerpt":"<h2>设计原则一</h2>\\n<p>在设计完表结构之后，不用马上就加索引，因为此时根本不知道会经常查询哪些数据，也就不知道怎么加索引合适。</p>\\n<p>当系统差不多开发完毕了，功能都跑通了，就可以考虑该如何创建索引了。</p>\\n<p>设计索引的第一条原则：针对SQL查询语句中的<code>WHERE</code>条件子句、<code>ORDER BY</code>排序子句和<code>GROUP BY</code>分组子句中出现的字段设计索引。</p>\\n<p>尽量利用<code>联合索引</code>，联合索引尽量包含<code>WHERE</code>、<code>ORDER BY</code>和<code>GROUP BY</code>中出现的字段，而且遵循<code>最左列匹配原则</code>、<code>等值匹配原则</code>和<code>范围匹配原则</code>。</p>","autoDesc":true}');export{r as comp,c as data};
